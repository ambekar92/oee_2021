var responseError = require('routes/errorHandler.js');
const logger = require('config/logger');
var throughputImpl = require('services/db/throughputImpl.js');
var throughputObj = new throughputImpl();
var testExecutionImpl = require('services/db/testExecutionImpl.js');
var executionObj = new testExecutionImpl();
var auth = require('config/auth');

const _ = require('underscore');
const { ObjectID } = require('mongodb');
var dateFormat = require("dateformat");
const { isNull } = require('underscore');

var routes = function() {};

module.exports = routes;

/******* Throughput Results Controller ******/

/* Function to parse and store RvR format data into DB */
async function rvrThroughputData(body, template) {
    try {
        console.log("rvrThroughputData : ", body);
        let obj = body["RvR Raw Data"]["Common"];

        await updateExecutions(body.Test_Execution_Id, obj);
        let execution = await executionObj.getExecution(body.Test_Execution_Id);
        execution = execution[0].name;
        obj = _.omit(obj, "Channel | 2.4 GHz", "S#N#", "Test_case_Id", "Test_Suite");
        obj = _.extend(obj, { execution_name: execution }, { project_type: template }, { execution_id: body.Test_Execution_Id }, { "Channel | 2 GHz": body["RvR Raw Data"]["Common"]["Channel | 2.4 GHz"] }, { test_suite: body.Test_Suite });

        let query;
        let update;
        let options = { upsert: true };
        _.each(Object.keys(body["RvR Raw Data"]), async function(item) {
            if ((item.includes("TCP_TX")) || (item.includes("TCP_RX")) || (item.includes("UDP_RX")) || (item.includes("UDP_TX"))) {
                let temp = {...obj };
                temp = _.extend(temp, { "DUT Protocol": item });
                query = temp;

                update = _.extend(temp, body["RvR Raw Data"][item]);
                await throughputObj.updateThroughput(query, update, options);
            }
        });

    } catch (err) {
        logger.error("rvrThroughputData error : ", err);
    }
}


/* Function to parse and store TP format data into DB */
async function tpThroughputData(body, project) {
    let element;
    try {
        let obj;
        if (body["STA Throughput Data"]) {
            obj = body["STA Throughput Data"];
        } else if (body["MMH Throughput Data"]) {
            obj = body["MMH Throughput Data"];
        }
        await updateExecutions(body.Test_Execution_Id, obj);
        let executionName = await executionObj.getExecution(body.Test_Execution_Id);
        executionName = executionName[0].name;
        obj = _.omit(obj, "Channel | 2.4 GHz", "Channel | 5 GHz", "S#N#", "Test_case_Id", "Test_Suite");
        obj = _.extend(obj, { execution_name: executionName }, { project_type: project }, { execution_id: body.Test_Execution_Id }, { test_suite: body.Test_Suite });

        let query = obj;
        let options = { upsert: true };
        let update;

        for (let item of Object.keys(body)) {
            if (item.includes("2.4GHz") || item.includes("5GHz")) {
                console.log(item);
                console.log(body[item]);

                let Limit_value_TCP_Tx = Number(body[item]["Limit_value_TCP-Tx"]) ? Number(body[item]["Limit_value_TCP-Tx"]) : '';
                let Limit_value_TCP_Rx = Number(body[item]["Limit_value_TCP-Rx"]) ? Number(body[item]["Limit_value_TCP-Rx"]) : '';
                let Limit_value_UDP_Tx = Number(body[item]["Limit_value_UDP-Tx"]) ? Number(body[item]["Limit_value_UDP-Tx"]) : '';
                let Limit_value_UDP_Rx = Number(body[item]["Limit_value_UDP-Rx"]) ? Number(body[item]["Limit_value_UDP-Rx"]) : '';

                let mode = {
                    Tcp_Tx: { value: Number(body[item]["TCP-Tx"]), percent: null, "Limit_value_TCP-Tx": Limit_value_TCP_Tx },
                    Tcp_Rx: { value: Number(body[item]["TCP-Rx"]), percent: null, "Limit_value_TCP-Rx": Limit_value_TCP_Rx },
                    Tcp_BI: { value: (body[item]["TCP-BI"]) ? Number(body[item]["TCP-BI"]) : "-", percent: null },
                    Udp_Tx: { value: Number(body[item]["UDP-Tx"]), percent: null, "Limit_value_UDP-Tx": Limit_value_UDP_Tx },
                    Udp_Rx: { value: Number(body[item]["UDP-Rx"]), percent: null, "Limit_value_UDP-Rx": Limit_value_UDP_Rx },
                    Udp_BI: { value: (body[item]["UDP-BI"]) ? Number(body[item]["UDP-BI"]) : "-", percent: null }
                };

                if (item.includes("2.4GHz")) {
                    element = item.split('|');
                    element[1] = " 2GHz";
                    element = element.join("|");
                    // obj[element] = mode;
                    if (body["STA Throughput Data"]) {
                        update = { 'Channel | 2 GHz': body["STA Throughput Data"]["Channel | 2.4 GHz"], [element]: mode };
                    } else if (body["MMH Throughput Data"]) {
                        update = { 'Channel | 2 GHz': body["MMH Throughput Data"]["Channel | 2.4 GHz"], [element]: mode };
                    }
                } else {
                    // obj[item] = mode;
                    if (body["STA Throughput Data"]) {
                        update = { 'Channel | 5 GHz': body["STA Throughput Data"]["Channel | 5 GHz"], [item]: mode };
                    } else if (body["MMH Throughput Data"]) {
                        update = { 'Channel | 5 GHz': body["MMH Throughput Data"]["Channel | 5 GHz"], [item]: mode };
                    }
                }
            }
        }

        await throughputObj.updateThroughput(query, update, options);

    } catch (err) {
        logger.error("tpThroughputData error : ", err);
    }
}


/* Function to parse and store IOP-TP format data into DB */
async function iopTpData(body) {
    console.log("In IOP-TP Data :", body);
    try {
        let obj = body["STA IOP Throughput Data"];
        await updateExecutions(body.Test_Execution_Id, obj);
        let executionName = await executionObj.getExecution(body.Test_Execution_Id);
        executionName = executionName[0].name;
        obj = _.omit(obj, "Channel | 2.4 GHz", "Channel | 5 GHz", "S#N#", "Test_case_Id", "Test_Execution_Id", "2.4GHz / 5GHz Support", "Test_Suite");
        obj = _.extend(obj, { execution_name: executionName }, { project_type: "IOP-TP" }, { execution_id: body.Test_Execution_Id }, { "2GHz / 5GHz Support": body["STA IOP Throughput Data"]["2.4GHz / 5GHz Support"] }, { test_suite: body.Test_Suite });

        let query = obj;
        let options = { upsert: true };
        let update = {};

        for (let item of Object.keys(body)) {
            if ((item.includes("2.4GHz") || item.includes("5GHz")) && (item.includes("-"))) {

                let mode = {
                    Tcp_Tx: { value: Number(body[item]["TCP-Tx"]), percent: null },
                    Tcp_Rx: { value: Number(body[item]["TCP-Rx"]), percent: null },
                    Udp_Tx: { value: Number(body[item]["UDP-Tx"]), percent: null },
                    Udp_Rx: { value: Number(body[item]["UDP-Rx"]), percent: null },
                };
                let element;

                if (item.includes("2.4GHz")) {
                    element = item.split('|');
                    element[1] = " 2GHz";
                    element = element.join("|");
                    update = _.extend(update, { 'Channel | 2 GHz': body["STA IOP Throughput Data"]["Channel | 2.4 GHz"], [element]: mode });
                } else {
                    update = _.extend(update, { 'Channel | 5 GHz': body["STA IOP Throughput Data"]["Channel | 5 GHz"], [item]: mode });
                }
            } else if (item.includes("2.4GHz") || item.includes("5GHz")) {
                let element;
                if (item.includes("2.4GHz")) {
                    element = item.split('|');
                    element[1] = " 2GHz";
                    element = element.join("|");
                    update = _.extend(update, {
                        [element]: body[item]
                    });
                } else {
                    update = _.extend(update, {
                        [item]: body[item]
                    });
                }
            }
        }

        await throughputObj.updateThroughput(query, update, options);

    } catch (err) {
        logger.error("iopTpData error : ", err);
    }
}


/* Function to parse and store TP format data into DB */
async function apThroughputData(body, project) {
    console.log("In AP Throughput Data :", body);
    try {
        let obj = body["AP Throughput Data"];
        await updateExecutions(body.Test_Execution_Id, obj);
        let executionName = await executionObj.getExecution(body.Test_Execution_Id);
        executionName = executionName[0].name;
        obj = _.omit(obj, "Channel | 2.4 GHz", "Channel | 5 GHz", "S#N#", "Test_case_Id", "LSP Ver.");
        obj = _.extend(obj, { execution_name: executionName }, { project_type: project }, { execution_id: body.Test_Execution_Id }, { "LSP Ver": body["AP Throughput Data"]["LSP Ver."] }, { test_suite: body.Test_Suite });

        let query = _.omit(obj, 'Channel | 5 GHz', 'Channel | 2 GHz');
        let options = { upsert: true };
        let update;

        for (let item of Object.keys(body)) {
            if (item.includes("2.4GHz") || item.includes("5GHz")) {
                console.log(item);
                console.log(body[item]);

                let mode = {
                    Tcp_Tx: { value: Number(body[item]["TCP-Tx"]), percent: null },
                    Tcp_Rx: { value: Number(body[item]["TCP-Rx"]), percent: null },
                    Tcp_BI: { value: (body[item]["TCP-BI"]) ? Number(body[item]["TCP-BI"]) : "-", percent: null },
                    Udp_Tx: { value: Number(body[item]["UDP-Tx"]), percent: null },
                    Udp_Rx: { value: Number(body[item]["UDP-Rx"]), percent: null },
                    Udp_BI: { value: (body[item]["UDP-BI"]) ? Number(body[item]["UDP-BI"]) : "-", percent: null }
                };

                if (item.includes("2.4GHz")) {
                    element = item.split('|');
                    element[1] = " 2GHz";
                    element = element.join("|");
                    // obj[element] = mode;
                    update = { 'Channel | 2 GHz': body["AP Throughput Data"]["Channel | 2.4 GHz"], [element]: mode };
                } else {
                    // obj[item] = mode;
                    update = { 'Channel | 5 GHz': body["AP Throughput Data"]["Channel | 5 GHz"], [item]: mode };
                }
            }
        }

        await throughputObj.updateThroughput(query, update, options);

    } catch (err) {
        logger.error("apThroughputData error : ", err);
    }
}


/* Function to parse and store IOP format data into DB */
async function iopThroughputData(body) {
    console.log("In IOP Throughput Data :", body);
    try {
        let obj = body["IOP Throughput Data"];
        await updateExecutions(body.Test_Execution_Id, obj);
        let executionName = await executionObj.getExecution(body.Test_Execution_Id);
        executionName = executionName[0].name;
        obj = _.omit(obj, "Channel | 2.4 GHz", "S#N#");
        obj = _.extend(obj, { execution_name: executionName }, { project_type: "IOP-Perf" }, { execution_id: body.Test_Execution_Id }, { 'Channel | 2 GHz': body["IOP Throughput Data"]["Channel | 2.4 GHz"] }, { test_suite: body.Test_Suite });

        let query = _.omit(obj, 'Channel | 5 GHz', 'Channel | 2 GHz');
        let options = { upsert: true };

        for (let item of Object.keys(body)) {
            if (item.includes("2.4GHz") || item.includes("5GHz")) {
                console.log(item);
                console.log(body[item]);

                let mode = {
                    Tcp_Tx: { value: Number(body[item]["TCP-Tx"]), percent: null },
                    Tcp_Rx: { value: Number(body[item]["TCP-Rx"]), percent: null },
                    Udp_Tx: { value: Number(body[item]["UDP-Tx"]), percent: null },
                    Udp_Rx: { value: Number(body[item]["UDP-Rx"]), percent: null },
                    'PHY Rate': { value: Number(body[item]["PHY Rate"]), percent: null }
                };

                if (item.includes("2.4GHz")) {
                    element = item.split('|');
                    if (element.length > 1) {
                        element[1] = " 2GHz";
                        element = element.join("|");
                    } else {
                        element = "2GHz";
                    }
                    obj[element] = mode;
                } else {
                    obj[item] = mode;
                }
            }
        }
        let update = obj;

        await throughputObj.updateThroughput(query, update, options);

    } catch (err) {
        logger.error("iopThroughputData error : ", err);
    }
}


/* Function to parse and store 2/3/4 Interface format data into DB */
async function multiInterfaceData(body, project) {
    try {
        console.log("multiInterfaceData : ", body);
        let obj = body;
        await updateExecutions(body.Test_Execution_Id, obj);
        let executionName = await executionObj.getExecution(body["Test_Execution_Id"]);
        executionName = executionName[0].name;
        obj = _.omit(obj, "S#N#", "Misc.");
        obj = _.extend(obj, { execution_name: executionName }, { project_type: project }, { execution_id: body["Test_Execution_Id"] }, { test_suite: body.Test_Suite }, { "Misc": body["Misc."] });

        let query = obj;
        let update = obj;
        let options = { upsert: true };
        await throughputObj.updateThroughput(query, update, options);

    } catch (err) {
        logger.error("multiInterfaceData error : ", err);
    }
}


/* Function to parse and store COEX 2-Interface format data into DB */
async function coexIntfTpData(body, project) {
    try {
        console.log("coexIntfTpData : ", body);
        let obj, query, update;
        let executionName = await executionObj.getExecution(body.Test_Execution_Id);
        executionName = executionName[0].name;

        if (project == 'Coex-Simul-TP-2INTF') {
            obj = body["Master WLAN DRCS COEX"];
            await updateExecutions(body.Test_Execution_Id, obj);
            obj = _.omit(obj, "S#N#", "Misc.");
            obj = _.extend(obj, { execution_name: executionName }, { project_type: project }, { "Misc": body["Master WLAN DRCS COEX"]["Misc."] }, { execution_id: body["Test_Execution_Id"] }, { test_suite: body.Test_Suite });
            for (let item of Object.keys(body["Master WLAN DRCS COEX"])) {
                if (item.includes("TCP") || item.includes("UDP")) {
                    query = _.omit(obj, item);
                    update = {
                        [item]: body["Master WLAN DRCS COEX"][item]
                    };
                }
            }
        } else {
            obj = body["Throughput Data"];
            await updateExecutions(body.Test_Execution_Id, obj);
            obj = _.omit(obj, "S#N#", "Misc.");
            obj = _.extend(obj, { execution_name: executionName }, { project_type: project }, { "Misc": body["Throughput Data"]["Misc."] }, { execution_id: body["Test_Execution_Id"] }, { test_suite: body.Test_Suite });
            query = obj;
            for (let item of Object.keys(body)) {
                if (item.includes("TCP") || item.includes("UDP")) {
                    update = {
                        [item]: body[item]
                    };
                }
            }
        }


        let options = { upsert: true };
        await throughputObj.updateThroughput(query, update, options);

    } catch (err) {
        logger.error("coexIntfTpData error : ", err);
    }
}


/* Function to parse and store COEX RVR (Set1, Set2, Set3) format data into DB */
async function coexRvrData(body, project) {
    try {
        // console.log("coexRvrData : ", body);
        let obj = body["RvR Raw Data"]["Common"];
        await updateExecutions(body.Test_Execution_Id, obj);
        let executionName = await executionObj.getExecution(body.Test_Execution_Id);
        executionName = executionName[0].name;
        obj = _.omit(obj, "S#N#", "Channel | 2.4 GHz", "Test_Suite");
        obj = _.extend(obj, { execution_name: executionName }, { project_type: project }, { "Channel | 2 GHz": body["RvR Raw Data"]["Common"]["Channel | 2.4 GHz"] }, { execution_id: body["Test_Execution_Id"] }, { Test_case_Id: body.Test_case_Id }, { test_suite: body.Test_Suite });

        let query = obj;
        let update = obj;
        let options = { upsert: true };

        _.each(Object.keys(body["RvR Raw Data"]), function(item) {
            if ((item.includes("TCP-TX")) || (item.includes("TCP-RX")) || (item.includes("UDP-RX")) || (item.includes("UDP-TX"))) {
                let temp = {...obj };
                temp = _.extend(temp, { "DUT Protocol": item });
                query = _.omit(temp, "Test_case_Id");

                _.each(body["RvR Raw Data"][item], function(element, key) {
                    let result = key.split('_');
                    let values = element.split('_');
                    query = _.extend(query, { "ANT isolation": result.shift() });
                    let Attn = result.shift();
                    let AttnObj = {
                        [Attn]: _.object(result, values)
                    };
                    update = AttnObj;
                    throughputObj.updateThroughput(query, update, options).then((r) => console.log(r))
                });
            }
        });
    } catch (err) {
        logger.error("coexRvrData error : ", err);
    }
}


/* Function to parse and store ofdma-ul format data into DB */
async function ofdmaULData(body) {
    try {
        console.log("ofdmaULData : ", body);
        let obj = body;
        await updateExecutions(body.Test_Execution_Id, obj);
        let executionName = await executionObj.getExecution(body.Test_Execution_Id);
        executionName = executionName[0].name;
        obj = _.omit(obj, "No. of STAs", "Test_Execution_Id", "Test_Suite");
        obj = _.extend(obj, { execution_name: executionName }, { project_type: "OFDMA-UL" }, { "No of STAs": body["No. of STAs"] }, { Date: dateFormat(new Date(), "dd-mm-yyyy") }, { execution_id: body["Test_Execution_Id"] }, { test_suite: body.Test_Suite });

        let query = obj;
        let update = obj;
        let options = { upsert: true };
        await throughputObj.updateThroughput(query, update, options);

    } catch (err) {
        logger.error("ofdmaULData error : ", err);
    }
}


/* Function to parse and store ofdma-ul format data into DB */
async function ofdmaDLData(body) {
    try {
        console.log("ofdmaDLData : ", body);
        let obj = body;
        await updateExecutions(body.Test_Execution_Id, obj);
        let executionName = await executionObj.getExecution(body.Test_Execution_Id);
        executionName = executionName[0].name;
        obj = _.omit(obj, "No. of STAs", "Test_Execution_Id", "Test_Suite");
        obj = _.extend(obj, { execution_name: executionName }, { project_type: "OFDMA-DL" }, { "No of STAs": body["No. of STAs"] }, { Date: dateFormat(new Date(), "dd-mm-yyyy") }, { execution_id: body["Test_Execution_Id"] }, { test_suite: body.Test_Suite });

        let query = obj;
        let update = obj;
        let options = { upsert: true };
        await throughputObj.updateThroughput(query, update, options);

    } catch (err) {
        logger.error("ofdmaDLData error : ", err);
    }
}


/* Function to parse and store dl-11ac-mu-mimoData format data inti DB */
async function dl11acMumimoData(body) {
    try {
        console.log("dl11acMumimoData : ", body);
        let obj = body;
        await updateExecutions(body.Test_Execution_Id, obj);
        let executionName = await executionObj.getExecution(body.Test_Execution_Id);
        executionName = executionName[0].name;
        obj = _.omit(obj, "Test_Execution_Id", "Test_Suite");
        obj = _.extend(obj, { execution_name: executionName }, { project_type: "DL-11ac-MU-MIMO" }, { execution_id: body["Test_Execution_Id"] }, { test_suite: body.Test_Suite });

        let query = obj;
        let update = obj;
        let options = { upsert: true };
        await throughputObj.updateThroughput(query, update, options);

    } catch (err) {
        logger.error("dl11acMumimoData : ", err);
    }
}


/* Function to parse and store dl-11ax-mu-mimoData format data into DB */
async function dl11axMumimoData(body) {
    try {
        console.log("dl11axMumimoData : ", body);
        let obj = body;
        await updateExecutions(body.Test_Execution_Id, obj);
        let executionName = await executionObj.getExecution(body.Test_Execution_Id);
        executionName = executionName[0].name;
        obj = _.omit(obj, "Test_Execution_Id", "Test_Suite");
        obj = _.extend(obj, { execution_name: executionName }, { project_type: "DL-11ax-MU-MIMO" }, { execution_id: body["Test_Execution_Id"] }, { test_suite: body.Test_Suite });

        let query = obj;
        let update = obj;
        let options = { upsert: true };
        await throughputObj.updateThroughput(query, update, options);

    } catch (err) {
        logger.error("dl11axMumimoData : ", err);
    }
}


/* Function to parse and store dl-11ax-mu-mimoData format data into DB */
async function ul11axMumimoData(body) {
    try {
        console.log("ul11axMumimoData : ", body);
        let obj = body;
        await updateExecutions(body.Test_Execution_Id, obj);
        let executionName = await executionObj.getExecution(body.Test_Execution_Id);
        executionName = executionName[0].name;
        obj = _.omit(obj, "Test_Execution_Id", "Test_Suite");
        obj = _.extend(obj, { execution_name: executionName }, { project_type: "UL-11ax-MU-MIMO" }, { execution_id: body["Test_Execution_Id"] }, { test_suite: body.Test_Suite });

        let query = obj;
        let update = obj;
        let options = { upsert: true };
        await throughputObj.updateThroughput(query, update, options);

    } catch (err) {
        logger.error("ul11axMumimoData : ", err);
    }
}


/* Function to parse and store DBC-Cpu-Util format data into DB */
async function dbcCpuUtilData(body) {
    try {
        console.log("dbcCpuUtilData : ", body);
        let obj = body["DBC CPUutil Data"]["common"];
        await updateExecutions(body.Test_Execution_Id, obj);
        let executionName = await executionObj.getExecution(body["DBC CPUutil Data"]["Test_Execution_Id"]);
        executionName = executionName[0].name;
        obj = _.extend(obj, { execution_name: executionName }, { project_type: "DBC-Cpu-Util" }, { execution_id: body["DBC CPUutil Data"]["Test_Execution_Id"] }, { "Misc": body["DBC CPUutil Data"]["common"]["Misc."] }, { test_suite: body.Test_Suite });
        obj = _.omit(obj, "Test_Execution_Id", "Test_case_Id", "Misc.", "Test_Suite");

        let query;
        let update;
        let options = { upsert: true };

        let key = Object.keys(body["DBC CPUutil Data"]);
        for (let item of key) {
            if (item.includes("Process")) {
                let temp = {...obj };
                temp = _.extend(temp, { "DUT Protocol (Radio-0)": item });
                update = _.extend(temp, body["DBC CPUutil Data"][item]);;
                query = update;
                await throughputObj.updateThroughput(query, update, options);
            }
        }

        _.each(Object.keys(body["DBC CPUutil Data"]), async function(item) {
            if (item != "Process" && item != "common" && typeof(body["DBC CPUutil Data"][item]) === 'object') {
                let temp = {...obj };
                temp = _.extend(temp, { "DUT Protocol (Radio-0)": item.split('_')[0] }, { "DUT Protocol (Radio-1)": item.split('_')[1] }, { "No of CPU Cores": body["DBC CPUutil Data"][item]["No.Of CPU Cores"] });
                update = _.extend(temp, body["DBC CPUutil Data"][item]);
                update = _.omit(temp, "No.Of CPU Cores");
                query = update;
                await throughputObj.updateThroughput(query, update, options);
            }
        })

    } catch (err) {
        logger.error("dbcCpuUtilData : ", err);
    }
}


/* Function to parse and store sta-Cpu-UtilData format data inti DB */
async function staCpuUtilData(body) {
    try {
        console.log("Sta Cpu Util Data : ", body);
        let obj = body["STA CPUutil Data"]["Common"];

        await updateExecutions(body.Test_Execution_Id, obj);
        let execution = await executionObj.getExecution(body.Test_Execution_Id);
        execution = execution[0].name;
        obj = _.omit(obj, "Test_Execution_Id", "S#N#", "Channel | 2.4 GHz", "Test_Suite", "Misc.");
        obj = _.extend(obj, { execution_name: execution }, { project_type: "STA-CPU-Util" }, { execution_id: body.Test_Execution_Id }, { "Channel | 2 GHz": body["STA CPUutil Data"]["Common"]["Channel | 2.4 GHz"] }, { test_suite: body.Test_Suite }, { "Misc": body["STA CPUutil Data"]["Common"]["Misc."] });

        let query;
        let update;
        let options = { upsert: true };

        let key = Object.keys(body["STA CPUutil Data"]);
        for (let item of key) {
            if (item.includes("Process")) {
                let temp = {...obj };
                temp = _.extend(temp, { "DUT Protocol": item });
                update = _.extend(temp, body["STA CPUutil Data"][item]);;
                query = update;
                // await throughputObj.updateThroughput(query, update, options);
                await throughputObj.insertThroughput(query);
            }
        }

        _.each(Object.keys(body["STA CPUutil Data"]), async function(item) {
            if ((item.includes("TCP-TX")) || (item.includes("TCP-RX")) || (item.includes("UDP-TX")) || (item.includes("UDP-RX"))) {
                let temp = {...obj };
                temp = _.extend(temp, { "DUT Protocol": item });

                update = _.extend(temp, body["STA CPUutil Data"][item], { "No Of CPU Cores": body["STA CPUutil Data"][item]["No.Of CPU Cores"] });
                update = _.omit(update, "No.Of CPU Cores");
                query = update;
                // await throughputObj.updateThroughput(query, update, options);
                await throughputObj.insertThroughput(query);
            }
        });

    } catch (err) {
        logger.error("Sta Cpu Util Data : ", err);
    }
}


/** Function to parse and store STA-Coex, P2P-Coex, MMH-Coex data in db  */
async function coexTpData(body, project) {
    let element;
    let query;
    let update;
    let obj;

    try {
        console.log("CoexThroughputData : ", body);
        if (project == 'STA-Coex-TP') {
            obj = body["STA Throughput Data"];
        } else if (project == 'P2P-Coex-TP') {
            obj = body["P2P Throughput Data"];
        } else {
            obj = body["MMH Throughput Data"];
        }

        await updateExecutions(body.Test_Execution_Id, obj);
        let execution = await executionObj.getExecution(body.Test_Execution_Id);
        execution_name = execution[0].name;

        obj = _.omit(obj, "Channel | 2.4 GHz", "Channel | 5 GHz", "S#N#", "Test_case_Id");
        obj = _.extend(obj, { execution_name: execution_name }, { project_type: project }, { execution_id: body.Test_Execution_Id }, { test_suite: body.Test_Suite });

        query = obj;
        let keys = Object.keys(body);
        let data = await throughputObj.findThroughputData(query);
        // console.log("data", data);
        let options = { upsert: true };

        for (let item of keys) {
            if (item.includes("2.4GHz") || item.includes("5GHz")) {
                if (item.includes("2.4GHz")) {
                    element = item.split('|');
                    element[1] = " 2GHz";
                    element = element.join("|");
                    console.log("ele--", element, body[item]);

                    if (data.length) {
                        if (_.has(data[0], element)) {
                            console.log("yes");
                            _.extend(data[0][
                                [element]
                            ]["COEX_Performance"], body[item].COEX_Performance);
                            update = data[0];
                            await throughputObj.updateThroughput(query, update, options);
                        } else {
                            console.log("no");
                            if (project == 'STA-Coex-TP') {
                                update = { 'Channel | 2 GHz': body["STA Throughput Data"]["Channel | 2.4 GHz"], [element]: { "COEX_Performance": body[item].COEX_Performance } };
                            } else if (project == 'P2P-Coex-TP') {
                                update = { 'Channel | 2 GHz': body["P2P Throughput Data"]["Channel | 2.4 GHz"], [element]: { "COEX_Performance": body[item].COEX_Performance } };
                            } else {
                                update = { 'Channel | 2 GHz': body["MMH Throughput Data"]["Channel | 2.4 GHz"], [element]: { "COEX_Performance": body[item].COEX_Performance } };
                            }
                            await throughputObj.updateThroughput(data[0], update, options);
                        }
                    } else {
                        if (project == 'STA-Coex-TP') {
                            update = { 'Channel | 2 GHz': body["STA Throughput Data"]["Channel | 2.4 GHz"], [element]: { "COEX_Performance": body[item].COEX_Performance } };
                        } else if (project == 'P2P-Coex-TP') {
                            update = { 'Channel | 2 GHz': body["P2P Throughput Data"]["Channel | 2.4 GHz"], [element]: { "COEX_Performance": body[item].COEX_Performance } };
                        } else {
                            update = { 'Channel | 2 GHz': body["MMH Throughput Data"]["Channel | 2.4 GHz"], [element]: { "COEX_Performance": body[item].COEX_Performance } };
                        }
                        await throughputObj.updateThroughput(query, update, options);
                    }
                } else {
                    if (data.length) {
                        if (_.has(data[0], item)) {
                            console.log("yes");
                            _.extend(data[0][
                                [item]
                            ]["COEX_Performance"], body[item].COEX_Performance);
                            update = data[0];
                            await throughputObj.updateThroughput(query, update, options);
                        } else {
                            console.log("no");
                            if (project == 'STA-Coex-TP') {
                                update = { 'Channel | 5 GHz': body["STA Throughput Data"]["Channel | 5 GHz"], [item]: { "COEX_Performance": body[item].COEX_Performance } };
                            } else if (project == 'P2P-Coex-TP') {
                                update = { 'Channel | 5 GHz': body["P2P Throughput Data"]["Channel | 5 GHz"], [item]: { "COEX_Performance": body[item].COEX_Performance } };
                            } else {
                                update = { 'Channel | 5 GHz': body["MMH Throughput Data"]["Channel | 5 GHz"], [item]: { "COEX_Performance": body[item].COEX_Performance } };
                            }
                            await throughputObj.updateThroughput(data[0], update, options);
                        }
                    } else {
                        if (project == 'STA-Coex-TP') {
                            update = { 'Channel | 5 GHz': body["STA Throughput Data"]["Channel | 5 GHz"], [item]: { "COEX_Performance": body[item].COEX_Performance } };
                        } else if (project == 'P2P-Coex-TP') {
                            update = { 'Channel | 5 GHz': body["P2P Throughput Data"]["Channel | 5 GHz"], [item]: { "COEX_Performance": body[item].COEX_Performance } };
                        } else {
                            update = { 'Channel | 5 GHz': body["MMH Throughput Data"]["Channel | 5 GHz"], [item]: { "COEX_Performance": body[item].COEX_Performance } };
                        }
                        await throughputObj.updateThroughput(query, update, options);
                    }
                }
            }
        }
    } catch (error) {
        logger.error("staCoexThroughputData error : ", error);
    }
}


/* Function to parse and store reverb-ota-rvr format data into DB */
async function reverbOtaRvr(body, project) {
    try {
        console.log("reverbOtaRvr : ", body);
        let obj = body["Common"];
        await updateExecutions(body.Test_Execution_Id, obj);
        let executionName = await executionObj.getExecution(body.Test_Execution_Id);
        executionName = executionName[0].name;
        obj = _.omit(obj, "Test_case_Id", "Test_Execution_Id", "Test_Suite");
        obj = _.extend(obj, { execution_name: executionName }, { project_type: project }, { execution_id: body["Test_Execution_Id"] }, { test_suite: body.Test_Suite });
        let query;
        let update;
        let options = { upsert: true };

        _.each(Object.keys(body), async function(item) {
            if ((item.includes("TCP-TX")) || (item.includes("TCP-RX")) || (item.includes("UDP-RX")) || (item.includes("UDP-TX"))) {
                let temp = {...obj };
                var elements = item.split('_');
                temp = _.extend(temp, { "Traffic": elements[2] }, { "Attn": elements[0] });
                query = temp;

                update = {
                    [elements[1]]: body[item]
                };
                await throughputObj.updateThroughput(query, update, options);
            }
        });

    } catch (err) {
        logger.error("reverbOtaRvr error : ", err);
    }
}


/* Function to compare multiple RvR execution data */
async function compareRvrData(executions) {
    try {
        let uniqAgg = _.pluck(_.uniq(_.union(executions), false, _.property('Aggregation')), 'Aggregation');
        let uniqCompDev = _.pluck(_.uniq(_.union(executions), false, _.property('Companion Device/Ex-AP/Ex-STA/Ex-P2P-GO/Ex-P2P-GC')), 'Companion Device/Ex-AP/Ex-STA/Ex-P2P-GO/Ex-P2P-GC');
        let uniqDut = _.pluck(_.uniq(_.union(executions), false, _.property('DUT')), 'DUT');
        let uniqDutDrv = _.pluck(_.uniq(_.union(executions), false, _.property('DUT Fw/Drv')), 'DUT Fw/Drv');
        let uniqDutHost = _.pluck(_.uniq(_.union(executions), false, _.property('DUT Host Platform')), 'DUT Host Platform');
        let uniqMode = _.pluck(_.uniq(_.union(executions), false, _.property('DUT Mode')), 'DUT Mode');
        let uniqOs = _.pluck(_.uniq(_.union(executions), false, _.property('DUT OS')), 'DUT OS');
        let uniqProtocols = _.pluck(_.uniq(_.union(executions), false, _.property('DUT Protocol')), 'DUT Protocol');
        let uniqDataRate = _.pluck(_.uniq(_.union(executions), false, _.property('Data Rate')), 'Data Rate');
        let uniqInterface = _.pluck(_.uniq(_.union(executions), false, _.property('Interface')), 'Interface');
        let uniqGI = _.pluck(_.uniq(_.union(executions), false, _.property('Guard Interval')), 'Guard Interval');
        let uniqSdio = _.pluck(_.uniq(_.union(executions), false, _.property('SDIO Clock')), 'SDIO Clock');
        let uniqSecurity = _.pluck(_.uniq(_.union(executions), false, _.property('Security')), 'Security');
        let uniqSocType = _.pluck(_.uniq(_.union(executions), false, _.property('SoC TYPE')), 'SoC TYPE');
        let uniqSocVer = _.pluck(_.uniq(_.union(executions), false, _.property('SoC Version')), 'SoC Version');
        let uniqSS = _.pluck(_.uniq(_.union(executions), false, _.property('Spatial Streams')), 'Spatial Streams');
        let uniqTp = _.pluck(_.uniq(_.union(executions), false, _.property('TP TYPE')), 'TP TYPE');

        let testCompareObjects = [];

        _.each(uniqAgg, function(item_1) {
            let commonAgg = _.filter(executions, function(k) { return k['Aggregation'] == item_1; })
            _.each(uniqCompDev, function(item_2) {
                let commonCompDev = _.filter(commonAgg, function(k) { return k['Companion Device/Ex-AP/Ex-STA/Ex-P2P-GO/Ex-P2P-GC'] == item_2; })
                _.each(uniqDut, function(item_3) {
                    let commonDut = _.filter(commonCompDev, function(k) { return k['DUT'] == item_3; })
                    _.each(uniqDutDrv, function(item_4) {
                        let commonDutDrv = _.filter(commonDut, function(k) { return k['DUT Fw/Drv'] == item_4; })
                        _.each(uniqDutHost, function(item_5) {
                            let commonDutHost = _.filter(commonDutDrv, function(k) { return k['DUT Host Platform'] == item_5; })
                            _.each(uniqInterface, function(item_6) {
                                let commonIntf = _.filter(commonDutHost, function(k) { return k['Interface'] == item_6; })
                                _.each(uniqMode, function(item_7) {
                                    let commonMode = _.filter(commonIntf, function(k) { return k['DUT Mode'] == item_7; })
                                    _.each(uniqOs, function(item_8) {
                                        let commonOs = _.filter(commonMode, function(k) { return k['DUT OS'] == item_8; })
                                        _.each(uniqProtocols, function(item_9) {
                                            let commonProtcl = _.filter(commonOs, function(k) { return k['DUT Protocol'] == item_9; })
                                            _.each(uniqDataRate, function(item_10) {
                                                let commonDataRate = _.filter(commonProtcl, function(k) { return k['Data Rate'] == item_10; })
                                                _.each(uniqGI, function(item_11) {
                                                    let commonGI = _.filter(commonDataRate, function(k) { return k['Guard Interval'] == item_11; })
                                                    _.each(uniqSdio, function(item_12) {
                                                        let commonSdio = _.filter(commonGI, function(k) { return k['SDIO Clock'] == item_12; })
                                                        _.each(uniqSecurity, function(item_13) {
                                                            let commonSec = _.filter(commonSdio, function(k) { return k['Security'] == item_13; })
                                                            _.each(uniqSocType, function(item_14) {
                                                                let commonSocType = _.filter(commonSec, function(k) { return k['SoC TYPE'] == item_14; })
                                                                _.each(uniqSocVer, function(item_15) {
                                                                    let commonVer = _.filter(commonSocType, function(k) { return k['SoC Version'] == item_15; })
                                                                    _.each(uniqSS, function(item_16) {
                                                                        let commonSS = _.filter(commonVer, function(k) { return k['Spatial Streams'] == item_16; })
                                                                        _.each(uniqTp, function(item_17) {
                                                                            let commonTp = _.filter(commonSS, function(k) { return k['TP TYPE'] == item_17; })
                                                                            if (commonTp.length) {
                                                                                testCompareObjects.push(commonTp);
                                                                            }
                                                                        })
                                                                    })
                                                                })
                                                            })
                                                        })
                                                    })
                                                })
                                            })
                                        })
                                    })
                                })
                            })
                        })
                    })
                })
            })
        });
        // console.log("testCompareObjects", testCompareObjects);
        return testCompareObjects;
    } catch (err) {
        logger.error("compareRvrData error : ", err);
    }
}


/* Function to compare Reverse RvR execution data */
async function compareReverseRvrData(executions) {
    try {
        let uniqTestCases = _.pluck(_.uniq(_.union(executions), false, _.property('Test_id')), 'Test_id');
        let uniqAp = _.pluck(_.uniq(_.union(executions), false, _.property('AP')), 'AP');
        let uniqSoc = _.pluck(_.uniq(_.union(executions), false, _.property('SOC')), 'SOC');
        let uniqReleaseBuild = _.pluck(_.uniq(_.union(executions), false, _.property('Release Build')), 'Release Build');
        let uniqBand = _.pluck(_.uniq(_.union(executions), false, _.property('Band')), 'Band');
        let uniqChannel = _.pluck(_.uniq(_.union(executions), false, _.property('Channel')), 'Channel');
        let uniqSecurity = _.pluck(_.uniq(_.union(executions), false, _.property('Security')), 'Security');
        let uniqConfig = _.pluck(_.uniq(_.union(executions), false, _.property('Configuration')), 'Configuration');
        let uniqSta = _.pluck(_.uniq(_.union(executions), false, _.property('STA')), 'STA');
        let uniqTraffic = _.pluck(_.uniq(_.union(executions), false, _.property('Traffic')), 'Traffic');
        let uniqTrafficDirection = _.pluck(_.uniq(_.union(executions), false, _.property('Traffic Direction')), 'Traffic Direction');
        let uniqAttn = _.pluck(_.uniq(_.union(executions), false, _.property('Attn')), 'Attn');
        let uniqRssi = _.pluck(_.uniq(_.union(executions), false, _.property('RSSI')), 'RSSI');
        let testCompareObjects = [];

        _.each(uniqTestCases, function(element) {
            let commonElements = _.filter(executions, function(p) { return p['Test_id'] == element; })
                //console.log("common---",commonElements);

            _.each(uniqAp, function(item) {
                let commonItems = _.filter(commonElements, function(k) { return k['AP'] == item; })
                _.each(uniqSoc, function(item) {
                    let commonItems2 = _.filter(commonItems, function(k) { return k['SOC'] == item; })
                    _.each(uniqReleaseBuild, function(item) {
                        let commonItems3 = _.filter(commonItems2, function(k) { return k['Release Build'] == item; })
                        _.each(uniqBand, function(item) {
                            let commonItems4 = _.filter(commonItems3, function(k) { return k['Band'] == item; })
                            _.each(uniqChannel, function(item) {
                                let commonItems5 = _.filter(commonItems4, function(k) { return k['Channel'] == item; })
                                _.each(uniqSecurity, function(item) {
                                    let commonItems6 = _.filter(commonItems5, function(k) { return k['Security'] == item; })
                                    _.each(uniqConfig, function(item) {
                                        let commonItems7 = _.filter(commonItems6, function(k) { return k['Configuration'] == item; })
                                        _.each(uniqSta, function(item) {
                                            let commonItems8 = _.filter(commonItems7, function(k) { return k['STA'] == item; })
                                            _.each(uniqTraffic, function(item) {
                                                let commonItems9 = _.filter(commonItems8, function(k) { return k['Traffic'] == item; })
                                                _.each(uniqTrafficDirection, function(item) {
                                                    let commonItems10 = _.filter(commonItems9, function(k) { return k['Traffic Direction'] == item; })
                                                    _.each(uniqAttn, function(item) {
                                                        let commonItems11 = _.filter(commonItems10, function(k) { return k['Attn'] == item; })
                                                        _.each(uniqRssi, function(item) {
                                                            let commonItems12 = _.filter(commonItems11, function(k) { return k['RSSI'] == item; })
                                                            if (commonItems12.length) {
                                                                testCompareObjects.push(commonItems12);
                                                            }
                                                        })
                                                    })
                                                })
                                            })
                                        })
                                    })
                                })
                            })
                        })
                    })
                })
            })
        });
        return testCompareObjects;
    } catch (err) {
        logger.error("compareReverseRvrData error : ", err);
    }
}


/* Function to compare Ota RvR execution data */
async function compareOtaRvrData(executions) {
    try {
        let uniqAput = _.pluck(_.uniq(_.union(executions), false, _.property('APUT')), 'APUT');
        let uniqApBe = _.pluck(_.uniq(_.union(executions), false, _.property('AP-BE')), 'AP-BE');
        let uniqApReleaseBuild = _.pluck(_.uniq(_.union(executions), false, _.property('APUT Release Build')), 'APUT Release Build');
        let uniqFreqBand = _.pluck(_.uniq(_.union(executions), false, _.property('Frequency Band')), 'Frequency Band');
        let uniqBandwidth = _.pluck(_.uniq(_.union(executions), false, _.property('Bandwidth')), 'Bandwidth');
        let uniqChannel = _.pluck(_.uniq(_.union(executions), false, _.property('Channel')), 'Channel');
        let uniqSecurity = _.pluck(_.uniq(_.union(executions), false, _.property('Security')), 'Security');
        let uniqAputMode = _.pluck(_.uniq(_.union(executions), false, _.property('APUT Mode')), 'APUT Mode');
        let uniqAputPt = _.pluck(_.uniq(_.union(executions), false, _.property('APUT PT')), 'APUT PT');
        let uniqStaut = _.pluck(_.uniq(_.union(executions), false, _.property('STAUT')), 'STAUT');
        let uniqStaBe = _.pluck(_.uniq(_.union(executions), false, _.property('STA-BE')), 'STA-BE');
        let uniqStaReleaseBuild = _.pluck(_.uniq(_.union(executions), false, _.property('STAUT Release Build')), 'STAUT Release Build');
        let uniqstautPt = _.pluck(_.uniq(_.union(executions), false, _.property('STAUT PT')), 'STAUT PT');
        let uniqProtocol = _.pluck(_.uniq(_.union(executions), false, _.property('Traffic')), 'Traffic');
        let uniqAttn = _.pluck(_.uniq(_.union(executions), false, _.property('Attn')), 'Attn');
        let uniqApRssi = _.pluck(_.uniq(_.union(executions), false, _.property('AP-RSSI')), 'AP-RSSI');
        let uniqStaRssi = _.pluck(_.uniq(_.union(executions), false, _.property('STA-RSSI')), 'STA-RSSI');
        let testCompareObjects = [];

        _.each(uniqAput, function(element) {
            let commonElements = _.filter(executions, function(p) { return p['APUT'] == element; })
            _.each(uniqApBe, function(item) {
                let commonItems = _.filter(commonElements, function(k) { return k['AP-BE'] == item; })
                _.each(uniqApReleaseBuild, function(item) {
                    let commonItems2 = _.filter(commonItems, function(k) { return k['APUT Release Build'] == item; })
                    _.each(uniqFreqBand, function(item) {
                        let commonItems3 = _.filter(commonItems2, function(k) { return k['Frequency Band'] == item; })
                        _.each(uniqBandwidth, function(item) {
                            let commonItems4 = _.filter(commonItems3, function(k) { return k['Bandwidth'] == item; })
                            _.each(uniqChannel, function(item) {
                                let commonItems5 = _.filter(commonItems4, function(k) { return k['Channel'] == item; })
                                _.each(uniqSecurity, function(item) {
                                    let commonItems6 = _.filter(commonItems5, function(k) { return k['Security'] == item; })
                                    _.each(uniqAputMode, function(item) {
                                        let commonItems7 = _.filter(commonItems6, function(k) { return k['APUT Mode'] == item; })
                                        _.each(uniqAputPt, function(item) {
                                            let commonItems8 = _.filter(commonItems7, function(k) { return k['APUT PT'] == item; })
                                            _.each(uniqStaut, function(item) {
                                                let commonItems9 = _.filter(commonItems8, function(k) { return k['STAUT'] == item; })
                                                _.each(uniqStaBe, function(item) {
                                                    let commonItems10 = _.filter(commonItems9, function(k) { return k['STA-BE'] == item; })
                                                    _.each(uniqStaReleaseBuild, function(item) {
                                                        let commonItems11 = _.filter(commonItems10, function(k) { return k['STAUT Release Build'] == item; })
                                                        _.each(uniqstautPt, function(item) {
                                                            let commonItems12 = _.filter(commonItems11, function(k) { return k['STAUT PT'] == item; })
                                                            _.each(uniqProtocol, function(item) {
                                                                let commonItems13 = _.filter(commonItems12, function(k) { return k['Traffic'] == item; })
                                                                _.each(uniqAttn, function(item) {
                                                                    let commonItems14 = _.filter(commonItems13, function(k) { return k['Attn'] == item; })
                                                                    _.each(uniqApRssi, function(item) {
                                                                        let commonItems15 = _.filter(commonItems14, function(k) { return k['AP-RSSI'] == item; })
                                                                        _.each(uniqStaRssi, function(item) {
                                                                            let commonItems16 = _.filter(commonItems15, function(k) { return k['STA-RSSI'] == item; })
                                                                            if (commonItems16.length) {
                                                                                testCompareObjects.push(commonItems16);
                                                                            }
                                                                        })
                                                                    })
                                                                })
                                                            })
                                                        })
                                                    })
                                                })
                                            })
                                        })
                                    })
                                })
                            })
                        })
                    })
                })
            })
        });
        //console.log("testCompareObjects", testCompareObjects);
        return testCompareObjects;
    } catch (err) {
        logger.error("compareOtaRvrData error : ", err);
    }
}


/* Function for smart merge of ofdma executions */
async function ofdmaUlMerge(executions) {
    try {
        let testCompareObjects = [];

        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Aggregation')), 'Aggregation'), function(element) {
            let commonAgg = _.filter(executions, function(p) { return p['Aggregation'] == element; })
            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Band')), 'Band'), function(element) {
                let commonBand = _.filter(commonAgg, function(p) { return p['Band'] == element; })
                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Bandwidth')), 'Bandwidth'), function(element) {
                    let commonBandwidth = _.filter(commonBand, function(p) { return p['Bandwidth'] == element; })
                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Channel')), 'Channel'), function(element) {
                        let commonChannel = _.filter(commonBandwidth, function(p) { return p['Channel'] == element; })
                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('GI')), 'GI'), function(element) {
                            let commonGI = _.filter(commonChannel, function(p) { return p['GI'] == element; })
                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('No of STAs')), 'No of STAs'), function(element) {
                                let commonStaNo = _.filter(commonGI, function(p) { return p['No of STAs'] == element; })
                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Rate')), 'Rate'), function(element) {
                                    let commonRate = _.filter(commonStaNo, function(p) { return p['Rate'] == element; })
                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('SS')), 'SS'), function(element) {
                                        let commonSS = _.filter(commonRate, function(p) { return p['SS'] == element; })
                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('STA antenna')), 'STA antenna'), function(element) {
                                            let commonAntenna = _.filter(commonSS, function(p) { return p['STA antenna'] == element; })
                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Security')), 'Security'), function(element) {
                                                let commonSec = _.filter(commonAntenna, function(p) { return p['Security'] == element; })
                                                if (commonSec.length) {
                                                    testCompareObjects.push(commonSec);
                                                }
                                            })
                                        })
                                    })
                                })
                            })
                        })
                    })
                })
            })
        })

        _.each(testCompareObjects, function(val) {
            let maxUl = _.pluck(val, "UL-OFDMA");
            let maxSu = _.pluck(val, "SU");
            _.each(val, function(data) {
                if (_.contains(data, _.max(maxUl))) {
                    data["UL-OFDMA"] = [data["UL-OFDMA"], true];
                } else {
                    data["UL-OFDMA"] = [data["UL-OFDMA"], false];
                }

                if (_.contains(data, _.max(maxSu))) {
                    data.SU = [data.SU, true];
                } else {
                    data.SU = [data.SU, false];
                }
            })
        })
        return testCompareObjects;
    } catch (err) {
        logger.error("ofdmaUlMerge error : ", err);
    }
}


/* Function for smart merge of ofdma dl executions */
async function ofdmaDlMerge(executions) {
    try {
        let testCompareObjects = [];

        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Aggregation')), 'Aggregation'), function(element) {
            let commonAgg = _.filter(executions, function(p) { return p['Aggregation'] == element; })
            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Band')), 'Band'), function(element) {
                let commonBand = _.filter(commonAgg, function(p) { return p['Band'] == element; })
                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Bandwidth')), 'Bandwidth'), function(element) {
                    let commonBandwidth = _.filter(commonBand, function(p) { return p['Bandwidth'] == element; })
                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Channel')), 'Channel'), function(element) {
                        let commonChannel = _.filter(commonBandwidth, function(p) { return p['Channel'] == element; })
                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('GI')), 'GI'), function(element) {
                            let commonGI = _.filter(commonChannel, function(p) { return p['GI'] == element; })
                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('No of STAs')), 'No of STAs'), function(element) {
                                let commonStaNo = _.filter(commonGI, function(p) { return p['No of STAs'] == element; })
                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Rate')), 'Rate'), function(element) {
                                    let commonRate = _.filter(commonStaNo, function(p) { return p['Rate'] == element; })
                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('SS')), 'SS'), function(element) {
                                        let commonSS = _.filter(commonRate, function(p) { return p['SS'] == element; })
                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('STA antenna')), 'STA antenna'), function(element) {
                                            let commonAntenna = _.filter(commonSS, function(p) { return p['STA antenna'] == element; })
                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Security')), 'Security'), function(element) {
                                                let commonSec = _.filter(commonAntenna, function(p) { return p['Security'] == element; })
                                                if (commonSec.length) {
                                                    testCompareObjects.push(commonSec);
                                                }
                                            })
                                        })
                                    })
                                })
                            })
                        })
                    })
                })
            })
        })

        _.each(testCompareObjects, function(val) {
            let maxDl = _.pluck(val, "DL-OFDMA");
            let maxSu = _.pluck(val, "SU");
            _.each(val, function(data) {
                if (_.contains(data, _.max(maxDl))) {
                    data["DL-OFDMA"] = [data["DL-OFDMA"], true];
                } else {
                    data["DL-OFDMA"] = [data["DL-OFDMA"], false];
                }

                if (_.contains(data, _.max(maxSu))) {
                    data.SU = [data.SU, true];
                } else {
                    data.SU = [data.SU, false];
                }
            })
        })
        return testCompareObjects;
    } catch (err) {
        logger.error("ofdmaDlMerge error : ", err);
    }
}


/* Function for smart merge of coex rvr executions */
async function mergeCoexRvr(executions) {
    try {
        let testCompareObjects = [];

        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Aggregation')), 'Aggregation'), function(element) {
            let commonAgg = _.filter(executions, function(p) { return p['Aggregation'] == element; })
            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('BT Ref')), 'BT Ref'), function(element) {
                let commonBtRef = _.filter(commonAgg, function(p) { return p['BT Ref'] == element; })
                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('BT Sniff')), 'BT Sniff'), function(element) {
                    let commonBtsniff = _.filter(commonBtRef, function(p) { return p['BT Sniff'] == element; })
                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('BT profiles')), 'BT profiles'), function(element) {
                        let commonBtProf = _.filter(commonBtsniff, function(p) { return p['BT profiles'] == element; })
                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('BT/BLE Role')), 'BT/BLE Role'), function(element) {
                            let commonRole = _.filter(commonBtProf, function(p) { return p['BT/BLE Role'] == element; })
                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Channel | 2 GHz')), 'Channel | 2 GHz'), function(element) {
                                let commonChannel2 = _.filter(commonRole, function(p) { return p['Channel | 2 GHz'] == element; })
                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Channel | 5 GHz')), 'Channel | 5 GHz'), function(element) {
                                    let commonChannel5 = _.filter(commonChannel2, function(p) { return p['Channel | 5 GHz'] == element; })
                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Coex mode')), 'Coex mode'), function(element) {
                                        let commonMode = _.filter(commonChannel5, function(p) { return p['Coex mode'] == element; })
                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Companion Device/')), 'Companion Device/'), function(element) {
                                            let commonCompDev = _.filter(commonMode, function(p) { return p['Companion Device/'] == element; })
                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Connection param')), 'Connection param'), function(element) {
                                                let commonParam = _.filter(commonCompDev, function(p) { return p['Connection param'] == element; })
                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT')), 'DUT'), function(element) {
                                                    let commonDut = _.filter(commonParam, function(p) { return p['DUT'] == element; })
                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT Fw/Drv')), 'DUT Fw/Drv'), function(element) {
                                                        let commonDutDrv = _.filter(commonDut, function(p) { return p['DUT Fw/Drv'] == element; })
                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT Host Platform')), 'DUT Host Platform'), function(element) {
                                                            let commonDutPlt = _.filter(commonDutDrv, function(p) { return p['DUT Host Platform'] == element; })
                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT Mode')), 'DUT Mode'), function(element) {
                                                                let commonDutmode = _.filter(commonDutPlt, function(p) { return p['DUT Mode'] == element; })
                                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT OS')), 'DUT OS'), function(element) {
                                                                    let commonOs = _.filter(commonDutmode, function(p) { return p['DUT OS'] == element; })
                                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT Protocol')), 'DUT Protocol'), function(element) {
                                                                        let commonDutPtcl = _.filter(commonOs, function(p) { return p['DUT Protocol'] == element; })
                                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Data Rate')), 'Data Rate'), function(element) {
                                                                            let commonDataRate = _.filter(commonDutPtcl, function(p) { return p['Data Rate'] == element; })
                                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Guard Interval')), 'Guard Interval'), function(element) {
                                                                                let commonGI = _.filter(commonDataRate, function(p) { return p['Guard Interval'] == element; })
                                                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Interface')), 'Interface'), function(element) {
                                                                                    let commonIntf = _.filter(commonGI, function(p) { return p['Interface'] == element; })
                                                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Profile Param')), 'Profile Param'), function(element) {
                                                                                        let commonProfParam = _.filter(commonIntf, function(p) { return p['Profile Param'] == element; })
                                                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('SDIO Clock')), 'SDIO Clock'), function(element) {
                                                                                            let commonClock = _.filter(commonProfParam, function(p) { return p['SDIO Clock'] == element; })
                                                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Security')), 'Security'), function(element) {
                                                                                                let commonSecurity = _.filter(commonClock, function(p) { return p['Security'] == element; })
                                                                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('SoC TYPE')), 'SoC TYPE'), function(element) {
                                                                                                    let commonType = _.filter(commonSecurity, function(p) { return p['SoC TYPE'] == element; })
                                                                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('SoC Version')), 'SoC Version'), function(element) {
                                                                                                        let commonVer = _.filter(commonType, function(p) { return p['SoC Version'] == element; })
                                                                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Spatial Streams')), 'Spatial Streams'), function(element) {
                                                                                                            let commonSS = _.filter(commonVer, function(p) { return p['Spatial Streams'] == element; })
                                                                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('TP TYPE')), 'TP TYPE'), function(element) {
                                                                                                                let commonTpType = _.filter(commonSS, function(p) { return p['TP TYPE'] == element; })
                                                                                                                    // _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Test Repetition')), 'Test Repetition'), function(element) {
                                                                                                                    //     let commonRep = _.filter(commonTpType, function(p) { return p['Test Repetition'] == element; })
                                                                                                                if (commonTpType.length) {
                                                                                                                    testCompareObjects.push(commonTpType);
                                                                                                                }
                                                                                                                // })
                                                                                                            })
                                                                                                        })
                                                                                                    })
                                                                                                })
                                                                                            })
                                                                                        })
                                                                                    })
                                                                                })
                                                                            })
                                                                        })
                                                                    })
                                                                })
                                                            })
                                                        })
                                                    })
                                                })
                                            })
                                        })
                                    })
                                })
                            })
                        })
                    })
                })
            })
        })

        return testCompareObjects;
    } catch (err) {
        logger.error("mergeCoexRvr error : ", err);
    }
}


/* Function to update status true/false of max attentuation values for Coex Rvr Data */
async function updateStatusCoexRvr(smartMergeObj, attn) {
    try {
        // if (typeof obj[k]['value'] == "undefined") {
        let DataRSSI = [],
            BeaconRSSI = [],
            WiFiMCSRate = [],
            WiFiNoisefloor = [], //wifiRssi, WiFiNoisefloor
            BtRssi = [],
            coexTp = [],
            btPerf1 = [],
            btPerf2 = [];
        _.each(smartMergeObj, function(data) {
            _.each(attn, function(attnVal) {
                _.each(data, function(item) {
                    if (_.contains(Object.keys(item), attnVal.toString())) {
                        let obj = _.pluck(data, attnVal.toString());
                        obj = _.compact(obj);


                        if (typeof item['reportName'] === "undefined") {
                            if (typeof(obj[0].WiFiNoisefloor) === 'string') {
                                _.map(obj, function(i) {
                                    i.DataRSSI = { value: i.DataRSSI, status: null };
                                    i.BeaconRSSI = { value: i.BeaconRSSI, status: null };
                                    i.WiFiMCSRate = { value: i.WiFiMCSRate, status: null };

                                    i.WiFiNoisefloor = { value: i.WiFiNoisefloor, status: null };
                                    i.BTRSSI = { value: i.BTRSSI, status: null };
                                    i.WiFiCoexTP = { value: i.WiFiCoexTP, status: null };
                                    i["BTPerformanceResult#1"] = { value: i["BTPerformanceResult#1"], status: null };
                                    i["BTPerformanceResult#2"] = { value: i["BTPerformanceResult#2"], status: null };
                                    return i;
                                })
                            }
                        } else {
                            _.map(obj, function(i) {
                                if (typeof i.DataRSSI.value.value != "undefined") {
                                    //console.log("i -->", i.DataRSSI.value.value);
                                    i.DataRSSI = i.DataRSSI.value;
                                    i.BeaconRSSI = i.BeaconRSSI.value;
                                    i.WiFiMCSRate = i.WiFiMCSRate.value;

                                    i.WiFiNoisefloor = i.WiFiNoisefloor.value;
                                    i.BTRSSI = i.BTRSSI.value;
                                    i.WiFiCoexTP = i.WiFiCoexTP.value;
                                    i["BTPerformanceResult#1"] = i["BTPerformanceResult#1"].value;
                                    i["BTPerformanceResult#2"] = i["BTPerformanceResult#2"].value;
                                    return i;
                                }
                            })
                        }

                        for (let i = 0; i < obj.length; i++) {
                            if (typeof obj[i].DataRSSI.value.value !== "undefined") {
                                obj[i].DataRSSI = obj[i].DataRSSI.value;
                                obj[i].BeaconRSSI = obj[i].BeaconRSSI.value;
                                obj[i].WiFiMCSRate = obj[i].WiFiMCSRate.value;

                                obj[i].WiFiNoisefloor = obj[i].WiFiNoisefloor.value;
                                obj[i].BTRSSI = obj[i].BTRSSI.value;
                                obj[i].WiFiCoexTP = obj[i].WiFiCoexTP.value;
                                obj[i]["BTPerformanceResult#1"] = obj[i]["BTPerformanceResult#1"].value;
                                obj[i]["BTPerformanceResult#2"] = obj[i]["BTPerformanceResult#2"].value;
                            }
                        }

                        //console.log("obj -->", obj);

                        WiFiNoisefloor = _.pluck(obj, "WiFiNoisefloor");
                        WiFiNoisefloor = _.pluck(WiFiNoisefloor, "value").map(Number);

                        BtRssi = _.pluck(obj, "BTRSSI");
                        BtRssi = _.pluck(BtRssi, "value").map(Number);

                        DataRSSI = _.pluck(obj, "DataRSSI");
                        DataRSSI = _.pluck(DataRSSI, "value").map(Number);

                        BeaconRSSI = _.pluck(obj, "BeaconRSSI");
                        BeaconRSSI = _.pluck(BeaconRSSI, "value").map(Number);

                        WiFiMCSRate = _.pluck(obj, "WiFiMCSRate");
                        WiFiMCSRate = _.pluck(WiFiMCSRate, "value").map(Number);

                        coexTp = _.pluck(obj, "WiFiCoexTP");
                        coexTp = _.pluck(coexTp, "value").map(Number);

                        btPerf1 = _.pluck(obj, "BTPerformanceResult#1");
                        btPerf1 = _.pluck(btPerf1, "value").map(Number);

                        btPerf2 = _.pluck(obj, "BTPerformanceResult#2");
                        btPerf2 = _.pluck(btPerf2, "value").map(Number);

                        console.log("item[attnVal] -->", item[attnVal]);

                        if (item[attnVal]['DataRSSI'].value == _.max(DataRSSI)) {
                            item[attnVal]['DataRSSI'].status = true;
                        } else {
                            item[attnVal]['DataRSSI'].status = false;
                        }

                        if (item[attnVal]['BeaconRSSI'].value == _.max(BeaconRSSI)) {
                            item[attnVal]['BeaconRSSI'].status = true;
                        } else {
                            item[attnVal]['BeaconRSSI'].status = false;
                        }

                        if (item[attnVal]['WiFiMCSRate'].value == WiFiMCSRate) {
                            item[attnVal]['WiFiMCSRate'].status = true;
                        } else {
                            item[attnVal]['WiFiMCSRate'].status = false;
                        }

                        if (item[attnVal]['WiFiNoisefloor'].value == _.max(WiFiNoisefloor)) {
                            item[attnVal]['WiFiNoisefloor'].status = true;
                        } else {
                            item[attnVal]['WiFiNoisefloor'].status = false;
                        }

                        if (item[attnVal]['BTRSSI'].value == _.max(BtRssi)) {
                            item[attnVal]['BTRSSI'].status = true;
                        } else {
                            item[attnVal]['BTRSSI'].status = false;
                        }

                        if (item[attnVal]['WiFiCoexTP'].value == _.max(coexTp)) {
                            item[attnVal]['WiFiCoexTP'].status = true;
                        } else {
                            item[attnVal]['WiFiCoexTP'].status = false;
                        }

                        if (item[attnVal]['BTPerformanceResult#1'].value == _.max(btPerf1)) {
                            item[attnVal]['BTPerformanceResult#1'].status = true;
                        } else {
                            item[attnVal]['BTPerformanceResult#1'].status = false;
                        }

                        if (item[attnVal]['BTPerformanceResult#2'].value == _.max(btPerf2)) {
                            item[attnVal]['BTPerformanceResult#2'].status = true;
                        } else {
                            item[attnVal]['BTPerformanceResult#2'].status = false;
                        }
                    }
                })
            })
        })
        return smartMergeObj;
    } catch (err) {
        logger.error("updateStatusCoexRvr error : ", err);
    }
}


/* Function for smart merge of Simul-TP-3INTF executions */
async function merge3INTFData(executions) {
    try {
        let testCompareObjects = [];

        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Aggregation')), 'Aggregation'), function(element) {
            let commonAgg = _.filter(executions, function(p) { return p['Aggregation'] == element; })
            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Channel | INTF 1')), 'Channel | INTF 1'), function(element) {
                let commonIntf1 = _.filter(commonAgg, function(p) { return p['Channel | INTF 1'] == element; })
                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Channel | INTF 2')), 'Channel | INTF 2'), function(element) {
                    let commonIntf2 = _.filter(commonIntf1, function(p) { return p['Channel | INTF 2'] == element; })
                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Channel | INTF 3')), 'Channel | INTF 3'), function(element) {
                        let commonIntf3 = _.filter(commonIntf2, function(p) { return p['Channel | INTF 3'] == element; })
                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Connectivity Modes')), 'Connectivity Modes'), function(element) {
                            let commonModes = _.filter(commonIntf3, function(p) { return p['Connectivity Modes'] == element; })
                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT')), 'DUT'), function(element) {
                                let commonDut = _.filter(commonModes, function(p) { return p['DUT'] == element; })
                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT Fw/Drv')), 'DUT Fw/Drv'), function(element) {
                                    let commonDutDrv = _.filter(commonDut, function(p) { return p['DUT Fw/Drv'] == element; })
                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT Host Platform')), 'DUT Host Platform'), function(element) {
                                        let commonHost = _.filter(commonDutDrv, function(p) { return p['DUT Host Platform'] == element; })
                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Data Rate')), 'Data Rate'), function(element) {
                                            let commonRate = _.filter(commonHost, function(p) { return p['Data Rate'] == element; })
                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Guard_Interval ')), 'Guard_Interval '), function(element) {
                                                let commonGI = _.filter(commonRate, function(p) { return p['Guard_Interval '] == element; })
                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('INTF1 Configuration')), 'INTF1 Configuration'), function(element) {
                                                    let commonConfig1 = _.filter(commonGI, function(p) { return p['INTF1 Configuration'] == element; })
                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('INTF2 Configuration')), 'INTF2 Configuration'), function(element) {
                                                        let commonConfig2 = _.filter(commonConfig1, function(p) { return p['INTF2 Configuration'] == element; })
                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('INTF3 Configuration')), 'INTF3 Configuration'), function(element) {
                                                            let commonConfig3 = _.filter(commonConfig2, function(p) { return p['INTF3 Configuration'] == element; })
                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Interface')), 'Interface'), function(element) {
                                                                let commonInf = _.filter(commonConfig3, function(p) { return p['Interface'] == element; })
                                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('SDIO Clock')), 'SDIO Clock'), function(element) {
                                                                    let commonSdio = _.filter(commonInf, function(p) { return p['SDIO Clock'] == element; })
                                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Security')), 'Security'), function(element) {
                                                                        let commonSec = _.filter(commonSdio, function(p) { return p['Security'] == element; })
                                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('SoC TYPE')), 'SoC TYPE'), function(element) {
                                                                            let commonSoc = _.filter(commonSec, function(p) { return p['SoC TYPE'] == element; })
                                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('SoC Version')), 'SoC Version'), function(element) {
                                                                                let commonVer = _.filter(commonSoc, function(p) { return p['SoC Version'] == element; })
                                                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Spatial Streams')), 'Spatial Streams'), function(element) {
                                                                                    let commonSS = _.filter(commonVer, function(p) { return p['Spatial Streams'] == element; })
                                                                                    if (commonSS.length) {
                                                                                        testCompareObjects.push(commonSS);
                                                                                    }
                                                                                })
                                                                            })
                                                                        })
                                                                    })
                                                                })
                                                            })
                                                        })
                                                    })
                                                })
                                            })
                                        })
                                    })
                                })
                            })
                        })
                    })
                })
            })
        })

        return testCompareObjects;
    } catch (err) {
        logger.error("merge3INTFData error : ", err);
    }
}


/* Function to update status true/false of max attentuation values for Simul-TP-3INTF */
async function updateStatus3INTF(smartMergeObj) {
    try {
        let TCP_TXTXTX_INTF1 = [],
            TCP_TXTXTX_INTF2 = [],
            TCP_TXTXTX_INTF3 = [],

            TCP_TXTXRX_INTF1 = [],
            TCP_TXTXRX_INTF2 = [],
            TCP_TXTXRX_INTF3 = [],

            TCP_TXRXTX_INTF1 = [],
            TCP_TXRXTX_INTF2 = [],
            TCP_TXRXTX_INTF3 = [],

            TCP_TXRXRX_INTF1 = [],
            TCP_TXRXRX_INTF2 = [],
            TCP_TXRXRX_INTF3 = [],

            TCP_RXTXTX_INTF1 = [],
            TCP_RXTXTX_INTF2 = [],
            TCP_RXTXTX_INTF3 = [],

            TCP_RXTXRX_INTF1 = [],
            TCP_RXTXRX_INTF2 = [],
            TCP_RXTXRX_INTF3 = [],

            TCP_RXRXTX_INTF1 = [],
            TCP_RXRXTX_INTF2 = [],
            TCP_RXRXTX_INTF3 = [],

            TCP_RXRXRX_INTF1 = [],
            TCP_RXRXRX_INTF2 = [],
            TCP_RXRXRX_INTF3 = [],

            TCP_TXTXTX_INTF1_val = [],
            TCP_TXTXTX_INTF2_val = [],
            TCP_TXTXTX_INTF3_val = [],

            TCP_TXTXRX_INTF1_val = [],
            TCP_TXTXRX_INTF2_val = [],
            TCP_TXTXRX_INTF3_val = [],

            TCP_TXRXTX_INTF1_val = [],
            TCP_TXRXTX_INTF2_val = [],
            TCP_TXRXTX_INTF3_val = [],

            TCP_TXRXRX_INTF1_val = [],
            TCP_TXRXRX_INTF2_val = [],
            TCP_TXRXRX_INTF3_val = [],

            TCP_RXTXTX_INTF1_val = [],
            TCP_RXTXTX_INTF2_val = [],
            TCP_RXTXTX_INTF3_val = [],

            TCP_RXTXRX_INTF1_val = [],
            TCP_RXTXRX_INTF2_val = [],
            TCP_RXTXRX_INTF3_val = [],

            TCP_RXRXTX_INTF1_val = [],
            TCP_RXRXTX_INTF2_val = [],
            TCP_RXRXTX_INTF3_val = [],

            TCP_RXRXRX_INTF1_val = [],
            TCP_RXRXRX_INTF2_val = [],
            TCP_RXRXRX_INTF3_val = [];

        let UDP_TXTXTX_INTF1 = [],
            UDP_TXTXTX_INTF2 = [],
            UDP_TXTXTX_INTF3 = [],

            UDP_TXTXRX_INTF1 = [],
            UDP_TXTXRX_INTF2 = [],
            UDP_TXTXRX_INTF3 = [],

            UDP_TXRXTX_INTF1 = [],
            UDP_TXRXTX_INTF2 = [],
            UDP_TXRXTX_INTF3 = [],

            UDP_TXRXRX_INTF1 = [],
            UDP_TXRXRX_INTF2 = [],
            UDP_TXRXRX_INTF3 = [],

            UDP_RXTXTX_INTF1 = [],
            UDP_RXTXTX_INTF2 = [],
            UDP_RXTXTX_INTF3 = [],

            UDP_RXTXRX_INTF1 = [],
            UDP_RXTXRX_INTF2 = [],
            UDP_RXTXRX_INTF3 = [],

            UDP_RXRXTX_INTF1 = [],
            UDP_RXRXTX_INTF2 = [],
            UDP_RXRXTX_INTF3 = [],

            UDP_RXRXRX_INTF1 = [],
            UDP_RXRXRX_INTF2 = [],
            UDP_RXRXRX_INTF3 = [],

            UDP_TXTXTX_INTF1_val = [],
            UDP_TXTXTX_INTF2_val = [],
            UDP_TXTXTX_INTF3_val = [],

            UDP_TXTXRX_INTF1_val = [],
            UDP_TXTXRX_INTF2_val = [],
            UDP_TXTXRX_INTF3_val = [],

            UDP_TXRXTX_INTF1_val = [],
            UDP_TXRXTX_INTF2_val = [],
            UDP_TXRXTX_INTF3_val = [],

            UDP_TXRXRX_INTF1_val = [],
            UDP_TXRXRX_INTF2_val = [],
            UDP_TXRXRX_INTF3_val = [],

            UDP_RXTXTX_INTF1_val = [],
            UDP_RXTXTX_INTF2_val = [],
            UDP_RXTXTX_INTF3_val = [],

            UDP_RXTXRX_INTF1_val = [],
            UDP_RXTXRX_INTF2_val = [],
            UDP_RXTXRX_INTF3_val = [],

            UDP_RXRXTX_INTF1_val = [],
            UDP_RXRXTX_INTF2_val = [],
            UDP_RXRXTX_INTF3_val = [],

            UDP_RXRXRX_INTF1_val = [],
            UDP_RXRXRX_INTF2_val = [],
            UDP_RXRXRX_INTF3_val = [];


        for (var j = 0; j < smartMergeObj.length; j++) {
            innerArr = [];
            innerArr.push(smartMergeObj[j]);

            for (var i = 0; i < smartMergeObj[j].length; i++) {

                if (typeof smartMergeObj[j][i]["reportName"] != 'undefined') {

                } // Execution Report Compare IF BLOCK
                else {
                    if (typeof smartMergeObj[j][i]["TCP"] != 'undefined') {
                        //TxTxTx
                        if (typeof smartMergeObj[j][i]["TCP"]["TXTXTX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["TCP"]["TXTXTX"]["INTF1"] != 'undefined') {
                                TCP_TXTXTX_INTF1.push(smartMergeObj[j][i]["TCP"]["TXTXTX"]["INTF1"]);
                                TCP_TXTXTX_INTF1_val.push(TCP_TXTXTX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["TXTXTX"]["INTF2"] != 'undefined') {
                                TCP_TXTXTX_INTF2.push(smartMergeObj[j][i]["TCP"]["TXTXTX"]["INTF2"]);
                                TCP_TXTXTX_INTF2_val.push(TCP_TXTXTX_INTF2);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["TXTXTX"]["INTF3"] != 'undefined') {
                                TCP_TXTXTX_INTF3.push(smartMergeObj[j][i]["TCP"]["TXTXTX"]["INTF3"]);
                                TCP_TXTXTX_INTF3_val.push(TCP_TXTXTX_INTF3);
                            }
                        }
                        //TxTxRx		
                        if (typeof smartMergeObj[j][i]["TCP"]["TXTXRX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["TCP"]["TXTXRX"]["INTF1"] != 'undefined') {
                                TCP_TXTXRX_INTF1.push(smartMergeObj[j][i]["TCP"]["TXTXRX"]["INTF1"]);
                                TCP_TXTXRX_INTF1_val.push(TCP_TXTXRX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["TXTXRX"]["INTF2"] != 'undefined') {
                                TCP_TXTXRX_INTF2.push(smartMergeObj[j][i]["TCP"]["TXTXRX"]["INTF2"]);
                                TCP_TXTXRX_INTF2_val.push(TCP_TXTXRX_INTF2);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["TXTXRX"]["INTF3"] != 'undefined') {
                                TCP_TXTXRX_INTF3.push(smartMergeObj[j][i]["TCP"]["TXTXRX"]["INTF3"]);
                                TCP_TXTXRX_INTF3_val.push(TCP_TXTXRX_INTF3);
                            }
                        }
                        //TxRxTx				
                        if (typeof smartMergeObj[j][i]["TCP"]["TXRXTX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["TCP"]["TXRXTX"]["INTF1"] != 'undefined') {
                                TCP_TXRXTX_INTF1.push(smartMergeObj[j][i]["TCP"]["TXRXTX"]["INTF1"]);
                                TCP_TXRXTX_INTF1_val.push(TCP_TXRXTX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["TXRXTX"]["INTF2"] != 'undefined') {
                                TCP_TXRXTX_INTF2.push(smartMergeObj[j][i]["TCP"]["TXRXTX"]["INTF2"]);
                                TCP_TXRXTX_INTF2_val.push(TCP_TXRXTX_INTF2);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["TXRXTX"]["INTF3"] != 'undefined') {
                                TCP_TXRXTX_INTF3.push(smartMergeObj[j][i]["TCP"]["TXRXTX"]["INTF3"]);
                                TCP_TXRXTX_INTF3_val.push(TCP_TXRXTX_INTF3);
                            }
                        }
                        //TxRxRx				
                        if (typeof smartMergeObj[j][i]["TCP"]["TXRXRX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["TCP"]["TXRXRX"]["INTF1"] != 'undefined') {
                                TCP_TXRXRX_INTF1.push(smartMergeObj[j][i]["TCP"]["TXRXRX"]["INTF1"]);
                                TCP_TXRXRX_INTF1_val.push(TCP_TXRXRX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["TXRXRX"]["INTF2"] != 'undefined') {
                                TCP_TXRXRX_INTF2.push(smartMergeObj[j][i]["TCP"]["TXRXRX"]["INTF2"]);
                                TCP_TXRXRX_INTF2_val.push(TCP_TXRXRX_INTF2);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["TXRXRX"]["INTF3"] != 'undefined') {
                                TCP_TXRXRX_INTF3.push(smartMergeObj[j][i]["TCP"]["TXRXRX"]["INTF3"]);
                                TCP_TXRXRX_INTF3_val.push(TCP_TXRXRX_INTF3);
                            }
                        }
                        //RxTxTx				
                        if (typeof smartMergeObj[j][i]["TCP"]["RXTXTX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["TCP"]["RXTXTX"]["INTF1"] != 'undefined') {
                                TCP_RXTXTX_INTF1.push(smartMergeObj[j][i]["TCP"]["RXTXTX"]["INTF1"]);
                                TCP_RXTXTX_INTF1_val.push(TCP_RXTXTX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["RXTXTX"]["INTF2"] != 'undefined') {
                                TCP_RXTXTX_INTF2.push(smartMergeObj[j][i]["TCP"]["RXTXTX"]["INTF2"]);
                                TCP_RXTXTX_INTF2_val.push(TCP_RXTXTX_INTF2);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["RXTXTX"]["INTF3"] != 'undefined') {
                                TCP_RXTXTX_INTF3.push(smartMergeObj[j][i]["TCP"]["RXTXTX"]["INTF3"]);
                                TCP_RXTXTX_INTF3_val.push(TCP_RXTXTX_INTF3);
                            }
                        }
                        //RxTxRx				
                        if (typeof smartMergeObj[j][i]["TCP"]["RXTXRX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["TCP"]["RXTXRX"]["INTF1"] != 'undefined') {
                                TCP_RXTXRX_INTF1.push(smartMergeObj[j][i]["TCP"]["RXTXRX"]["INTF1"]);
                                TCP_RXTXRX_INTF1_val.push(TCP_RXTXRX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["RXTXRX"]["INTF2"] != 'undefined') {
                                TCP_RXTXRX_INTF2.push(smartMergeObj[j][i]["TCP"]["RXTXRX"]["INTF2"]);
                                TCP_RXTXRX_INTF2_val.push(TCP_RXTXRX_INTF2);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["RXTXRX"]["INTF3"] != 'undefined') {
                                TCP_RXTXRX_INTF3.push(smartMergeObj[j][i]["TCP"]["RXTXRX"]["INTF3"]);
                                TCP_RXTXRX_INTF3_val.push(TCP_RXTXRX_INTF3);
                            }
                        }
                        //RxRxTx				
                        if (typeof smartMergeObj[j][i]["TCP"]["RXRXTX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["TCP"]["RXRXTX"]["INTF1"] != 'undefined') {
                                TCP_RXRXTX_INTF1.push(smartMergeObj[j][i]["TCP"]["RXRXTX"]["INTF1"]);
                                TCP_RXRXTX_INTF1_val.push(TCP_RXRXTX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["RXRXTX"]["INTF2"] != 'undefined') {
                                TCP_RXRXTX_INTF2.push(smartMergeObj[j][i]["TCP"]["RXRXTX"]["INTF2"]);
                                TCP_RXRXTX_INTF2_val.push(TCP_RXRXTX_INTF2);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["RXRXTX"]["INTF3"] != 'undefined') {
                                TCP_RXRXTX_INTF3.push(smartMergeObj[j][i]["TCP"]["RXRXTX"]["INTF3"]);
                                TCP_RXRXTX_INTF3_val.push(TCP_RXRXTX_INTF3);
                            }
                        }
                        //RxRxRx				
                        if (typeof smartMergeObj[j][i]["TCP"]["RXRXRX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["TCP"]["RXRXRX"]["INTF1"] != 'undefined') {
                                TCP_RXRXRX_INTF1.push(smartMergeObj[j][i]["TCP"]["RXRXRX"]["INTF1"]);
                                TCP_RXRXRX_INTF1_val.push(TCP_RXRXRX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["RXRXRX"]["INTF2"] != 'undefined') {
                                TCP_RXRXRX_INTF2.push(smartMergeObj[j][i]["TCP"]["RXRXRX"]["INTF2"]);
                                TCP_RXRXRX_INTF2_val.push(TCP_RXRXRX_INTF2);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["RXRXRX"]["INTF3"] != 'undefined') {
                                TCP_RXRXRX_INTF3.push(smartMergeObj[j][i]["TCP"]["RXRXRX"]["INTF3"]);
                                TCP_RXRXRX_INTF3_val.push(TCP_RXRXRX_INTF3);
                            }
                        }
                    }

                    if (typeof smartMergeObj[j][i]["UDP"] != 'undefined') {
                        //TXTXTX
                        if (typeof smartMergeObj[j][i]["UDP"]["TXTXTX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["UDP"]["TXTXTX"]["INTF1"] != 'undefined') {
                                UDP_TXTXTX_INTF1.push(smartMergeObj[j][i]["UDP"]["TXTXTX"]["INTF1"]);
                                UDP_TXTXTX_INTF1_val.push(UDP_TXTXTX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["TXTXTX"]["INTF2"] != 'undefined') {
                                UDP_TXTXTX_INTF2.push(smartMergeObj[j][i]["UDP"]["TXTXTX"]["INTF2"]);
                                UDP_TXTXTX_INTF2_val.push(UDP_TXTXTX_INTF2);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["TXTXTX"]["INTF3"] != 'undefined') {
                                UDP_TXTXTX_INTF3.push(smartMergeObj[j][i]["UDP"]["TXTXTX"]["INTF3"]);
                                UDP_TXTXTX_INTF3_val.push(UDP_TXTXTX_INTF3);
                            }
                        }
                        //TXTXRX		
                        if (typeof smartMergeObj[j][i]["UDP"]["TXTXRX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["UDP"]["TXTXRX"]["INTF1"] != 'undefined') {
                                UDP_TXTXRX_INTF1.push(smartMergeObj[j][i]["UDP"]["TXTXRX"]["INTF1"]);
                                UDP_TXTXRX_INTF1_val.push(UDP_TXTXRX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["TXTXRX"]["INTF2"] != 'undefined') {
                                UDP_TXTXRX_INTF2.push(smartMergeObj[j][i]["UDP"]["TXTXRX"]["INTF2"]);
                                UDP_TXTXRX_INTF2_val.push(UDP_TXTXRX_INTF2);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["TXTXRX"]["INTF3"] != 'undefined') {
                                UDP_TXTXRX_INTF3.push(smartMergeObj[j][i]["UDP"]["TXTXRX"]["INTF3"]);
                                UDP_TXTXRX_INTF3_val.push(UDP_TXTXRX_INTF3);
                            }
                        }
                        //TxRxTx				
                        if (typeof smartMergeObj[j][i]["UDP"]["TXRXTX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["UDP"]["TXRXTX"]["INTF1"] != 'undefined') {
                                UDP_TXRXTX_INTF1.push(smartMergeObj[j][i]["UDP"]["TXRXTX"]["INTF1"]);
                                UDP_TXRXTX_INTF1_val.push(UDP_TXRXTX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["TXRXTX"]["INTF2"] != 'undefined') {
                                UDP_TXRXTX_INTF2.push(smartMergeObj[j][i]["UDP"]["TXRXTX"]["INTF2"]);
                                UDP_TXRXTX_INTF2_val.push(UDP_TXRXTX_INTF2);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["TXRXTX"]["INTF3"] != 'undefined') {
                                UDP_TXRXTX_INTF3.push(smartMergeObj[j][i]["UDP"]["TXRXTX"]["INTF3"]);
                                UDP_TXRXTX_INTF3_val.push(UDP_TXRXTX_INTF3);
                            }
                        }
                        //TxRxRx				
                        if (typeof smartMergeObj[j][i]["UDP"]["TXRXRX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["UDP"]["TXRXRX"]["INTF1"] != 'undefined') {
                                UDP_TXRXRX_INTF1.push(smartMergeObj[j][i]["UDP"]["TXRXRX"]["INTF1"]);
                                UDP_TXRXRX_INTF1_val.push(UDP_TXRXRX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["TXRXRX"]["INTF2"] != 'undefined') {
                                UDP_TXRXRX_INTF2.push(smartMergeObj[j][i]["UDP"]["TXRXRX"]["INTF2"]);
                                UDP_TXRXRX_INTF2_val.push(UDP_TXRXRX_INTF2);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["TXRXRX"]["INTF3"] != 'undefined') {
                                UDP_TXRXRX_INTF3.push(smartMergeObj[j][i]["UDP"]["TXRXRX"]["INTF3"]);
                                UDP_TXRXRX_INTF3_val.push(UDP_TXRXRX_INTF3);
                            }
                        }
                        //RxTxTx				
                        if (typeof smartMergeObj[j][i]["UDP"]["RXTXTX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["UDP"]["RXTXTX"]["INTF1"] != 'undefined') {
                                UDP_RXTXTX_INTF1.push(smartMergeObj[j][i]["UDP"]["RXTXTX"]["INTF1"]);
                                UDP_RXTXTX_INTF1_val.push(UDP_RXTXTX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["RXTXTX"]["INTF2"] != 'undefined') {
                                UDP_RXTXTX_INTF2.push(smartMergeObj[j][i]["UDP"]["RXTXTX"]["INTF2"]);
                                UDP_RXTXTX_INTF2_val.push(UDP_RXTXTX_INTF2);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["RXTXTX"]["INTF3"] != 'undefined') {
                                UDP_RXTXTX_INTF3.push(smartMergeObj[j][i]["UDP"]["RXTXTX"]["INTF3"]);
                                UDP_RXTXTX_INTF3_val.push(UDP_RXTXTX_INTF3);
                            }
                        }
                        //RxTxRx				
                        if (typeof smartMergeObj[j][i]["UDP"]["RXTXRX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["UDP"]["RXTXRX"]["INTF1"] != 'undefined') {
                                UDP_RXTXRX_INTF1.push(smartMergeObj[j][i]["UDP"]["RXTXRX"]["INTF1"]);
                                UDP_RXTXRX_INTF1_val.push(UDP_RXTXRX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["RXTXRX"]["INTF2"] != 'undefined') {
                                UDP_RXTXRX_INTF2.push(smartMergeObj[j][i]["UDP"]["RXTXRX"]["INTF2"]);
                                UDP_RXTXRX_INTF2_val.push(UDP_RXTXRX_INTF2);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["RXTXRX"]["INTF3"] != 'undefined') {
                                UDP_RXTXRX_INTF3.push(smartMergeObj[j][i]["UDP"]["RXTXRX"]["INTF3"]);
                                UDP_RXTXRX_INTF3_val.push(UDP_RXTXRX_INTF3);
                            }
                        }
                        //RxRxTx				
                        if (typeof smartMergeObj[j][i]["UDP"]["RXRXTX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["UDP"]["RXRXTX"]["INTF1"] != 'undefined') {
                                UDP_RXRXTX_INTF1.push(smartMergeObj[j][i]["UDP"]["RXRXTX"]["INTF1"]);
                                UDP_RXRXTX_INTF1_val.push(UDP_RXRXTX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["RXRXTX"]["INTF2"] != 'undefined') {
                                UDP_RXRXTX_INTF2.push(smartMergeObj[j][i]["UDP"]["RXRXTX"]["INTF2"]);
                                UDP_RXRXTX_INTF2_val.push(UDP_RXRXTX_INTF2);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["RXRXTX"]["INTF3"] != 'undefined') {
                                UDP_RXRXTX_INTF3.push(smartMergeObj[j][i]["UDP"]["RXRXTX"]["INTF3"]);
                                UDP_RXRXTX_INTF3_val.push(UDP_RXRXTX_INTF3);
                            }
                        }
                        //RxRxRx				
                        if (typeof smartMergeObj[j][i]["UDP"]["RXRXRX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["UDP"]["RXRXRX"]["INTF1"] != 'undefined') {
                                UDP_RXRXRX_INTF1.push(smartMergeObj[j][i]["UDP"]["RXRXRX"]["INTF1"]);
                                UDP_RXRXRX_INTF1_val.push(UDP_RXRXRX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["RXRXRX"]["INTF2"] != 'undefined') {
                                UDP_RXRXRX_INTF2.push(smartMergeObj[j][i]["UDP"]["RXRXRX"]["INTF2"]);
                                UDP_RXRXRX_INTF2_val.push(UDP_RXRXRX_INTF2);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["RXRXRX"]["INTF3"] != 'undefined') {
                                UDP_RXRXRX_INTF3.push(smartMergeObj[j][i]["UDP"]["RXRXRX"]["INTF3"]);
                                UDP_RXRXRX_INTF3_val.push(UDP_RXRXRX_INTF3);
                            }
                        }
                    }

                }

                TCP_TXTXTX_INTF1 = [];
                TCP_TXTXTX_INTF2 = [];
                TCP_TXTXTX_INTF3 = [];
                TCP_TXTXRX_INTF1 = [];
                TCP_TXTXRX_INTF2 = [];
                TCP_TXTXRX_INTF3 = [];
                TCP_TXRXTX_INTF1 = [];
                TCP_TXRXTX_INTF2 = [];
                TCP_TXRXTX_INTF3 = [];
                TCP_TXRXRX_INTF1 = [];
                TCP_TXRXRX_INTF2 = [];
                TCP_TXRXRX_INTF3 = [];
                TCP_RXTXTX_INTF1 = [];
                TCP_RXTXTX_INTF2 = [];
                TCP_RXTXTX_INTF3 = [];
                TCP_RXTXRX_INTF1 = [];
                TCP_RXTXRX_INTF2 = [];
                TCP_RXTXRX_INTF3 = [];
                TCP_RXRXTX_INTF1 = [];
                TCP_RXRXTX_INTF2 = [];
                TCP_RXRXTX_INTF3 = [];
                TCP_RXRXRX_INTF1 = [];
                TCP_RXRXRX_INTF2 = [];
                TCP_RXRXRX_INTF3 = [];

                UDP_TXTXTX_INTF1 = [];
                UDP_TXTXTX_INTF2 = [];
                UDP_TXTXTX_INTF3 = [];
                UDP_TXTXRX_INTF1 = [];
                UDP_TXTXRX_INTF2 = [];
                UDP_TXTXRX_INTF3 = [];
                UDP_TXRXTX_INTF1 = [];
                UDP_TXRXTX_INTF2 = [];
                UDP_TXRXTX_INTF3 = [];
                UDP_TXRXRX_INTF1 = [];
                UDP_TXRXRX_INTF2 = [];
                UDP_TXRXRX_INTF3 = [];
                UDP_RXTXTX_INTF1 = [];
                UDP_RXTXTX_INTF2 = [];
                UDP_RXTXTX_INTF3 = [];
                UDP_RXTXRX_INTF1 = [];
                UDP_RXTXRX_INTF2 = [];
                UDP_RXTXRX_INTF3 = [];
                UDP_RXRXTX_INTF1 = [];
                UDP_RXRXTX_INTF2 = [];
                UDP_RXRXTX_INTF3 = [];
                UDP_RXRXRX_INTF1 = [];
                UDP_RXRXRX_INTF2 = [];
                UDP_RXRXRX_INTF3 = [];

            }

            //console.log("Check ->", TCP_TXTX_INTF1_val);

            let TCP_TXTXTX_INTF1_val_MAX = await getMaxValInArr(TCP_TXTXTX_INTF1_val);
            let TCP_TXTXTX_INTF2_val_MAX = await getMaxValInArr(TCP_TXTXTX_INTF2_val);
            let TCP_TXTXTX_INTF3_val_MAX = await getMaxValInArr(TCP_TXTXTX_INTF3_val);
            let TCP_TXTXRX_INTF1_val_MAX = await getMaxValInArr(TCP_TXTXRX_INTF1_val);
            let TCP_TXTXRX_INTF2_val_MAX = await getMaxValInArr(TCP_TXTXRX_INTF2_val);
            let TCP_TXTXRX_INTF3_val_MAX = await getMaxValInArr(TCP_TXTXRX_INTF3_val);
            let TCP_TXRXTX_INTF1_val_MAX = await getMaxValInArr(TCP_TXRXTX_INTF1_val);
            let TCP_TXRXTX_INTF2_val_MAX = await getMaxValInArr(TCP_TXRXTX_INTF2_val);
            let TCP_TXRXTX_INTF3_val_MAX = await getMaxValInArr(TCP_TXRXTX_INTF3_val);
            let TCP_TXRXRX_INTF1_val_MAX = await getMaxValInArr(TCP_TXRXRX_INTF1_val);
            let TCP_TXRXRX_INTF2_val_MAX = await getMaxValInArr(TCP_TXRXRX_INTF2_val);
            let TCP_TXRXRX_INTF3_val_MAX = await getMaxValInArr(TCP_TXRXRX_INTF3_val);
            let TCP_RXTXTX_INTF1_val_MAX = await getMaxValInArr(TCP_RXTXTX_INTF1_val);
            let TCP_RXTXTX_INTF2_val_MAX = await getMaxValInArr(TCP_RXTXTX_INTF2_val);
            let TCP_RXTXTX_INTF3_val_MAX = await getMaxValInArr(TCP_RXTXTX_INTF3_val);
            let TCP_RXTXRX_INTF1_val_MAX = await getMaxValInArr(TCP_RXTXRX_INTF1_val);
            let TCP_RXTXRX_INTF2_val_MAX = await getMaxValInArr(TCP_RXTXRX_INTF2_val);
            let TCP_RXTXRX_INTF3_val_MAX = await getMaxValInArr(TCP_RXTXRX_INTF3_val);
            let TCP_RXRXTX_INTF1_val_MAX = await getMaxValInArr(TCP_RXRXTX_INTF1_val);
            let TCP_RXRXTX_INTF2_val_MAX = await getMaxValInArr(TCP_RXRXTX_INTF2_val);
            let TCP_RXRXTX_INTF3_val_MAX = await getMaxValInArr(TCP_RXRXTX_INTF3_val);
            let TCP_RXRXRX_INTF1_val_MAX = await getMaxValInArr(TCP_RXRXRX_INTF1_val);
            let TCP_RXRXRX_INTF2_val_MAX = await getMaxValInArr(TCP_RXRXRX_INTF2_val);
            let TCP_RXRXRX_INTF3_val_MAX = await getMaxValInArr(TCP_RXRXRX_INTF3_val);

            let UDP_TXTXTX_INTF1_val_MAX = await getMaxValInArr(UDP_TXTXTX_INTF1_val);
            let UDP_TXTXTX_INTF2_val_MAX = await getMaxValInArr(UDP_TXTXTX_INTF2_val);
            let UDP_TXTXTX_INTF3_val_MAX = await getMaxValInArr(UDP_TXTXTX_INTF3_val);
            let UDP_TXTXRX_INTF1_val_MAX = await getMaxValInArr(UDP_TXTXRX_INTF1_val);
            let UDP_TXTXRX_INTF2_val_MAX = await getMaxValInArr(UDP_TXTXRX_INTF2_val);
            let UDP_TXTXRX_INTF3_val_MAX = await getMaxValInArr(UDP_TXTXRX_INTF3_val);
            let UDP_TXRXTX_INTF1_val_MAX = await getMaxValInArr(UDP_TXRXTX_INTF1_val);
            let UDP_TXRXTX_INTF2_val_MAX = await getMaxValInArr(UDP_TXRXTX_INTF2_val);
            let UDP_TXRXTX_INTF3_val_MAX = await getMaxValInArr(UDP_TXRXTX_INTF3_val);
            let UDP_TXRXRX_INTF1_val_MAX = await getMaxValInArr(UDP_TXRXRX_INTF1_val);
            let UDP_TXRXRX_INTF2_val_MAX = await getMaxValInArr(UDP_TXRXRX_INTF2_val);
            let UDP_TXRXRX_INTF3_val_MAX = await getMaxValInArr(UDP_TXRXRX_INTF3_val);
            let UDP_RXTXTX_INTF1_val_MAX = await getMaxValInArr(UDP_RXTXTX_INTF1_val);
            let UDP_RXTXTX_INTF2_val_MAX = await getMaxValInArr(UDP_RXTXTX_INTF2_val);
            let UDP_RXTXTX_INTF3_val_MAX = await getMaxValInArr(UDP_RXTXTX_INTF3_val);
            let UDP_RXTXRX_INTF1_val_MAX = await getMaxValInArr(UDP_RXTXRX_INTF1_val);
            let UDP_RXTXRX_INTF2_val_MAX = await getMaxValInArr(UDP_RXTXRX_INTF2_val);
            let UDP_RXTXRX_INTF3_val_MAX = await getMaxValInArr(UDP_RXTXRX_INTF3_val);
            let UDP_RXRXTX_INTF1_val_MAX = await getMaxValInArr(UDP_RXRXTX_INTF1_val);
            let UDP_RXRXTX_INTF2_val_MAX = await getMaxValInArr(UDP_RXRXTX_INTF2_val);
            let UDP_RXRXTX_INTF3_val_MAX = await getMaxValInArr(UDP_RXRXTX_INTF3_val);
            let UDP_RXRXRX_INTF1_val_MAX = await getMaxValInArr(UDP_RXRXRX_INTF1_val);
            let UDP_RXRXRX_INTF2_val_MAX = await getMaxValInArr(UDP_RXRXRX_INTF2_val);
            let UDP_RXRXRX_INTF3_val_MAX = await getMaxValInArr(UDP_RXRXRX_INTF3_val);

            TCP_TXTXTX_INTF1_val = [];
            TCP_TXTXTX_INTF2_val = [];
            TCP_TXTXTX_INTF3_val = [];
            TCP_TXTXRX_INTF1_val = [];
            TCP_TXTXRX_INTF2_val = [];
            TCP_TXTXRX_INTF3_val = [];
            TCP_TXRXTX_INTF1_val = [];
            TCP_TXRXTX_INTF2_val = [];
            TCP_TXRXTX_INTF3_val = [];
            TCP_TXRXRX_INTF1_val = [];
            TCP_TXRXRX_INTF2_val = [];
            TCP_TXRXRX_INTF3_val = [];
            TCP_RXTXTX_INTF1_val = [];
            TCP_RXTXTX_INTF2_val = [];
            TCP_RXTXTX_INTF3_val = [];
            TCP_RXTXRX_INTF1_val = [];
            TCP_RXTXRX_INTF2_val = [];
            TCP_RXTXRX_INTF3_val = [];
            TCP_RXRXTX_INTF1_val = [];
            TCP_RXRXTX_INTF2_val = [];
            TCP_RXRXTX_INTF3_val = [];
            TCP_RXRXRX_INTF1_val = [];
            TCP_RXRXRX_INTF2_val = [];
            TCP_RXRXRX_INTF3_val = [];

            UDP_TXTXTX_INTF1_val = [];
            UDP_TXTXTX_INTF2_val = [];
            UDP_TXTXTX_INTF3_val = [];
            UDP_TXTXRX_INTF1_val = [];
            UDP_TXTXRX_INTF2_val = [];
            UDP_TXTXRX_INTF3_val = [];
            UDP_TXRXTX_INTF1_val = [];
            UDP_TXRXTX_INTF2_val = [];
            UDP_TXRXTX_INTF3_val = [];
            UDP_TXRXRX_INTF1_val = [];
            UDP_TXRXRX_INTF2_val = [];
            UDP_TXRXRX_INTF3_val = [];
            UDP_RXTXTX_INTF1_val = [];
            UDP_RXTXTX_INTF2_val = [];
            UDP_RXTXTX_INTF3_val = [];
            UDP_RXTXRX_INTF1_val = [];
            UDP_RXTXRX_INTF2_val = [];
            UDP_RXTXRX_INTF3_val = [];
            UDP_RXRXTX_INTF1_val = [];
            UDP_RXRXTX_INTF2_val = [];
            UDP_RXRXTX_INTF3_val = [];
            UDP_RXRXRX_INTF1_val = [];
            UDP_RXRXRX_INTF2_val = [];
            UDP_RXRXRX_INTF3_val = [];

            // Status Changes loop
            for (var k = 0; k < innerArr.length; k++) {
                for (var p = 0; p < innerArr[k].length; p++) {

                    if (typeof innerArr[k][p]["reportName"] != 'undefined') {
                        if (typeof innerArr[k][p]["TCP"] != 'undefined') {
                            //TxTxTx
                            if (typeof innerArr[k][p]["TCP"]["TXTXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["TXTXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["TXTXTX"]["INTF1"]["value"] == TCP_TXTXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["TXTXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXTXTX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["TXTXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXTXTX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["TXTXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["TXTXTX"]["INTF2"]["value"] == TCP_TXTXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["TXTXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXTXTX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["TXTXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXTXTX"]["INTF2"]["value"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["TXTXTX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["TXTXTX"]["INTF3"]["value"] == TCP_TXTXTX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["TXTXTX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["TXTXTX"]["INTF3"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["TXTXTX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["TXTXTX"]["INTF3"]["value"], "status": false };
                                        }
                                    }
                                }
                            }
                            //TxTxRx
                            if (typeof innerArr[k][p]["TCP"]["TXTXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["TXTXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["TXTXRX"]["INTF1"]["value"] == TCP_TXTXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["TXTXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXTXRX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["TXTXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXTXRX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["TXTXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["TXTXRX"]["INTF2"]["value"] == TCP_TXTXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["TXTXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXTXRX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["TXTXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXTXRX"]["INTF2"]["value"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["TXTXRX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["TXTXRX"]["INTF3"]["value"] == TCP_TXTXRX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["TXTXRX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["TXTXRX"]["INTF3"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["TXTXRX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["TXTXRX"]["INTF3"]["value"], "status": false };
                                        }
                                    }
                                }
                            }
                            //TxRxTx
                            if (typeof innerArr[k][p]["TCP"]["TXRXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["TXRXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["TXRXTX"]["INTF1"]["value"] == TCP_TXRXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["TXRXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXRXTX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["TXRXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXRXTX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["TXRXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["TXRXTX"]["INTF2"]["value"] == TCP_TXRXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["TXRXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXRXTX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["TXRXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXRXTX"]["INTF2"]["value"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["TXRXTX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["TXRXTX"]["INTF3"]["value"] == TCP_TXRXTX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["TXRXTX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["TXRXTX"]["INTF3"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["TXRXTX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["TXRXTX"]["INTF3"]["value"], "status": false };
                                        }
                                    }
                                }
                            }
                            //TxRxRx
                            if (typeof innerArr[k][p]["TCP"]["TXRXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["TXRXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["TXRXRX"]["INTF1"]["value"] == TCP_TXRXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["TXRXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXRXRX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["TXRXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXRXRX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["TXRXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["TXRXRX"]["INTF2"]["value"] == TCP_TXRXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["TXRXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXRXRX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["TXRXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXRXRX"]["INTF2"]["value"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["TXRXRX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["TXRXRX"]["INTF3"]["value"] == TCP_TXRXRX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["TXRXRX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["TXRXRX"]["INTF3"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["TXRXRX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["TXRXRX"]["INTF3"]["value"], "status": false };
                                        }
                                    }
                                }
                            }
                            //RxTxTx
                            if (typeof innerArr[k][p]["TCP"]["RXTXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["RXTXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["RXTXTX"]["INTF1"]["value"] == TCP_RXTXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["RXTXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXTXTX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["RXTXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXTXTX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["RXTXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["RXTXTX"]["INTF2"]["value"] == TCP_RXTXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["RXTXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXTXTX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["RXTXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXTXTX"]["INTF2"]["value"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["RXTXTX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["RXTXTX"]["INTF3"]["value"] == TCP_RXTXTX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["RXTXTX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["RXTXTX"]["INTF3"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["RXTXTX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["RXTXTX"]["INTF3"]["value"], "status": false };
                                        }
                                    }
                                }
                            }
                            //RxTxRx
                            if (typeof innerArr[k][p]["TCP"]["RXTXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["RXTXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["RXTXRX"]["INTF1"]["value"] == TCP_RXTXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["RXTXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXTXRX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["RXTXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXTXRX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["RXTXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["RXTXRX"]["INTF2"]["value"] == TCP_RXTXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["RXTXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXTXRX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["RXTXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXTXRX"]["INTF2"]["value"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["RXTXRX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["RXTXRX"]["INTF3"]["value"] == TCP_RXTXRX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["RXTXRX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["RXTXRX"]["INTF3"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["RXTXRX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["RXTXRX"]["INTF3"]["value"], "status": false };
                                        }
                                    }
                                }
                            }
                            //RxRxTx
                            if (typeof innerArr[k][p]["TCP"]["RXRXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["RXRXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["RXRXTX"]["INTF1"]["value"] == TCP_RXRXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["RXRXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXRXTX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["RXRXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXRXTX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["RXRXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["RXRXTX"]["INTF2"]["value"] == TCP_RXRXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["RXRXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXRXTX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["RXRXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXRXTX"]["INTF2"]["value"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["RXRXTX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["RXRXTX"]["INTF3"]["value"] == TCP_RXRXTX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["RXRXTX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["RXRXTX"]["INTF3"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["RXRXTX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["RXRXTX"]["INTF3"]["value"], "status": false };
                                        }
                                    }
                                }
                            }
                            //RxRxRx
                            if (typeof innerArr[k][p]["TCP"]["RXRXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["RXRXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["RXRXRX"]["INTF1"]["value"] == TCP_RXRXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["RXRXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXRXRX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["RXRXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXRXRX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["RXRXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["RXRXRX"]["INTF2"]["value"] == TCP_RXRXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["RXRXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXRXRX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["RXRXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXRXRX"]["INTF2"]["value"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["RXRXRX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["RXRXRX"]["INTF3"]["value"] == TCP_RXRXRX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["RXRXRX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["RXRXRX"]["INTF3"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["RXRXRX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["RXRXRX"]["INTF3"]["value"], "status": false };
                                        }
                                    }
                                }
                            }

                        } // END TCP

                        if (typeof innerArr[k][p]["UDP"] != 'undefined') {
                            //TxTxTx
                            if (typeof innerArr[k][p]["UDP"]["TXTXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["TXTXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["TXTXTX"]["INTF1"]["value"] == UDP_TXTXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["TXTXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXTXTX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["TXTXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXTXTX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["TXTXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["TXTXTX"]["INTF2"]["value"] == UDP_TXTXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["TXTXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXTXTX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["TXTXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXTXTX"]["INTF2"]["value"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["TXTXTX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["TXTXTX"]["INTF3"]["value"] == UDP_TXTXTX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["TXTXTX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["TXTXTX"]["INTF3"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["TXTXTX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["TXTXTX"]["INTF3"]["value"], "status": false };
                                        }
                                    }
                                }
                            }
                            //TxTxRx
                            if (typeof innerArr[k][p]["UDP"]["TXTXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["TXTXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["TXTXRX"]["INTF1"]["value"] == UDP_TXTXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["TXTXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXTXRX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["TXTXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXTXRX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["TXTXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["TXTXRX"]["INTF2"]["value"] == UDP_TXTXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["TXTXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXTXRX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["TXTXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXTXRX"]["INTF2"]["value"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["TXTXRX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["TXTXRX"]["INTF3"]["value"] == UDP_TXTXRX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["TXTXRX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["TXTXRX"]["INTF3"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["TXTXRX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["TXTXRX"]["INTF3"]["value"], "status": false };
                                        }
                                    }
                                }
                            }
                            //TxRxTx
                            if (typeof innerArr[k][p]["UDP"]["TXRXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["TXRXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["TXRXTX"]["INTF1"]["value"] == UDP_TXRXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["TXRXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXRXTX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["TXRXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXRXTX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["TXRXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["TXRXTX"]["INTF2"]["value"] == UDP_TXRXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["TXRXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXRXTX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["TXRXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXRXTX"]["INTF2"]["value"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["TXRXTX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["TXRXTX"]["INTF3"]["value"] == UDP_TXRXTX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["TXRXTX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["TXRXTX"]["INTF3"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["TXRXTX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["TXRXTX"]["INTF3"]["value"], "status": false };
                                        }
                                    }
                                }
                            }
                            //TxRxRx
                            if (typeof innerArr[k][p]["UDP"]["TXRXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["TXRXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["TXRXRX"]["INTF1"]["value"] == UDP_TXRXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["TXRXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXRXRX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["TXRXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXRXRX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["TXRXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["TXRXRX"]["INTF2"]["value"] == UDP_TXRXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["TXRXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXRXRX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["TXRXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXRXRX"]["INTF2"]["value"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["TXRXRX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["TXRXRX"]["INTF3"]["value"] == UDP_TXRXRX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["TXRXRX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["TXRXRX"]["INTF3"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["TXRXRX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["TXRXRX"]["INTF3"]["value"], "status": false };
                                        }
                                    }
                                }
                            }
                            //RxTxTx
                            if (typeof innerArr[k][p]["UDP"]["RXTXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["RXTXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["RXTXTX"]["INTF1"]["value"] == UDP_RXTXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["RXTXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXTXTX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["RXTXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXTXTX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["RXTXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["RXTXTX"]["INTF2"]["value"] == UDP_RXTXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["RXTXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXTXTX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["RXTXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXTXTX"]["INTF2"]["value"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["RXTXTX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["RXTXTX"]["INTF3"]["value"] == UDP_RXTXTX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["RXTXTX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["RXTXTX"]["INTF3"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["RXTXTX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["RXTXTX"]["INTF3"]["value"], "status": false };
                                        }
                                    }
                                }
                            }
                            //RxTxRx
                            if (typeof innerArr[k][p]["UDP"]["RXTXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["RXTXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["RXTXRX"]["INTF1"]["value"] == UDP_RXTXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["RXTXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXTXRX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["RXTXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXTXRX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["RXTXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["RXTXRX"]["INTF2"]["value"] == UDP_RXTXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["RXTXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXTXRX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["RXTXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXTXRX"]["INTF2"]["value"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["RXTXRX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["RXTXRX"]["INTF3"]["value"] == UDP_RXTXRX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["RXTXRX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["RXTXRX"]["INTF3"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["RXTXRX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["RXTXRX"]["INTF3"]["value"], "status": false };
                                        }
                                    }
                                }
                            }
                            //RxRxTx
                            if (typeof innerArr[k][p]["UDP"]["RXRXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["RXRXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["RXRXTX"]["INTF1"]["value"] == UDP_RXRXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["RXRXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXRXTX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["RXRXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXRXTX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["RXRXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["RXRXTX"]["INTF2"]["value"] == UDP_RXRXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["RXRXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXRXTX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["RXRXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXRXTX"]["INTF2"]["value"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["RXRXTX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["RXRXTX"]["INTF3"]["value"] == UDP_RXRXTX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["RXRXTX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["RXRXTX"]["INTF3"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["RXRXTX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["RXRXTX"]["INTF3"]["value"], "status": false };
                                        }
                                    }
                                }
                            }
                            //RxRxRx
                            if (typeof innerArr[k][p]["UDP"]["RXRXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["RXRXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["RXRXRX"]["INTF1"]["value"] == UDP_RXRXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["RXRXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXRXRX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["RXRXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXRXRX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["RXRXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["RXRXRX"]["INTF2"]["value"] == UDP_RXRXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["RXRXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXRXRX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["RXRXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXRXRX"]["INTF2"]["value"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["RXRXRX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["RXRXRX"]["INTF3"]["value"] == UDP_RXRXRX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["RXRXRX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["RXRXRX"]["INTF3"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["RXRXRX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["RXRXRX"]["INTF3"]["value"], "status": false };
                                        }
                                    }
                                }
                            }

                        } // END UDP
                    } // Execution Report Compare IF BLOCK
                    else {
                        if (typeof innerArr[k][p]["TCP"] != 'undefined') {
                            //TxTxTx
                            if (typeof innerArr[k][p]["TCP"]["TXTXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["TXTXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["TXTXTX"]["INTF1"] == TCP_TXTXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["TXTXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXTXTX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["TXTXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXTXTX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["TXTXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["TXTXTX"]["INTF2"] == TCP_TXTXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["TXTXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXTXTX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["TXTXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXTXTX"]["INTF2"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["TXTXTX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["TXTXTX"]["INTF3"] == TCP_TXTXTX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["TXTXTX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["TXTXTX"]["INTF3"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["TXTXTX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["TXTXTX"]["INTF3"], "status": false };
                                        }
                                    }
                                }
                            }
                            //TxTxRx
                            if (typeof innerArr[k][p]["TCP"]["TXTXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["TXTXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["TXTXRX"]["INTF1"] == TCP_TXTXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["TXTXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXTXRX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["TXTXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXTXRX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["TXTXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["TXTXRX"]["INTF2"] == TCP_TXTXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["TXTXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXTXRX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["TXTXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXTXRX"]["INTF2"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["TXTXRX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["TXTXRX"]["INTF3"] == TCP_TXTXRX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["TXTXRX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["TXTXRX"]["INTF3"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["TXTXRX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["TXTXRX"]["INTF3"], "status": false };
                                        }
                                    }
                                }
                            }
                            //TxRxTx
                            if (typeof innerArr[k][p]["TCP"]["TXRXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["TXRXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["TXRXTX"]["INTF1"] == TCP_TXRXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["TXRXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXRXTX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["TXRXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXRXTX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["TXRXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["TXRXTX"]["INTF2"] == TCP_TXRXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["TXRXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXRXTX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["TXRXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXRXTX"]["INTF2"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["TXRXTX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["TXRXTX"]["INTF3"] == TCP_TXRXTX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["TXRXTX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["TXRXTX"]["INTF3"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["TXRXTX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["TXRXTX"]["INTF3"], "status": false };
                                        }
                                    }
                                }
                            }
                            //TxRxRx
                            if (typeof innerArr[k][p]["TCP"]["TXRXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["TXRXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["TXRXRX"]["INTF1"] == TCP_TXRXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["TXRXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXRXRX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["TXRXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXRXRX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["TXRXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["TXRXRX"]["INTF2"] == TCP_TXRXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["TXRXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXRXRX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["TXRXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXRXRX"]["INTF2"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["TXRXRX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["TXRXRX"]["INTF3"] == TCP_TXRXRX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["TXRXRX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["TXRXRX"]["INTF3"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["TXRXRX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["TXRXRX"]["INTF3"], "status": false };
                                        }
                                    }
                                }
                            }
                            //RxTxTx
                            if (typeof innerArr[k][p]["TCP"]["RXTXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["RXTXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["RXTXTX"]["INTF1"] == TCP_RXTXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["RXTXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXTXTX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["RXTXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXTXTX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["RXTXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["RXTXTX"]["INTF2"] == TCP_RXTXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["RXTXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXTXTX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["RXTXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXTXTX"]["INTF2"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["RXTXTX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["RXTXTX"]["INTF3"] == TCP_RXTXTX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["RXTXTX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["RXTXTX"]["INTF3"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["RXTXTX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["RXTXTX"]["INTF3"], "status": false };
                                        }
                                    }
                                }
                            }
                            //RxTxRx
                            if (typeof innerArr[k][p]["TCP"]["RXTXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["RXTXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["RXTXRX"]["INTF1"] == TCP_RXTXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["RXTXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXTXRX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["RXTXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXTXRX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["RXTXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["RXTXRX"]["INTF2"] == TCP_RXTXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["RXTXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXTXRX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["RXTXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXTXRX"]["INTF2"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["RXTXRX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["RXTXRX"]["INTF3"] == TCP_RXTXRX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["RXTXRX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["RXTXRX"]["INTF3"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["RXTXRX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["RXTXRX"]["INTF3"], "status": false };
                                        }
                                    }
                                }
                            }
                            //RxRxTx
                            if (typeof innerArr[k][p]["TCP"]["RXRXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["RXRXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["RXRXTX"]["INTF1"] == TCP_RXRXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["RXRXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXRXTX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["RXRXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXRXTX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["RXRXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["RXRXTX"]["INTF2"] == TCP_RXRXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["RXRXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXRXTX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["RXRXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXRXTX"]["INTF2"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["RXRXTX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["RXRXTX"]["INTF3"] == TCP_RXRXTX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["RXRXTX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["RXRXTX"]["INTF3"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["RXRXTX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["RXRXTX"]["INTF3"], "status": false };
                                        }
                                    }
                                }
                            }
                            //RxRxRx
                            if (typeof innerArr[k][p]["TCP"]["RXRXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["RXRXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["RXRXRX"]["INTF1"] == TCP_RXRXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["RXRXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXRXRX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["RXRXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXRXRX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["RXRXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["RXRXRX"]["INTF2"] == TCP_RXRXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["RXRXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXRXRX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["RXRXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXRXRX"]["INTF2"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["RXRXRX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["RXRXRX"]["INTF3"] == TCP_RXRXRX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["RXRXRX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["RXRXRX"]["INTF3"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["RXRXRX"]["INTF3"] = { "value": innerArr[k][p]["TCP"]["RXRXRX"]["INTF3"], "status": false };
                                        }
                                    }
                                }
                            }

                        } // END TCP

                        if (typeof innerArr[k][p]["UDP"] != 'undefined') {
                            //TxTxTx
                            if (typeof innerArr[k][p]["UDP"]["TXTXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["TXTXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["TXTXTX"]["INTF1"] == UDP_TXTXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["TXTXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXTXTX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["TXTXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXTXTX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["TXTXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["TXTXTX"]["INTF2"] == UDP_TXTXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["TXTXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXTXTX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["TXTXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXTXTX"]["INTF2"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["TXTXTX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["TXTXTX"]["INTF3"] == UDP_TXTXTX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["TXTXTX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["TXTXTX"]["INTF3"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["TXTXTX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["TXTXTX"]["INTF3"], "status": false };
                                        }
                                    }
                                }
                            }
                            //TxTxRx
                            if (typeof innerArr[k][p]["UDP"]["TXTXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["TXTXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["TXTXRX"]["INTF1"] == UDP_TXTXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["TXTXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXTXRX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["TXTXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXTXRX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["TXTXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["TXTXRX"]["INTF2"] == UDP_TXTXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["TXTXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXTXRX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["TXTXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXTXRX"]["INTF2"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["TXTXRX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["TXTXRX"]["INTF3"] == UDP_TXTXRX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["TXTXRX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["TXTXRX"]["INTF3"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["TXTXRX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["TXTXRX"]["INTF3"], "status": false };
                                        }
                                    }
                                }
                            }
                            //TxRxTx
                            if (typeof innerArr[k][p]["UDP"]["TXRXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["TXRXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["TXRXTX"]["INTF1"] == UDP_TXRXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["TXRXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXRXTX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["TXRXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXRXTX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["TXRXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["TXRXTX"]["INTF2"] == UDP_TXRXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["TXRXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXRXTX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["TXRXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXRXTX"]["INTF2"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["TXRXTX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["TXRXTX"]["INTF3"] == UDP_TXRXTX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["TXRXTX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["TXRXTX"]["INTF3"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["TXRXTX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["TXRXTX"]["INTF3"], "status": false };
                                        }
                                    }
                                }
                            }
                            //TxRxRx
                            if (typeof innerArr[k][p]["UDP"]["TXRXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["TXRXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["TXRXRX"]["INTF1"] == UDP_TXRXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["TXRXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXRXRX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["TXRXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXRXRX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["TXRXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["TXRXRX"]["INTF2"] == UDP_TXRXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["TXRXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXRXRX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["TXRXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXRXRX"]["INTF2"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["TXRXRX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["TXRXRX"]["INTF3"] == UDP_TXRXRX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["TXRXRX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["TXRXRX"]["INTF3"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["TXRXRX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["TXRXRX"]["INTF3"], "status": false };
                                        }
                                    }
                                }
                            }
                            //RxTxTx
                            if (typeof innerArr[k][p]["UDP"]["RXTXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["RXTXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["RXTXTX"]["INTF1"] == UDP_RXTXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["RXTXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXTXTX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["RXTXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXTXTX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["RXTXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["RXTXTX"]["INTF2"] == UDP_RXTXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["RXTXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXTXTX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["RXTXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXTXTX"]["INTF2"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["RXTXTX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["RXTXTX"]["INTF3"] == UDP_RXTXTX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["RXTXTX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["RXTXTX"]["INTF3"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["RXTXTX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["RXTXTX"]["INTF3"], "status": false };
                                        }
                                    }
                                }
                            }
                            //RxTxRx
                            if (typeof innerArr[k][p]["UDP"]["RXTXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["RXTXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["RXTXRX"]["INTF1"] == UDP_RXTXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["RXTXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXTXRX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["RXTXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXTXRX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["RXTXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["RXTXRX"]["INTF2"] == UDP_RXTXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["RXTXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXTXRX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["RXTXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXTXRX"]["INTF2"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["RXTXRX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["RXTXRX"]["INTF3"] == UDP_RXTXRX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["RXTXRX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["RXTXRX"]["INTF3"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["RXTXRX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["RXTXRX"]["INTF3"], "status": false };
                                        }
                                    }
                                }
                            }
                            //RxRxTx
                            if (typeof innerArr[k][p]["UDP"]["RXRXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["RXRXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["RXRXTX"]["INTF1"] == UDP_RXRXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["RXRXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXRXTX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["RXRXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXRXTX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["RXRXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["RXRXTX"]["INTF2"] == UDP_RXRXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["RXRXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXRXTX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["RXRXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXRXTX"]["INTF2"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["RXRXTX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["RXRXTX"]["INTF3"] == UDP_RXRXTX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["RXRXTX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["RXRXTX"]["INTF3"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["RXRXTX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["RXRXTX"]["INTF3"], "status": false };
                                        }
                                    }
                                }
                            }
                            //RxRxRx
                            if (typeof innerArr[k][p]["UDP"]["RXRXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["RXRXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["RXRXRX"]["INTF1"] == UDP_RXRXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["RXRXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXRXRX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["RXRXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXRXRX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["RXRXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["RXRXRX"]["INTF2"] == UDP_RXRXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["RXRXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXRXRX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["RXRXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXRXRX"]["INTF2"], "status": false };
                                        }
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["RXRXRX"]["INTF3"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["RXRXRX"]["INTF3"] == UDP_RXRXRX_INTF3_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["RXRXRX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["RXRXRX"]["INTF3"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["RXRXRX"]["INTF3"] = { "value": innerArr[k][p]["UDP"]["RXRXRX"]["INTF3"], "status": false };
                                        }
                                    }
                                }
                            }

                        } // END UDP
                    }


                }

            } // END innerArr FOR LOOP

        } // END MAIN FOR LOOP

        return smartMergeObj;
    } catch (err) {
        logger.error("update2INFMaxValue error : ", err);
    }
}


/* Function to parse and store TP format data into DB */
async function BtThroughputData(data, template) {
    console.log("BtThroughputData ", data);
    try {
        let obj = data;
        await updateExecutions(body.Test_Execution_Id, obj);
        let executionName = await executionObj.getExecution(data.Test_Execution_Id);
        executionName = executionName[0].name;
        obj = _.omit(obj, "Test_Execution_Id", "Test_case_Id", "Test_Suite");
        obj = _.extend(obj, { execution_name: executionName }, { project_type: template }, { execution_id: data["Test_Execution_Id"] }, { test_suite: body.Test_Suite });

        let query = _.omit(obj, "Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)", "Uni-DirectionalTx-Rx Traffic (TP Values in Kbps)");
        let options = { upsert: true };
        let update = {};

        let dbData = await throughputObj.findThroughputData(query);
        if (dbData.length) {
            for (let item of Object.keys(data)) {
                if (dbData[0]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"] == undefined) {
                    dbData[0]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"] = {};
                }

                /* Bi-DirectionalTx-Rx Traffic */
                if ((_.has(dbData[0], "Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)")) && (item.includes("Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"))) {
                    /* Bi-directional E0 */
                    if ((_.has(dbData[0]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"], "E0")) && (_.has(data[item], "E0"))) {
                        if (_.has(data[item]["E0"], "Slave")) {
                            dbData[0][item]["E0"]["Slave"] = data[item]["E0"]["Slave"];
                            update = dbData[0];
                        } else if (_.has(data[item]["E0"], "Master")) {
                            dbData[0][item]["E0"]["Master"] = data[item]["E0"]["Master"];
                            update = dbData[0];
                        }
                    } else if ((dbData[0][item]["E0"] == undefined) && (_.has(data[item], "E0"))) {
                        dbData[0][item]["E0"] = {};
                        if (_.has(data[item]["E0"], "Slave")) {
                            dbData[0][item]["E0"]["Slave"] = data[item]["E0"]["Slave"];
                            update = dbData[0];
                        } else if (_.has(data[item]["E0"], "Master")) {
                            dbData[0][item]["E0"]["Master"] = data[item]["E0"]["Master"];
                            update = dbData[0];
                        }
                    }

                    /* Bi-directional AES */
                    if ((_.has(dbData[0]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"], "AES")) && (_.has(data[item], "AES"))) {
                        if (_.has(data[item]["AES"], "Slave")) {
                            dbData[0][item]["AES"]["Slave"] = data[item]["AES"]["Slave"];
                            update = dbData[0];
                        } else if (_.has(data[item]["AES"], "Master")) {
                            dbData[0][item]["AES"]["Master"] = data[item]["AES"]["Master"];
                            update = dbData[0];
                        }
                    } else if ((dbData[0][item]["AES"] == undefined) && (_.has(data[item], "AES"))) {
                        dbData[0][item]["AES"] = {};
                        if (_.has(data[item]["AES"], "Slave")) {
                            dbData[0][item]["AES"]["Slave"] = data[item]["AES"]["Slave"];
                            update = dbData[0];
                        } else if (_.has(data[item]["AES"], "Master")) {
                            dbData[0][item]["AES"]["Master"] = data[item]["AES"]["Master"];
                            update = dbData[0];
                        }
                    }
                }
            }
        } else {
            update = obj;
        }

        await throughputObj.updateThroughput(query, update, options);
    } catch (err) {
        logger.error("BtThroughputData error : ", err);
    }
}


/* Function to parse and store TP format data into DB */
async function BleThroughputData(data, template) {
    console.log("BleThroughputData ", data);
    try {
        let obj = data;
        await updateExecutions(body.Test_Execution_Id, obj);
        let executionName = await executionObj.getExecution(data.Test_Execution_Id);
        executionName = executionName[0].name;
        obj = _.omit(obj, "Test_Execution_Id", "Test_case_Id", "Test_Suite");
        obj = _.extend(obj, { execution_name: executionName }, { project_type: template }, { execution_id: data["Test_Execution_Id"] }, { test_suite: body.Test_Suite });

        let query = _.omit(obj, "Le 1Mbps", "Le 2Mbps", "DLE 1Mbps", "DLE 2Mbps");
        let options = { upsert: true };
        let update = {};

        let dbData = await throughputObj.findThroughputData(query);
        if (dbData.length) {
            for (let item of Object.keys(data)) {
                if (dbData[0]["Le 1Mbps"] == undefined && (item.includes("Le 1Mbps"))) {
                    dbData[0]["Le 1Mbps"] = {};
                } else if (dbData[0]["Le 2Mbps"] == undefined && (item.includes("Le 2Mbps"))) {
                    dbData[0]["Le 2Mbps"] = {};
                } else if (dbData[0]["DLE 1Mbps"] == undefined && (item.includes("DLE 1Mbps"))) {
                    dbData[0]["DLE 1Mbps"] = {};
                } else if (dbData[0]["DLE 2Mbps"] == undefined && (item.includes("DLE 2Mbps"))) {
                    dbData[0]["DLE 2Mbps"] = {};
                } else {
                    logger.error("New traffic column in received data.")
                }

                /* Le 1Mbps */
                if ((_.has(dbData[0], "Le 1Mbps")) && (item.includes("Le 1Mbps"))) {
                    /* Le 1Mbps Master */
                    if ((dbData[0][item]["Master"] == undefined) && (_.has(data[item], "Master"))) {
                        dbData[0][item]["Master"] = {};
                    }

                    if ((_.has(dbData[0]["Le 1Mbps"], "Master")) && (_.has(data[item], "Master"))) {
                        if (_.has(data[item]["Master"], "uni-dir")) {
                            dbData[0][item]["Master"]["uni-dir"] = data[item]["Master"]["uni-dir"];
                            update = dbData[0];
                        } else if (_.has(data[item]["Master"], "bi-dir")) {
                            dbData[0][item]["Master"]["bi-dir"] = data[item]["Master"]["bi-dir"];
                            update = dbData[0];
                        }
                    }

                    /* Le 1Mbps Slave */
                    if ((dbData[0][item]["Slave"] == undefined) && (_.has(data[item], "Slave"))) {
                        dbData[0][item]["Slave"] = {};
                    }

                    if ((_.has(dbData[0]["Le 1Mbps"], "Slave")) && (_.has(data[item], "Slave"))) {
                        if (_.has(data[item]["Slave"], "uni-dir")) {
                            dbData[0][item]["Slave"]["uni-dir"] = data[item]["Slave"]["uni-dir"];
                            update = dbData[0];
                        } else if (_.has(data[item]["Slave"], "bi-dir")) {
                            dbData[0][item]["Slave"]["bi-dir"] = data[item]["Slave"]["bi-dir"];
                            update = dbData[0];
                        }
                    }
                }

                /* Le 2Mbps */
                if ((_.has(dbData[0], "Le 2Mbps")) && (item.includes("Le 2Mbps"))) {
                    /* Le 2Mbps Master */
                    if ((dbData[0][item]["Master"] == undefined) && (_.has(data[item], "Master"))) {
                        dbData[0][item]["Master"] = {};
                    }

                    if ((_.has(dbData[0]["Le 2Mbps"], "Master")) && (_.has(data[item], "Master"))) {
                        if (_.has(data[item]["Master"], "uni-dir")) {
                            dbData[0][item]["Master"]["uni-dir"] = data[item]["Master"]["uni-dir"];
                            update = dbData[0];
                        } else if (_.has(data[item]["Master"], "bi-dir")) {
                            dbData[0][item]["Master"]["bi-dir"] = data[item]["Master"]["bi-dir"];
                            update = dbData[0];
                        }
                    }

                    /* Le 2Mbps Slave */
                    if ((dbData[0][item]["Slave"] == undefined) && (_.has(data[item], "Slave"))) {
                        dbData[0][item]["Slave"] = {};
                    }

                    if ((_.has(dbData[0]["Le 2Mbps"], "Slave")) && (_.has(data[item], "Slave"))) {
                        if (_.has(data[item]["Slave"], "uni-dir")) {
                            dbData[0][item]["Slave"]["uni-dir"] = data[item]["Slave"]["uni-dir"];
                            update = dbData[0];
                        } else if (_.has(data[item]["Slave"], "bi-dir")) {
                            dbData[0][item]["Slave"]["bi-dir"] = data[item]["Slave"]["bi-dir"];
                            update = dbData[0];
                        }
                    }
                }

                /* DLE 1Mbps */
                if ((_.has(dbData[0], "DLE 1Mbps")) && (item.includes("DLE 1Mbps"))) {
                    /* DLE 1Mbps Master */
                    if ((dbData[0][item]["Master"] == undefined) && (_.has(data[item], "Master"))) {
                        dbData[0][item]["Master"] = {};
                    }

                    if ((_.has(dbData[0]["DLE 1Mbps"], "Master")) && (_.has(data[item], "Master"))) {
                        if (_.has(data[item]["Master"], "uni-dir")) {
                            dbData[0][item]["Master"]["uni-dir"] = data[item]["Master"]["uni-dir"];
                            update = dbData[0];
                        } else if (_.has(data[item]["Master"], "bi-dir")) {
                            dbData[0][item]["Master"]["bi-dir"] = data[item]["Master"]["bi-dir"];
                            update = dbData[0];
                        }
                    }

                    /* DLE 1Mbps Slave */
                    if ((dbData[0][item]["Slave"] == undefined) && (_.has(data[item], "Slave"))) {
                        dbData[0][item]["Slave"] = {};
                    }

                    if ((_.has(dbData[0]["DLE 1Mbps"], "Slave")) && (_.has(data[item], "Slave"))) {
                        if (_.has(data[item]["Slave"], "uni-dir")) {
                            dbData[0][item]["Slave"]["uni-dir"] = data[item]["Slave"]["uni-dir"];
                            update = dbData[0];
                        } else if (_.has(data[item]["Slave"], "bi-dir")) {
                            dbData[0][item]["Slave"]["bi-dir"] = data[item]["Slave"]["bi-dir"];
                            update = dbData[0];
                        }
                    }
                }

                /* DLE 2Mbps */
                if ((_.has(dbData[0], "DLE 2Mbps")) && (item.includes("DLE 2Mbps"))) {
                    /* DLE 2Mbps Master */
                    if ((dbData[0][item]["Master"] == undefined) && (_.has(data[item], "Master"))) {
                        dbData[0][item]["Master"] = {};
                    }

                    if ((_.has(dbData[0]["DLE 2Mbps"], "Master")) && (_.has(data[item], "Master"))) {
                        if (_.has(data[item]["Master"], "uni-dir")) {
                            dbData[0][item]["Master"]["uni-dir"] = data[item]["Master"]["uni-dir"];
                            update = dbData[0];
                        } else if (_.has(data[item]["Master"], "bi-dir")) {
                            dbData[0][item]["Master"]["bi-dir"] = data[item]["Master"]["bi-dir"];
                            update = dbData[0];
                        }
                    }

                    /* DLE 2Mbps Slave */
                    if ((dbData[0][item]["Slave"] == undefined) && (_.has(data[item], "Slave"))) {
                        dbData[0][item]["Slave"] = {};
                    }

                    if ((_.has(dbData[0]["DLE 2Mbps"], "Slave")) && (_.has(data[item], "Slave"))) {
                        if (_.has(data[item]["Slave"], "uni-dir")) {
                            dbData[0][item]["Slave"]["uni-dir"] = data[item]["Slave"]["uni-dir"];
                            update = dbData[0];
                        } else if (_.has(data[item]["Slave"], "bi-dir")) {
                            dbData[0][item]["Slave"]["bi-dir"] = data[item]["Slave"]["bi-dir"];
                            update = dbData[0];
                        }
                    }
                }
            }
        } else {
            update = obj;
        }

        await throughputObj.updateThroughput(query, update, options);
    } catch (err) {
        logger.error("BleThroughputData error : ", err);
    }
}


/* Function to parse and store BT-MOS and Dual HFP data into DB */
async function BtMosData(data, template) {
    try {
        console.log(template, " : ", data);
        let obj = data;
        await updateExecutions(body.Test_Execution_Id, obj);
        let executionName = await executionObj.getExecution(data.Test_Execution_Id);
        executionName = executionName[0].name;
        obj = _.omit(obj, "Test_Execution_Id", "Test_Suite");
        obj = _.extend(obj, { execution_name: executionName }, { project_type: template }, { execution_id: data["Test_Execution_Id"] }, { test_suite: body.Test_Suite });

        let query = obj;
        let update = obj;
        let options = { upsert: true };
        await throughputObj.updateThroughput(query, update, options);

    } catch (err) {
        logger.error("BtMosData : ", err);
    }
}


/* Function to parse and store BLE-RvR and Long Range RvR data into DB */
async function BleRvrData(data, template) {
    try {
        console.log("BleRvrData : ", data);
        let obj = data["BLE-RvR"]["Common"];
        await updateExecutions(body.Test_Execution_Id, obj);
        let executionName = await executionObj.getExecution(data["BLE-RvR"].Test_Execution_Id);
        executionName = executionName[0].name;
        obj = _.omit(obj, "Test_Execution_Id", "Test_Suite");
        obj = _.extend(obj, { execution_name: executionName }, { project_type: template }, { execution_id: data["BLE-RvR"]["Test_Execution_Id"] }, { test_suite: body.Test_Suite });

        let query = obj;
        let update = {};
        let options = { upsert: true };

        _.each(data["BLE-RvR"], async(CIVal, CIKey) => {
            if (CIKey == obj["Connection Interval"]) {
                _.each(data["BLE-RvR"][CIKey], (attnVal, attnKey) => {
                    let Attn = attnKey.split('-')[0];
                    let BLEAttn = { "BLE Attn ": [attnKey.split('-')[1], attnKey.split('-')[2]] }

                    let attnObj = {
                        [Attn]: {
                            Rssi: attnVal.split('_')[0],
                            Throughput: attnVal.split('_')[1]
                        }
                    }

                    update = _.extend(update, attnObj, BLEAttn);
                });
                await throughputObj.updateThroughput(query, update, options);
            }
        });

    } catch (err) {
        logger.error("BleRvrData : ", err);
    }
}


/* Function to parse and store BT-RvR data into DB */
async function BtRvrData(data, template) {
    try {
        console.log("BtRvrData : ", data);
        let obj = data["BT-RvR"]["Common"];
        await updateExecutions(body.Test_Execution_Id, obj);
        let executionName = await executionObj.getExecution(data["BT-RvR"].Test_Execution_Id);
        executionName = executionName[0].name;
        obj = _.omit(obj, "Test_Execution_Id", "Test_Suite");
        obj = _.extend(obj, { execution_name: executionName }, { project_type: template }, { execution_id: data["BT-RvR"]["Test_Execution_Id"] }, { test_suite: body.Test_Suite });

        let query = obj;
        let update = {};
        let options = { upsert: true };

        _.each(data["BT-RvR"], async(CIVal, CIKey) => {
            if (CIKey == obj["DUT  (Tx/Rx)"]) {
                _.each(data["BT-RvR"][CIKey], (attnVal, attnKey) => {
                    let Attn = attnKey.split('-')[0];

                    let attnObj = {
                        [Attn]: {
                            Rssi: attnVal.split('_')[0],
                            Throughput: attnVal.split('_')[1]
                        }
                    }

                    update = _.extend(update, attnObj);
                });
                await throughputObj.updateThroughput(query, update, options);
            }
        });

    } catch (err) {
        logger.error("BtRvrData : ", err);
    }
}

/* Function to parse and compare BLE-RvR data and segregate into tables for individual data*/
async function BleRvrTables(data) {
    try {
        let testCompareObjects = [];

        _.each(_.pluck(_.uniq(_.union(data), false, _.property('DUT (Master/Slave)(Tx/Rx)')), 'DUT (Master/Slave)(Tx/Rx)'), function(element) {
            let commonDut = _.filter(data, function(p) { return p['DUT (Master/Slave)(Tx/Rx)'] == element; })
            _.each(_.pluck(_.uniq(_.union(data), false, _.property('REF (Master/Slave)(Tx/Rx)')), 'REF (Master/Slave)(Tx/Rx)'), function(element) {
                let commonRef = _.filter(commonDut, function(p) { return p['REF (Master/Slave)(Tx/Rx)'] == element; })
                _.each(_.pluck(_.uniq(_.union(data), false, _.property('BLE PHY 1M/2M/DLE')), 'BLE PHY 1M/2M/DLE'), function(element) {
                    let commonPhy = _.filter(commonRef, function(p) { return p['BLE PHY 1M/2M/DLE'] == element; })
                    if (commonPhy.length) {
                        testCompareObjects.push(commonPhy);
                    }
                });
            });
        });
        return testCompareObjects;
    } catch (err) {
        logger.error("BleRvrTables : ", err);
    }
}


/* Function to parse and compare LE-Long-Range-RvR data and segregate into tables for individual data*/
async function LongRangeRvrTables(data) {
    try {
        let testCompareObjects = [];

        _.each(_.pluck(_.uniq(_.union(data), false, _.property('DUT (Master/Slave)(Tx/Rx)')), 'DUT (Master/Slave)(Tx/Rx)'), function(element) {
            let commonDut = _.filter(data, function(p) { return p['DUT (Master/Slave)(Tx/Rx)'] == element; })
            _.each(_.pluck(_.uniq(_.union(data), false, _.property('REF (Master/Slave)(Tx/Rx)')), 'REF (Master/Slave)(Tx/Rx)'), function(element) {
                let commonRef = _.filter(commonDut, function(p) { return p['REF (Master/Slave)(Tx/Rx)'] == element; })
                if (commonRef.length) {
                    testCompareObjects.push(commonRef);
                }
            });
        });
        return testCompareObjects;
    } catch (err) {
        logger.error("LongRangeRvrTables : ", err);
    }
}


/* Function to parse and compare BT-RvR data and segregate into tables for individual data*/
async function BtRvrTables(data) {
    try {
        let testCompareObjects = [];

        _.each(_.pluck(_.uniq(_.union(data), false, _.property('DUT (Master/Slave)')), 'DUT (Master/Slave)'), function(element) {
            let commonDut = _.filter(data, function(p) { return p['DUT (Master/Slave)'] == element; })
            _.each(_.pluck(_.uniq(_.union(data), false, _.property('DUT  (Tx/Rx)')), 'DUT  (Tx/Rx)'), function(element) {
                let commonRef = _.filter(commonDut, function(p) { return p['DUT  (Tx/Rx)'] == element; })
                if (commonRef.length) {
                    testCompareObjects.push(commonRef);
                }
            });
        });
        return testCompareObjects;
    } catch (err) {
        logger.error("BtRvrTables : ", err);
    }
}


/* Function to parse and store CC data into DB */
async function CCData(data, template) {
    try {
        // console.log("CCData : ", data);
        let obj = data;
        await updateExecutions(data.Test_Execution_Id, obj);
        let executionName = await executionObj.getExecution(data.Test_Execution_Id);
        executionName = executionName[0].name;
        obj = _.omit(obj, "S#No#", "Test_Execution_Id", "Test_Suite");
        obj = _.extend(obj, { execution_name: executionName }, { project_type: template }, { execution_id: data["Test_Execution_Id"] }, { test_suite: data.Test_Suite });

        _.each(obj, (val, key) => {
            if (typeof(val) === 'object' && val != null) {
                let k = key.split(".").join("_");
                k = k.split(" (mA)").join("");
                obj[k] = obj[key];
                obj = _.omit(obj, key);
            }
        });

        obj = _.extend(obj, { "Header data": data['Header data'] });
        let query = obj;
        let update = obj;
        let options = { upsert: true };

        await throughputObj.updateThroughput(query, update, options);

    } catch (err) {
        logger.error("CCData : ", err);
    }
}

/* Function to parse and store DFS data into DB */
async function DFSData(data, template) {
    try {
        // console.log("DFSData : ", data);
        let obj = data;
        let temp;
        await updateExecutions(data.Test_Execution_Id, obj);
        let executionName = await executionObj.getExecution(data.Test_Execution_Id);
        executionName = executionName[0].name;
        _.each(Object.keys(obj), async function(item) {
            if (!isNaN(Number(item))) {
                obj = _.omit(obj, "S#No#", "Test_Execution_Id", "Test_Suite", item);
            }
        });
        obj = _.extend(obj, { execution_name: executionName }, { project_type: template }, { execution_id: data["Test_Execution_Id"] }, { test_suite: data.Test_Suite }, { "Header data": data['Header data'] });

        let query = obj;
        let options = { upsert: true };

        _.each(Object.keys(data), async function(item) {
            if (!isNaN(Number(item))) {
                let attn = {};
                attn[item] = data[item];
                temp = {...obj };
                temp = _.extend(temp, attn);
            }
        });
        let update = temp;
        await throughputObj.updateThroughput(query, update, options);

    } catch (err) {
        logger.error("DFSData : ", err);
    }
}

/* Function to parse and store WACP-Wifi data into DB */
async function WACP_Wifi(data, template) {
    try {
        // console.log("WACP_Wifi : ", data);
        let obj = data;
        await updateExecutions(data.Test_Execution_Id, obj);
        let executionName = await executionObj.getExecution(data.Test_Execution_Id);
        executionName = executionName[0].name;
        obj = _.omit(obj, "S#No#", "Test_Execution_Id", "Test_Suite", "TC ID");
        obj = _.extend(obj, { execution_name: executionName }, { project_type: template }, { execution_id: data["Test_Execution_Id"] }, { test_suite: data.Test_Suite }, { "Test_case_Id": data["TC ID"] }, { "Header data": data['Header data'] });

        let query = obj;
        let update = obj;
        let options = { upsert: true };

        await throughputObj.updateThroughput(query, update, options);

    } catch (err) {
        logger.error("WACP_Wifi : ", err);
    }
}

/* Function to parse and store WACP-Coex data into DB */
async function WACP_Coex(data, template) {
    try {
        // console.log("WACP_Coex : ", data);
        let obj = data;
        await updateExecutions(data.Test_Execution_Id, obj);
        let executionName = await executionObj.getExecution(data.Test_Execution_Id);
        executionName = executionName[0].name;
        obj = _.omit(obj, "S#No#", "Test_Execution_Id", "Test_Suite", "TC ID");
        obj = _.extend(obj, { execution_name: executionName }, { project_type: template }, { execution_id: data["Test_Execution_Id"] }, { test_suite: data.Test_Suite }, { "Test_case_Id": data["TC ID"] }, { "Header data": data['Header data'] });

        let query = obj;
        let update = obj;
        let options = { upsert: true };

        await throughputObj.updateThroughput(query, update, options);

    } catch (err) {
        logger.error("WACP_Coex : ", err);
    }
}

async function updateExecutions(executionId, obj) {
    try {
        let filter = executionId;
        let update = {};
        if (obj['DUT']) {
            update["soc"] = obj['DUT'];
        }
        if (obj['Interface']) {
            if (obj['Interface'].length > 0)
                update["Interface"] = obj['Interface'];
        }
        if (obj['Host Platform']) {
            if (obj['Host Platform'].length > 0)
                update["Platform"] = obj['Host Platform'];
        }
        if (obj['DUT OS']) {
            if (obj['DUT OS'].length > 0)
                update["os"] = obj['DUT OS'];
        }
        if (obj['DUT Fw/Drv']) {
            if (obj['DUT Fw/Drv'].length > 0)
                update["release"] = obj['DUT Fw/Drv'];
        }
        if (Object.keys(update).length > 0)
            await executionObj.updateExecution(filter, update);

    } catch (error) {
        console.log("updateExecutions:", error);
    }
}



/*
    This method receives the throughput data for each testcase executed from the testbed
*/
routes.prototype.getThroughputData = async function(req, res) {
    let responseObject = {
        status: true,
        data: {}
    };

    try {
        let project_type = req.body;

        if (project_type["RvR Raw Data"] ? project_type["RvR Raw Data"]["SheetName"] == 'RVR_TPUT_TABLE' : false) {
            await rvrThroughputData(req.body, "RVR-SCBT");
        } else if (project_type["RvR Raw Data"] ? project_type["RvR Raw Data"]["SheetName"] == 'RVR_STA_TPUT' : false) {
            await rvrThroughputData(req.body, "RvR");
        } else if (project_type["STA Throughput Data"] ? project_type["STA Throughput Data"]["SheetName"] == 'STA_TPUT_TABLE' : false) {
            await tpThroughputData(req.body, "TP");
        } else if (project_type["MMH Throughput Data"] ? project_type["MMH Throughput Data"]["SheetName"] == 'MMH_TPUT_TABLE' : false) {
            await tpThroughputData(req.body, "TP");
        } else if (project_type.SheetName == 'Simul-TP-2INTF_TPUT_TABLE') {
            await multiInterfaceData(req.body, "Simul-TP-2INTF");
        } else if (project_type.SheetName == 'Simul-TP-3INTF_TPUT_TABLE') {
            await multiInterfaceData(req.body, "Simul-TP-3INTF");
        } else if (project_type.SheetName == 'Simul-TP-4INTF_TPUT_TABLE') {
            await multiInterfaceData(req.body, "Simul-TP-4INTF");
        } else if (project_type["AP Throughput Data"] ? project_type["AP Throughput Data"]["SheetName"] == 'AP_TPUT_TABLE' : false) {
            await apThroughputData(req.body, "BAT-CABLE-UP");
            // } else if (project_type["AP Throughput Data"] ? project_type["AP Throughput Data"]["SheetName"] == 'AP_OTA_TPUT_TABLE' : false) {
            //     await apThroughputData(req.body, "BAT-OTA");
        } else if (project_type["AP Throughput Data"] ? project_type["AP Throughput Data"]["SheetName"] == 'AP_MBSS_TPUT_TABLE' : false) {
            await apThroughputData(req.body, "MBSS-SCBT");
        } else if (project_type["IOP Throughput Data"] ? project_type["IOP Throughput Data"]["SheetName"] == 'AP_IOP_TPUT_TABLE' : false) {
            await iopThroughputData(req.body);
        } else if (project_type.SheetName == "OFDMA-UL") {
            await ofdmaULData(req.body);
        } else if (project_type.SheetName == "OFDMA-DL") {
            await ofdmaDLData(req.body);
        } else if (project_type.SheetName == "DL-11ac-MU-MIMO_TP") {
            await dl11acMumimoData(req.body);
        } else if (project_type.SheetName == "DL-11ax-MU-MIMO_TP") {
            await dl11axMumimoData(req.body);
        } else if (project_type.SheetName == "UL-11ax-MU-MIMO_TP") {
            await ul11axMumimoData(req.body);
        } else if (project_type["STA CPUutil Data"] ? project_type["STA CPUutil Data"]["SheetName"] == 'STA_CPU_TABLE' : false) {
            await staCpuUtilData(req.body);
        } else if (project_type.SheetName == "RvR_Table") {
            await reverbOtaRvr(req.body, "REVERB-OTA-RVR");
        } else if (project_type.SheetName == "Reverse_RvR_Table") {
            await reverbOtaRvr(req.body, "REVERB-OTA-REVERSE-RVR");
        } else if (project_type["DBC CPUutil Data"] ? project_type["DBC CPUutil Data"]["SheetName"] == "DBC_CPU_Util" : false) {
            await dbcCpuUtilData(req.body);
        } else if (project_type["STA IOP Throughput Data"] ? project_type["STA IOP Throughput Data"]["SheetName"] == "IOP_TP" : false) {
            await iopTpData(req.body);
        } else if (project_type["STA Throughput Data"] ? project_type["STA Throughput Data"]["SheetName"] == "STA_Coex_TP" : false) {
            await coexTpData(req.body, "STA-Coex-TP");
        } else if (project_type["P2P Throughput Data"] ? project_type["P2P Throughput Data"]["SheetName"] == "P2P_Coex_TP" : false) {
            await coexTpData(req.body, "P2P-Coex-TP");
        } else if (project_type["MMH Throughput Data"] ? project_type["MMH Throughput Data"]["SheetName"] == "MMH_Coex_TP" : false) {
            await coexTpData(req.body, "MMH-Coex-TP");
        } else if (project_type["Master WLAN DRCS COEX"] ? project_type["Master WLAN DRCS COEX"]["SheetName"] == "Coex_Simul-TP-2INTF" : false) {
            await coexIntfTpData(req.body, "Coex-Simul-TP-2INTF");
        } else if (project_type["Throughput Data"] ? project_type["Throughput Data"]["SheetName"] == "Coex_Simul-TP-3INTF" : false) {
            await coexIntfTpData(req.body, "Coex-Simul-TP-3INTF");
        } else if (project_type["RvR Raw Data"] ? project_type["RvR Raw Data"]["SheetName"] == "Coex_RVR_Set-1" : false) {
            await coexRvrData(req.body, "COEX-BT-RVR");
        } else if (project_type["RvR Raw Data"] ? project_type["RvR Raw Data"]["SheetName"] == "Coex_RVR_Set-2" : false) {
            await coexRvrData(req.body, "COEX-WiFi-RVR");
        } else if (project_type["RvR Raw Data"] ? project_type["RvR Raw Data"]["SheetName"] == "Coex_RVR_Set-3" : false) {
            await coexRvrData(req.body, "COEX-BT-WiFi-RVR");
        } else if (project_type.Sheet_name == "BT_THROUGHPUT") {
            await BtThroughputData(req.body, "BT-Throughput");
        } else if (project_type.Sheet_name == "BLE_THROUGHPUT") {
            await BleThroughputData(req.body, "BLE-Throughput");
        } else if (project_type.SheetName == "BT-MOS") {
            await BtMosData(req.body, "BT-MOS");
        } else if (project_type.SheetName == "Dual-HFP") {
            await BtMosData(req.body, "BT-Dual-HFP");
        } else if (project_type["BLE-RvR"] ? project_type["BLE-RvR"]["SheetName"] == "BLE_RvR" : false) {
            await BleRvrData(req.body, "BLE-RvR");
        } else if (project_type["BLE-RvR"] ? project_type["BLE-RvR"]["SheetName"] == "LE-Long-Range-RvR" : false) {
            await BleRvrData(req.body, "LE-Long-Range-RvR");
        } else if (project_type["BT-RvR"] ? project_type["BT-RvR"]["SheetName"] == "BT-RvR" : false) {
            await BtRvrData(req.body, "BT-RvR");
        } else if (project_type.SheetName == "CC_Table") {
            await CCData(req.body, "CC");
        } else if (project_type.SheetName == "DFS_TestReport_Detailed") {
            await DFSData(req.body, "DFS");
        } else if (project_type.SheetName == "WACP_WLAN_Results") {
            await WACP_Wifi(req.body, "WACP_Wifi");
        } else if (project_type.SheetName == "WACP_COEX_Results") {
            await WACP_Coex(req.body, "WACP_Coex");
        } else {
            console.log("Different project type", req.body);
        }

        // res.json(responseObject);
        res.sendStatus(200);
    } catch (err) {
        logger.error("getThroughputData:", err);
        responseError(res, responseObject, "Error in updating the Throughput Data.");
    }

}


/*
    This method fetches the throughput data for given execution from the DB
*/
routes.prototype.getThroughputTableData = async function(req, res) {
    let responseObject = {
        status: true,
        data: {}
    };

    let query = {
        execution_id: req.query.execution_id
    };
    let arr = [];
    let headers, uniqVal;
    var attenVal = [],
        val = [];

    try {
        let kpiData = await throughputObj.findThroughputData(query);

        let project_type_arr = _.pluck(_.uniq(_.union(kpiData), false, _.property('project_type')), 'project_type');
        project_type_arr = _.uniq(project_type_arr);
        console.log("Templates : ", project_type_arr);

        project_type = project_type_arr[req.query.project_type];
        kpi = _.where(kpiData, { project_type: project_type });

        if (project_type == 'RvR' || project_type == 'RVR-SCBT') {
            headers = await throughputObj.findHeader('RvR');
            for (let item of kpi) {
                let attenuationVal = (Object.keys(item));
                _.forEach(attenuationVal, function(item2) {
                    if (item2.match('^[0-9]*$')) {
                        val.push(Number(item2.match('^[0-9]*$')[0]));
                    }
                });
                let Un = _.uniq(val);
                uniqVal = Un.sort((a, b) => a - b);
            }

            responseObject.headers = headers.header;
            responseObject.attenuation = uniqVal;
            responseObject.projectType = project_type;
        } else if (project_type == 'TP') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'Simul-TP-2INTF') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'Simul-TP-3INTF') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'Simul-TP-4INTF') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'BAT-CABLE-UP') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'IOP-Perf') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
            // } else if (project_type == 'BAT-OTA') {
            //     headers = await throughputObj.findHeader(project_type);
            //     responseObject.projectType = project_type;
            //     responseObject.headers = headers.header;
        } else if (project_type == 'MBSS-SCBT') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'OFDMA-UL') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'OFDMA-DL') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'DL-11ac-MU-MIMO') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'DL-11ax-MU-MIMO') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'UL-11ax-MU-MIMO') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'STA-CPU-Util') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'REVERB-OTA-RVR') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            let attenuationDeg = (Object.keys(kpi[0]));
            _.forEach(attenuationDeg, function(item) {
                if (item.match('^[0-9]*$')) {
                    attenVal.push(item.match('^[0-9]*$')[0]);
                }
            });
            responseObject.headers = [];
            responseObject.headers.push(headers.header, attenVal);
        } else if (project_type == 'REVERB-OTA-REVERSE-RVR') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            let attenuationDeg = (Object.keys(kpi[0]));
            _.forEach(attenuationDeg, function(item) {
                if (item.match('^[0-9]*$')) {
                    attenVal.push(item.match('^[0-9]*$')[0]);
                }
            });
            responseObject.headers = [];
            responseObject.headers.push(headers.header, attenVal);
        } else if (project_type == 'DBC-Cpu-Util') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'IOP-TP') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'STA-Coex-TP') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'P2P-Coex-TP') {
            headers = await throughputObj.findHeader("STA-Coex-TP");
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'MMH-Coex-TP') {
            headers = await throughputObj.findHeader("STA-Coex-TP");
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'Coex-Simul-TP-2INTF') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'Coex-Simul-TP-3INTF') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'COEX-BT-RVR') {
            headers = await throughputObj.findHeader("COEX-RVR");
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
            let attn = (Object.keys(kpi[0]));
            _.forEach(attn, function(item) {
                if (item.match('^[0-9]*$')) {
                    attenVal.push(item.match('^[0-9]*$')[0]);
                }
            });
            attenVal.unshift("BT Attn");
            responseObject.BtAttn = attenVal;

            let WifiAttnArr = ["Wi-Fi Attn", 40];
            let len = WifiAttnArr.length;
            for (let i = len; i < attenVal.length; i++) {
                WifiAttnArr.push(40);
            }
            //responseObject.WifiAttn = ["Wi-Fi Attn", 40, 40, 40, 40, 40, 40];
            responseObject.WifiAttn = WifiAttnArr;

        } else if (project_type == 'COEX-WiFi-RVR') {
            headers = await throughputObj.findHeader("COEX-RVR");
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
            let attn = (Object.keys(kpi[0]));
            _.forEach(attn, function(item) {
                if (item.match('^[0-9]*$')) {
                    attenVal.push(item.match('^[0-9]*$')[0]);
                }
            });
            attenVal.unshift("Wi-Fi Attn");
            responseObject.WifiAttn = attenVal;

            let BtAttnArr = ["BT Attn", 40];
            let len = BtAttnArr.length;
            for (let i = len; i < attenVal.length; i++) {
                BtAttnArr.push(40);
            }
            //responseObject.BtAttn = ["BT Attn", 40, 40, 40, 40, 40, 40];
            responseObject.BtAttn = BtAttnArr;

        } else if (project_type == 'COEX-BT-WiFi-RVR') {
            headers = await throughputObj.findHeader("COEX-RVR");
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
            let attn = (Object.keys(kpi[0]));
            _.forEach(attn, function(item) {
                if (item.match('^[0-9]*$')) {
                    attenVal.push(item.match('^[0-9]*$')[0]);
                }
            });
            attenVal.unshift("BT Attn");
            responseObject.BtAttn = attenVal;
            let WifiAtn = [...attenVal];
            WifiAtn[0] = "Wi-Fi Attn";
            responseObject.WifiAttn = WifiAtn;
        } else if (project_type == 'BT-Throughput') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'BLE-Throughput') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'BT-MOS') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'BT-Dual-HFP') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'CC') {
            let t_id = _.pluck(kpi, "Test_case_Id");
            const simpleSort = Array.from(t_id).sort();
            for (let id of simpleSort) {
                kpi.filter(function(item) {
                    if (item.Test_case_Id == id) {
                        arr.push(item);
                    }
                })
            }
            kpi = arr;
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'DFS') {
            let t_id = _.pluck(kpi, "Test_case_Id");
            const simpleSort = Array.from(t_id).sort();
            for (let id of simpleSort) {
                kpi.filter(function(item) {
                    if (item.Test_case_Id == id) {
                        arr.push(item);
                    }
                })
            }
            for (let item of kpi) {
                let attenuationVal = (Object.keys(item));
                _.forEach(attenuationVal, function(item2) {
                    if (item2.match('^[0-9]*$')) {
                        val.push(Number(item2.match('^[0-9]*$')[0]));
                    }
                });
                let Un = _.uniq(val);
                uniqVal = Un.sort((a, b) => a - b);
            }
            responseObject.attenuation = uniqVal;
            kpi = arr;
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'BLE-RvR') {
            for (let item of kpi) {
                let attenuationVal = (Object.keys(item));
                _.forEach(attenuationVal, function(item2) {
                    if (item2.match('^[0-9]*$')) {
                        val.push(Number(item2.match('^[0-9]*$')[0]));
                    }
                });
                let Un = _.uniq(val);
                uniqVal = Un.sort((a, b) => a - b);
            }
            responseObject.attenuation = uniqVal;

            let table = await BleRvrTables(kpi);
            kpi = table;
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;

        } else if (project_type == 'LE-Long-Range-RvR') {
            for (let item of kpi) {
                let attenuationVal = (Object.keys(item));
                _.forEach(attenuationVal, function(item2) {
                    if (item2.match('^[0-9]*$')) {
                        val.push(Number(item2.match('^[0-9]*$')[0]));
                    }
                });
                let Un = _.uniq(val);
                uniqVal = Un.sort((a, b) => a - b);
            }
            responseObject.attenuation = uniqVal;

            let table = await LongRangeRvrTables(kpi);
            kpi = table;
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;

        } else if (project_type == 'BT-RvR') {
            for (let item of kpi) {
                let attenuationVal = (Object.keys(item));
                _.forEach(attenuationVal, function(item2) {
                    if (item2.match('^[0-9]*$')) {
                        val.push(Number(item2.match('^[0-9]*$')[0]));
                    }
                });
                let Un = _.uniq(val);
                uniqVal = Un.sort((a, b) => a - b);
            }
            responseObject.attenuation = uniqVal;

            let table = await BtRvrTables(kpi);
            kpi = table;
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;

        } else if (project_type == 'WACP_Wifi') {
            let t_id = _.pluck(kpi, "Test_case_Id");
            const simpleSort = Array.from(t_id).sort();
            for (let id of simpleSort) {
                kpi.filter(function(item) {
                    if (item.Test_case_Id == id) {
                        arr.push(item);
                    }
                })
            }
            kpi = arr;
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'WACP_Coex') {
            let t_id = _.pluck(kpi, "Test_case_Id");
            const simpleSort = Array.from(t_id).sort();
            for (let id of simpleSort) {
                kpi.filter(function(item) {
                    if (item.Test_case_Id == id) {
                        arr.push(item);
                    }
                })
            }
            kpi = arr;
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else {
            responseObject.projectType = null;
            console.log("Different project type");
        }

        responseObject.data = kpi;
        responseObject.templates = project_type_arr;
        res.json(responseObject);

    } catch (error) {
        logger.error("getThroughputTableData:", error);
        responseError(res, responseObject, "Error in getting the Throughput Data.");

    }
}


/*
    This method receives the throughput data for each testcase executed from the testbed
*/
routes.prototype.compareThroughputData = async function(req, res) {
    let headers = [];
    let responseObject = {
        status: true,
        data: {},
        values: [],
        keys: []
    };

    try {
        let val = [],
            kpi = [];
        let attenuationVal;
        let uniqVal;
        let executions = [];
        let testCompareObjects;
        let results = req.body.execution_id;
        let benchmark_project_type = req.body.benchmark_project_type;
        let query = req.body.query;
        let benchmarkQuery = _.clone(query[0]);
        let project_type_arr = [];

        console.log("req.query -->", query[0]);

        if (results.length > 10) {
            throw "ERR100";
        }

        let execution = await throughputObj.getThroughputDataByQuery(query[0]);
        console.log("Total Execution -->", execution.length);

        for (let item of execution) {
            attenuationVal = (Object.keys(item));
            _.forEach(attenuationVal, function(item) {
                if (item.match('^[0-9]*$')) {
                    val.push(Number(item.match('^[0-9]*$')[0]));
                }
            });
            let Un = _.uniq(val);
            uniqVal = Un.sort((a, b) => a - b);
            //console.log("unique", uniqVal);
        }

        var get_executions = _.groupBy(execution, function(item) {
            return item.execution_id;
        });

        for (let executionID of results) {
            executions.push(get_executions[executionID]);
        }

        let execution_array = executions;
        executions = _.flatten(executions);

        //console.log("executions -->", executions);
        console.log("Executions -->", executions.length);

        if (execution.length != 1) {
            project_type_arr = _.pluck(_.uniq(_.union(executions), false, _.property('project_type')), 'project_type');
            project_type_arr = _.uniq(project_type_arr);
        } else {
            executions = _.without(_.uniq(executions), null, '', undefined);
            project_type_arr.push(executions[0].project_type);
        }

        let project_type = project_type_arr[req.body.project_type];

        if (typeof project_type == 'undefined') {
            project_type = benchmark_project_type;
            project_type_arr.push(benchmark_project_type);
        }

        if (typeof benchmark_project_type == 'undefined') {
            benchmark_project_type = project_type_arr[0];
        }


        console.log("templates : ", project_type_arr);

        benchmarkQuery = _.omit(benchmarkQuery, 'execution_id');
        benchmarkQuery = _.extend(benchmarkQuery, { project_type: benchmark_project_type, isBenchmark: true });
        console.log("\nreq.benchmarkQuery -->", benchmarkQuery);


        if (project_type == 'RvR') {
            executions = _.where(executions, { project_type: project_type });
            testCompareObjects = await compareRvrData(executions);
            _.forEach(uniqVal, function(item) {
                headers.push(item.toString());
            })

            responseObject.data = testCompareObjects;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            responseObject.attenuation = uniqVal;
            responseObject.keys = headers.keys;

            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'RVR-SCBT') {
            executions = _.where(executions, { project_type: project_type });
            testCompareObjects = await compareRvrData(executions);
            _.forEach(uniqVal, function(item) {
                headers.push(item.toString());
            })

            responseObject.data = testCompareObjects;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader('RvR');
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            responseObject.attenuation = uniqVal;

            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'REVERB-OTA-REVERSE-RVR') {
            executions = _.where(executions, { project_type: project_type });
            testCompareObjects = await compareReverseRvrData(executions);
            responseObject.data = testCompareObjects;
            responseObject.projectType = project_type;
            responseObject.attenuation = uniqVal;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = [];
            responseObject.headers.push(headers.header, uniqVal);
            responseObject.keys = headers.keys;

            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'TP') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;

            let etp = await throughputObj.findThroughputData({ "TP TYPE": "ETP" });
            let ttp = await throughputObj.findThroughputData({ "TP TYPE": "TTP" });
            responseObject.values.push(etp, ttp);

            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            responseObject.projectType = 'TP';

            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'Simul-TP-2INTF') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;
            responseObject.projectType = 'Simul-TP-2INTF';
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'Simul-TP-3INTF') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;
            responseObject.projectType = 'Simul-TP-3INTF';
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'Simul-TP-4INTF') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;
            responseObject.projectType = 'Simul-TP-4INTF';
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'IOP-Perf') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;
            responseObject.projectType = 'IOP-Perf';
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'BAT-CABLE-UP') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;
            responseObject.projectType = 'BAT-CABLE-UP';
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

            // } else if (project_type == 'BAT-OTA') {
            //     responseObject.data = execution_array;
            //     responseObject.projectType = 'BAT-OTA';
            //     headers = await throughputObj.findHeader(project_type);
            //     responseObject.headers = headers.header;
            //     let benchmarks = await throughputObj.findThroughputData({ project_type: 'BAT-OTA', isBenchmark: true });
            //     responseObject.benchmarks = benchmarks;

        } else if (project_type == 'MBSS-SCBT') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;
            responseObject.projectType = 'MBSS-SCBT';
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'OFDMA-UL') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;
            responseObject.projectType = 'OFDMA-UL';
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'OFDMA-DL') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;
            responseObject.projectType = 'OFDMA-DL';
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'DL-11ac-MU-MIMO') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;
            responseObject.projectType = 'DL-11ac-MU-MIMO';
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'STA-CPU-Util') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;
            responseObject.projectType = 'STA-CPU-Util';
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'DL-11ax-MU-MIMO') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;
            responseObject.projectType = 'DL-11ax-MU-MIMO';
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'UL-11ax-MU-MIMO') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;
            responseObject.projectType = 'UL-11ax-MU-MIMO';
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'REVERB-OTA-RVR') {
            executions = _.where(executions, { project_type: project_type });
            testCompareObjects = await compareOtaRvrData(executions);
            responseObject.data = testCompareObjects;
            responseObject.projectType = project_type;
            responseObject.attenuation = uniqVal;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = [];
            responseObject.headers.push(headers.header, uniqVal);
            responseObject.keys = headers.keys;

            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'DBC-Cpu-Util') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'IOP-TP') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;
        } else if (project_type == 'STA-Coex-TP') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;
        } else if (project_type == 'P2P-Coex-TP') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader("STA-Coex-TP");
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;
        } else if (project_type == 'MMH-Coex-TP') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader("STA-Coex-TP");
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;
        } else if (project_type == 'Coex-Simul-TP-2INTF') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;
        } else if (project_type == 'Coex-Simul-TP-3INTF') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;
        } else if (project_type == 'COEX-BT-RVR') {
            executions = _.where(executions, { project_type: project_type });
            testCompareObjects = await compareReverseRvrData(executions);
            responseObject.data = testCompareObjects;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader("COEX-RVR");
            uniqVal.unshift("BT Attn");
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            responseObject.BtAttn = uniqVal;

            let WifiAttnArr = ["Wi-Fi Attn", 40];
            let len = WifiAttnArr.length;
            for (let i = len; i < uniqVal.length; i++) {
                WifiAttnArr.push(40);
            }
            //responseObject.WifiAttn = ["Wi-Fi Attn", 40, 40, 40, 40, 40, 40];
            responseObject.WifiAttn = WifiAttnArr;

            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'COEX-WiFi-RVR') {
            executions = _.where(executions, { project_type: project_type });
            testCompareObjects = await compareReverseRvrData(executions);
            responseObject.data = testCompareObjects;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader("COEX-RVR");
            uniqVal.unshift("Wi-Fi Attn");
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            responseObject.WifiAttn = uniqVal;

            let BtAttnArr = ["BT Attn", 40];
            let len = BtAttnArr.length;
            for (let i = len; i < uniqVal.length; i++) {
                BtAttnArr.push(40);
            }
            //responseObject.BtAttn = ["BT Attn", 40, 40, 40, 40, 40, 40];
            responseObject.BtAttn = BtAttnArr;

            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'COEX-BT-WiFi-RVR') {
            executions = _.where(executions, { project_type: project_type });
            testCompareObjects = await compareReverseRvrData(executions);
            responseObject.data = testCompareObjects;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader("COEX-RVR");
            uniqVal.unshift("Wi-Fi Attn");
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            responseObject.WifiAttn = uniqVal;
            let BtAtn = [...uniqVal];
            BtAtn[0] = "BT Attn";
            responseObject.BtAttn = BtAtn;

            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'BT-Throughput') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'BLE-Throughput') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'BT-MOS') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'BT-Dual-HFP') {
            _.each(execution_array, function(x) {
                let data = _.where(x, { project_type: project_type });
                if (data.length) { kpi.push(data); }
            });
            responseObject.data = kpi;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'BLE-RvR') {

            for (let item of execution_array) {
                let attenuationVal = (Object.keys(item));
                _.forEach(attenuationVal, function(item2) {
                    if (item2.match('^[0-9]*$')) {
                        val.push(Number(item2.match('^[0-9]*$')[0]));
                    }
                });
                let Un = _.uniq(val);
                uniqVal = Un.sort((a, b) => a - b);
            }
            responseObject.attenuation = _.without(uniqVal, 0, 1, 2);
            let table = await BleRvrTables(execution_array);
            responseObject.data = table[0];
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'BT-RvR') {

            for (let item of execution_array) {
                let attenuationVal = (Object.keys(item));
                _.forEach(attenuationVal, function(item2) {
                    if (item2.match('^[0-9]*$')) {
                        val.push(Number(item2.match('^[0-9]*$')[0]));
                    }
                });
                let Un = _.uniq(val);
                uniqVal = Un.sort((a, b) => a - b);
            }
            responseObject.attenuation = _.without(uniqVal, 0, 1, 2, 3);
            let table = await BleRvrTables(execution_array);
            responseObject.data = table[0];
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else if (project_type == 'LE-Long-Range-RvR') {

            for (let item of execution_array) {
                let attenuationVal = (Object.keys(item));
                _.forEach(attenuationVal, function(item2) {
                    if (item2.match('^[0-9]*$')) {
                        val.push(Number(item2.match('^[0-9]*$')[0]));
                    }
                });
                let Un = _.uniq(val);
                uniqVal = Un.sort((a, b) => a - b);
            }

            responseObject.attenuation = _.without(uniqVal, 0, 1, 2, 3);
            let table = await LongRangeRvrTables(execution_array);
            responseObject.data = table[0];
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            let benchmarks = await throughputObj.findThroughputData(benchmarkQuery);
            responseObject.benchmarks = benchmarks;

        } else {
            throw "ERR101";
        }

        responseObject.templates = project_type_arr;

        res.json(responseObject);
    } catch (err) {
        logger.error("compareThroughputData:", err);
        if (err == "ERR100") {
            responseError(res, responseObject, "You can compare upto 10 executions at a time!");
        } else if (err == "ERR101") {
            responseObject.data = [];
            responseError(res, responseObject, "Data Not Found!");
        } else {
            responseError(res, responseObject, "Error in comparing the Throughput Data.");
        }
    }

}


/*
    This method compares the throughput data between the specified rows for TP
*/
routes.prototype.compareTPRows = async function(req, res) {
    let responseObject = {
        status: true,
        data: {}
    };
    let results = [];

    try {
        console.log(req.body);
        for (let item of req.body) {
            // console.log(item);
            let temp = [];
            let obj1 = {};
            let obj2 = {};
            let result_1 = await throughputObj.findThroughputDataById(item[1]); //compared with row
            // let execution_name_1 = await executionObj.getExecution(result_1.execution_id);
            _.extend(result_1, { index: item[0] });
            let result_2 = await throughputObj.findThroughputDataById(item[3]); //to be compared row
            // let execution_name_2 = await executionObj.getExecution(result_2.execution_id);
            _.extend(result_2, { index: item[2] }, { compare: item[0] });

            Object.keys(result_1).forEach(key => {
                if (typeof(result_1[key]) === 'object' && result_1[key]) {
                    obj1[key] = result_1[key];
                }
            });

            Object.keys(result_2).forEach(key => {
                if (typeof(result_2[key]) === 'object' && result_2[key]) {
                    obj2[key] = result_2[key];
                }
            });

            _.each(Object.keys(obj1), function(item) {
                _.each(obj2, function(val, index) {
                    if (index == item && index != '_id') {
                        _.map(obj2[item], function(val_1, index_1) {
                            // console.log(obj1[item][index_1] , obj2[item][index_1]);
                            if (obj1[item][index_1]['value'] != null) {
                                let percentage = ((Number(obj2[item][index_1]['value']) - Number(obj1[item][index_1]['value'])) / Number(obj1[item][index_1]['value'])) * 100;
                                percentage = percentage.toFixed(2);
                                return obj2[item][index_1]['percent'] = percentage;
                            }
                        });
                        console.log(obj2[item]);
                    }
                });
            });

            temp.push(result_1, result_2);
            results.push(temp);
        }

        responseObject.data = results;
        res.json(responseObject);
    } catch (err) {
        logger.error("compareTPRows:", err);
        responseError(res, responseObject, "Error in comparing the rows for Throughput Data.");
    }
}


/*
    This method benchmarks the given throughput data
*/
routes.prototype.benchmarkTP = async function(req, res) {
    let responseObject = {
        status: true,
        data: {}
    };

    try {
        console.log(req.body);
        let arr = [];
        _.each(req.body.id, function(val) {
            arr.push(ObjectID(val));
        })

        let query = { _id: { $in: arr } };
        let update = {
            isBenchmark: true,
            benchmark_label: req.body.label,
            user: req.body.user,
            benchmark_time: Date.now()
        };
        let options = { upsert: true };

        await throughputObj.updateThroughput(query, update, options);

        responseObject.message = "Benchmarked values successfully!";
        auth.traceUserActivity(req, responseObject, "Create");
        res.json(responseObject);
    } catch (err) {
        logger.error("benchmarkTP:", err);
        responseError(res, responseObject, "Error in benchmarking the Throughput Data.");
    }
}


routes.prototype.storeTPData = async function(req, res) {
    let responseObject = {
        status: true,
        data: {}
    };

    try {

        await getTPData(req.body);
        res.json(responseObject);
    } catch (err) {
        logger.error("getTPData:", err);
        responseError(res, responseObject, "Error in updating the TP Data.");
    }

}


async function getTPData(body) {
    try {
        let tpObj = {

            "TP TYPE": body.tpFormat
        }
        let tpType = '';
        let tpVal = '';
        let tpTypeValue = '';
        let update;


        if (body.tpFormat == "ETP" || body.tpFormat == "TTP") {
            for (let index = 0; index < body.data.length; index++) {
                let mode = {
                    Tcp_Tx: { value: body.data[index].TCP_Tx, percent: null },
                    Tcp_Rx: { value: body.data[index].TCP_Rx, percent: null },
                    Udp_Tx: { value: body.data[index].UDP_Tx, percent: null },
                    Udp_Rx: { value: body.data[index].UDP_Rx, percent: null }
                };

                tpType = body.data[index].name;
                tpVal = tpType.split("_")[0];
                tpTypeValue = tpType.split("_")[1];

                if (tpTypeValue == '5GHz') {
                    tpObj = _.extend(tpObj, {
                        [tpVal + '|Channel 5GHz']: mode
                    });
                    update = {
                        [tpVal + '|Channel 5GHz']: mode
                    };

                } else {
                    tpObj = _.extend(tpObj, {
                        [tpVal + '|Channel 2GHz']: mode
                    });
                    update = {
                        [tpVal + '|Channel 2GHz']: mode
                    };
                }

            }

            let query = _.omit(tpObj, [
                [tpVal + '|Channel 5GHz'],
                [tpVal + '|Channel 2GHz'], 'Channel 5GHz', 'Channel 2GHz'
            ]);
            let options = { upsert: true };
            await throughputObj.updateThroughput(query, update, options);

            let r = await throughputObj.findThroughputData(query);
            console.log(r);

            console.log("Stored TP data Successfully")
        } else {

            console.log("TP TYPE is neither ETP nor TTP");
        }

    } catch (err) {
        logger.error("tpData error : ", err);
    }
}


/*
    This method removes the given benchmarked throughput values
*/
routes.prototype.removeBenchmark = async function(req, res) {
    let responseObject = {
        status: true,
        data: {}
    };

    try {
        console.log(req.body);
        let ids = [];
        _.each(req.body.id, function(val) {
            ids.push(ObjectID(val));
        })

        let query = { _id: { $in: ids } };
        let update = { isBenchmark: false };
        let options = { upsert: true };

        await throughputObj.updateThroughput(query, update, options);

        responseObject.message = "Removed Benchmarked values successfully!";
        auth.traceUserActivity(req, responseObject, "Delete");
        res.json(responseObject);
    } catch (err) {
        logger.error("removeBenchmark:", err);
        responseError(res, responseObject, "Error in removing the benchmarked results");
    }
}


/*
    This method returns the queried benchmarked throughput values
*/
routes.prototype.getBenchmarks = async function(req, res) {
    let responseObject = {
        status: true,
        data: {}
    };

    let headers, uniqVal;
    var attenVal = [],
        val = [];
    let query;
    //let headersVal = '';

    try {
        console.log(req.query);

        if (req.query.label == '') {
            query = { project_type: req.query.projectType, isBenchmark: true };
        } else {
            query = { project_type: req.query.projectType, isBenchmark: true, benchmark_label: req.query.label };
        }

        let kpiData = await throughputObj.findThroughputData(query);

        let project_type_arr = _.pluck(_.uniq(_.union(kpiData), false, _.property('project_type')), 'project_type');
        project_type_arr = _.uniq(project_type_arr);
        console.log("Templates : ", project_type_arr);

        project_type = project_type_arr[0];
        kpi = _.where(kpiData, { project_type: project_type });


        if (project_type == 'RvR' || project_type == 'RVR-SCBT') {
            headers = await throughputObj.findHeader('RvR');
            for (let item of kpi) {
                let attenuationVal = (Object.keys(item));
                _.forEach(attenuationVal, function(item2) {
                    if (item2.match('^[0-9]*$')) {
                        val.push(Number(item2.match('^[0-9]*$')[0]));
                    }
                });
                let Un = _.uniq(val);
                uniqVal = Un.sort((a, b) => a - b);
            }

            responseObject.headers = headers.header;
            responseObject.attenuation = uniqVal;
            responseObject.projectType = project_type;
        } else if (project_type == 'TP') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'Simul-TP-2INTF') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'Simul-TP-3INTF') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'Simul-TP-4INTF') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'BAT-CABLE-UP') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'IOP-Perf') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'BAT-OTA') {
            headers = await throughputObj.findHeader('BAT-CABLE-UP'); // Both Template Headers are same
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'MBSS-SCBT') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'OFDMA-UL') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'OFDMA-DL') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'DL-11ac-MU-MIMO') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'DL-11ax-MU-MIMO') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'UL-11ax-MU-MIMO') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'STA-CPU-Util') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'REVERB-OTA-RVR') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            let attenuationDeg = (Object.keys(kpi[0]));
            _.forEach(attenuationDeg, function(item) {
                if (item.match('^[0-9]*$')) {
                    attenVal.push(item.match('^[0-9]*$')[0]);
                }
            });
            responseObject.headers = [];
            responseObject.headers.push(headers.header, attenVal);
        } else if (project_type == 'REVERB-OTA-REVERSE-RVR') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            let attenuationDeg = (Object.keys(kpi[0]));
            _.forEach(attenuationDeg, function(item) {
                if (item.match('^[0-9]*$')) {
                    attenVal.push(item.match('^[0-9]*$')[0]);
                }
            });
            responseObject.headers = [];
            responseObject.headers.push(headers.header, attenVal);
        } else if (project_type == 'DBC-Cpu-Util') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'IOP-TP') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'STA-Coex-TP') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'P2P-Coex-TP') {
            headers = await throughputObj.findHeader("STA-Coex-TP");
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'MMH-Coex-TP') {
            headers = await throughputObj.findHeader("STA-Coex-TP");
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'Coex-Simul-TP-2INTF') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'Coex-Simul-TP-3INTF') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'COEX-BT-RVR') {
            headers = await throughputObj.findHeader("COEX-RVR");
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
            let attn = (Object.keys(kpi[0]));
            _.forEach(attn, function(item) {
                if (item.match('^[0-9]*$')) {
                    attenVal.push(item.match('^[0-9]*$')[0]);
                }
            });
            attenVal.unshift("BT Attn");
            responseObject.BtAttn = attenVal;

            let WifiAttnArr = ["Wi-Fi Attn", 40];
            let len = WifiAttnArr.length;
            for (let i = len; i < attenVal.length; i++) {
                WifiAttnArr.push(40);
            }
            //responseObject.WifiAttn = ["Wi-Fi Attn", 40, 40, 40, 40, 40, 40];
            responseObject.WifiAttn = WifiAttnArr;

        } else if (project_type == 'COEX-WiFi-RVR') {
            headers = await throughputObj.findHeader("COEX-RVR");
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
            let attn = (Object.keys(kpi[0]));
            _.forEach(attn, function(item) {
                if (item.match('^[0-9]*$')) {
                    attenVal.push(item.match('^[0-9]*$')[0]);
                }
            });
            attenVal.unshift("Wi-Fi Attn");
            responseObject.WifiAttn = attenVal;

            let BtAttnArr = ["BT Attn", 40];
            let len = BtAttnArr.length;
            for (let i = len; i < attenVal.length; i++) {
                BtAttnArr.push(40);
            }
            //responseObject.BtAttn = ["BT Attn", 40, 40, 40, 40, 40, 40];
            responseObject.BtAttn = BtAttnArr;

        } else if (project_type == 'COEX-BT-WiFi-RVR') {
            headers = await throughputObj.findHeader("COEX-RVR");
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
            let attn = (Object.keys(kpi[0]));
            _.forEach(attn, function(item) {
                if (item.match('^[0-9]*$')) {
                    attenVal.push(item.match('^[0-9]*$')[0]);
                }
            });
            attenVal.unshift("BT Attn");
            responseObject.BtAttn = attenVal;
            let WifiAtn = [...attenVal];
            WifiAtn[0] = "Wi-Fi Attn";
            responseObject.WifiAttn = WifiAtn;
        } else if (project_type == 'BT-Throughput') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'BLE-Throughput') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'BT-MOS') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'BT-Dual-HFP') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'CC') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'BLE-RvR') {
            for (let item of kpi) {
                let attenuationVal = (Object.keys(item));
                _.forEach(attenuationVal, function(item2) {
                    if (item2.match('^[0-9]*$')) {
                        val.push(Number(item2.match('^[0-9]*$')[0]));
                    }
                });
                let Un = _.uniq(val);
                uniqVal = Un.sort((a, b) => a - b);
            }
            responseObject.attenuation = uniqVal;

            let table = await BleRvrTables(kpi);
            kpi = table;
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;

        } else if (project_type == 'LE-Long-Range-RvR') {
            for (let item of kpi) {
                let attenuationVal = (Object.keys(item));
                _.forEach(attenuationVal, function(item2) {
                    if (item2.match('^[0-9]*$')) {
                        val.push(Number(item2.match('^[0-9]*$')[0]));
                    }
                });
                let Un = _.uniq(val);
                uniqVal = Un.sort((a, b) => a - b);
            }
            responseObject.attenuation = uniqVal;

            let table = await LongRangeRvrTables(kpi);
            kpi = table;
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;

        } else if (project_type == 'BT-RvR') {
            for (let item of kpi) {
                let attenuationVal = (Object.keys(item));
                _.forEach(attenuationVal, function(item2) {
                    if (item2.match('^[0-9]*$')) {
                        val.push(Number(item2.match('^[0-9]*$')[0]));
                    }
                });
                let Un = _.uniq(val);
                uniqVal = Un.sort((a, b) => a - b);
            }
            responseObject.attenuation = uniqVal;

            let table = await BtRvrTables(kpi);
            kpi = table;
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;

        } else {
            responseObject.projectType = null;
            console.log("Different project type");
        }

        responseObject.data = kpi;
        responseObject.size = kpi.length;
        responseObject.templates = project_type_arr;
        res.json(responseObject);

    } catch (err) {
        logger.error("getBenchmarks:", err);
        responseError(res, responseObject, "Error in getting the benchmarked results");
    }
}


/*
    This method to show combined throughput data to Smart Marge for each testcase executed from the testbed
*/
routes.prototype.smartMergeThroughputData = async function(req, res) {
    let headers = [];

    let responseObject = {
        status: true,
        data: {},
        values: []
    };

    try {
        let val = [];
        let attenuationVal;
        let uniqVal;
        let executions = [];
        let results = req.body.execution_id;
        let smartMergeObj = '';
        let updateSmartMergeObj = [];

        if (results.length > 5) {
            throw "ERR100";
        }

        for (let value of results) {
            let execution = await throughputObj.getThroughputData(value);
            console.log("\n Execution Length -->", execution.length);

            let execution_name = await executionObj.getExecution(value);
            for (let item of execution) {
                item = _.extend(item, { executionName: execution_name[0].name });
                attenuationVal = (Object.keys(item));
                _.forEach(attenuationVal, function(item) {
                    if (item.match('^[0-9]*$')) {
                        val.push(Number(item.match('^[0-9]*$')[0]));
                        // val.push((Number(item.match('^[0-9]*$')[0]) + 1));
                    }
                });
                let Un = _.uniq(val);
                uniqVal = Un.sort((a, b) => a - b);
            }
            executions.push(execution);
        }

        // let execution_array = executions;
        executions = _.flatten(executions);

        console.log("\n Total Execution Length -->", executions.length);

        let project_type_arr = _.pluck(_.uniq(_.union(executions), false, _.property('project_type')), 'project_type');
        project_type_arr = _.uniq(project_type_arr);
        let project_type = project_type_arr[req.body.project_type];

        console.log("project_type --", project_type);
        if (project_type == 'RvR') {
            executions = _.where(executions, { project_type: project_type });
            let mergedData = await mergeRvRData(uniqVal, executions, project_type);
            responseObject.data = mergedData;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.attenuation = uniqVal;

        } else if (project_type == 'RVR-SCBT') {
            executions = _.where(executions, { project_type: project_type });
            let mergedData = await mergeRvRData(uniqVal, executions, 'RvR');
            responseObject.data = mergedData;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader('RvR');
            responseObject.headers = headers.header;
            responseObject.attenuation = uniqVal;

        } else if (project_type == 'TP') {
            executions = _.where(executions, { project_type: project_type });
            smartMergeObj = await smartMergeCompareTPData(executions);
            updateSmartMergeObj = await updateMaxValue(smartMergeObj);
            responseObject.data = updateSmartMergeObj;
            let etp = await throughputObj.findThroughputData({ "TP TYPE": "ETP" });
            let ttp = await throughputObj.findThroughputData({ "TP TYPE": "TTP" });
            responseObject.values.push(etp, ttp);
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader('TP');
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;

        } else if (project_type == 'Simul-TP-2INTF') {
            executions = _.where(executions, { project_type: project_type });
            smartMergeObj = await smartMergeCompare2INFData(executions);
            updateSmartMergeObj = await updateMaxValue2INFData(smartMergeObj);
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.data = updateSmartMergeObj;
            responseObject.projectType = project_type;

        } else if (project_type == 'Simul-TP-3INTF') {
            executions = _.where(executions, { project_type: project_type });
            smartMergeObj = await merge3INTFData(executions);
            updateSmartMergeObj = await updateStatus3INTF(smartMergeObj);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

        } else if (project_type == 'BAT-CABLE-UP') {
            executions = _.where(executions, { project_type: project_type });
            smartMergeObj = await smartMergeCompareBatCableUpData(executions);
            updateSmartMergeObj = await updateMaxValue(smartMergeObj);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

            /*} else if (project_type == 'BAT-OTA') {
                executions = _.where(executions, { project_type: project_type });
                smartMergeObj = await smartMergeCompareBatCableUpData(executions);
                updateSmartMergeObj = await updateMaxValue(smartMergeObj);
                responseObject.data = updateSmartMergeObj;
                headers = await throughputObj.findHeader(project_type);
                responseObject.headers = headers.header;
                responseObject.projectType = 'BAT-OTA';*/

        } else if (project_type == 'MBSS-SCBT') {
            executions = _.where(executions, { project_type: project_type });
            smartMergeObj = await smartMergeCompareMbssScbtData(executions);
            updateSmartMergeObj = await updateMaxValue(smartMergeObj);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

        } else if (project_type == 'IOP-Perf') {
            executions = _.where(executions, { project_type: project_type });
            smartMergeObj = await smartMergeCompareIopPerfData(executions);
            updateSmartMergeObj = await updateMaxValue(smartMergeObj);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

        } else if (project_type == 'REVERB-OTA-REVERSE-RVR') {
            executions = _.where(executions, { project_type: project_type });
            let mergedData = await mergeRvRData(uniqVal, executions, project_type);
            responseObject.data = mergedData;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.attenuation = uniqVal;

        } else if (project_type == 'REVERB-OTA-RVR') {
            executions = _.where(executions, { project_type: project_type });
            let mergedData = await mergeRvRData(uniqVal, executions, project_type);
            responseObject.data = mergedData;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.attenuation = uniqVal;

        } else if (project_type == 'OFDMA-UL') {
            executions = _.where(executions, { project_type: project_type });
            let mergedData = await ofdmaUlMerge(executions);
            headers = await throughputObj.findHeader(project_type);
            responseObject.data = mergedData;
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;

        } else if (project_type == 'OFDMA-DL') {
            executions = _.where(executions, { project_type: project_type });
            let mergedData = await ofdmaDlMerge(executions);
            headers = await throughputObj.findHeader(project_type);
            responseObject.data = mergedData;
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;

        } else if (project_type == 'DBC-Cpu-Util') {
            executions = _.where(executions, { project_type: project_type });
            let mergedData = await smartMergeCompareDbcCpuUtilData(executions);
            headers = await throughputObj.findHeader(project_type);
            responseObject.data = mergedData;
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;

        } else if (project_type == 'IOP-TP') {
            executions = _.where(executions, { project_type: project_type });
            smartMergeObj = await smartMergeCompareIopTpData(executions);
            updateSmartMergeObj = await updateMaxValue(smartMergeObj);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

        } else if (project_type == 'UL-11ax-MU-MIMO') {
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await Ul11axMuMimoMerge(executions);
            updateSmartMergeObj = await updateMaxValueMuMimoData(smartMergeObj);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

        } else if (project_type == 'DL-11ax-MU-MIMO') {
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await Dl11axMuMimoMerge(executions);
            updateSmartMergeObj = await updateMaxValueMuMimoData(smartMergeObj);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

        } else if (project_type == 'DL-11ac-MU-MIMO') {
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await Dl11acMuMimoMerge(executions);
            updateSmartMergeObj = await updateMaxValueMuMimoData(smartMergeObj);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

        } else if (project_type == 'COEX-BT-RVR') {
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await mergeCoexRvr(executions);
            updateSmartMergeObj = await updateStatusCoexRvr(smartMergeObj, uniqVal);
            responseObject.data = updateSmartMergeObj;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader("COEX-RVR");
            uniqVal.unshift("BT Attn");
            responseObject.headers = headers.header;
            responseObject.BtAttn = uniqVal;

            let WifiAttnArr = ["Wi-Fi Attn", 40];
            let len = WifiAttnArr.length;
            for (let i = len; i < uniqVal.length; i++) {
                WifiAttnArr.push(40);
            }
            //responseObject.WifiAttn = ["Wi-Fi Attn", 40, 40, 40, 40, 40, 40];
            responseObject.WifiAttn = WifiAttnArr;

        } else if (project_type == 'COEX-WiFi-RVR') {
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await mergeCoexRvr(executions);
            updateSmartMergeObj = await updateStatusCoexRvr(smartMergeObj, uniqVal);
            responseObject.data = updateSmartMergeObj;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader("COEX-RVR");
            uniqVal.unshift("Wi-Fi Attn");
            responseObject.headers = headers.header;
            responseObject.WifiAttn = uniqVal;

            let BtAttnArr = ["BT Attn", 40];
            let len = BtAttnArr.length;
            for (let i = len; i < uniqVal.length; i++) {
                BtAttnArr.push(40);
            }
            //responseObject.BtAttn = ["BT Attn", 40, 40, 40, 40, 40, 40];
            responseObject.BtAttn = BtAttnArr;

        } else if (project_type == 'COEX-BT-WiFi-RVR') {
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await mergeCoexRvr(executions);
            updateSmartMergeObj = await updateStatusCoexRvr(smartMergeObj, uniqVal);
            responseObject.data = updateSmartMergeObj;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader("COEX-RVR");
            uniqVal.unshift("Wi-Fi Attn");
            responseObject.headers = headers.header;
            responseObject.WifiAttn = uniqVal;
            let BtAtn = [...uniqVal];
            BtAtn[0] = "BT Attn";
            responseObject.BtAttn = BtAtn;

        } else if (project_type == 'STA-Coex-TP') {
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await smartMergeCompareStaCoexTpData(executions);
            updateSmartMergeObj = await updateMaxValueStaCoexTpData(smartMergeObj);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

        } else if (project_type == 'MMH-Coex-TP') {
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await smartMergeCompareStaCoexTpData(executions);
            updateSmartMergeObj = await updateMaxValueStaCoexTpData(smartMergeObj);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader('STA-Coex-TP');
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

        } else if (project_type == 'P2P-Coex-TP') {
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await smartMergeCompareStaCoexTpData(executions);
            updateSmartMergeObj = await updateMaxValueStaCoexTpData(smartMergeObj);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader('STA-Coex-TP');
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

        } else if (project_type == 'BT-Throughput') {
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await smartMergeCompareBtThroughputData(executions);
            updateSmartMergeObj = await updateMaxValueBtThroughputData(smartMergeObj);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader('BT-Throughput');
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

        } else if (project_type == 'BT-MOS') {
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await smartMergeCompareBtMosData(executions);
            updateSmartMergeObj = await updateMaxValueBtMosData(smartMergeObj);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader('BT-MOS');
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

        } else if (project_type == 'BT-Dual-HFP') { //Smart Merge
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await smartMergeCompareBTDualHFP(executions);
            updateSmartMergeObj = await updateMaxValueBTDualHFP(smartMergeObj);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader('BT-Dual-HFP');
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

        } else if (project_type == 'STA-CPU-Util') { // Smart Merge
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await smartMergeCompareSTACPUUtil(executions);
            let modifiedData = await modifySTACPUUtilData(smartMergeObj);
            updateSmartMergeObj = await updateMaxValueSTACPUUtil(modifiedData);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader('STA-CPU-Util');
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            responseObject.projectType = project_type;

        } else if (project_type == 'Coex-Simul-TP-2INTF') { // Smart Merge
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await smartMergeCompareCoex2INTFData(executions);
            console.log("smartMergeObj -->", smartMergeObj.length);
            updateSmartMergeObj = await updateMaxValueCoex2INTFData(smartMergeObj);
            console.log("updateSmartMergeObj -->", updateSmartMergeObj.length);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader('Coex-Simul-TP-2INTF');
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;
        }
        responseObject.templates = project_type_arr;
        res.json(responseObject);
    } catch (err) {
        logger.error("smartMergeThroughputData: ", err);
        if (err == "ERR100") {
            responseObject.status = false;
            responseObject.message = "You can compare upto 5 executions at a time!";
        } else {
            responseObject.status = false;
            responseObject.message = "This Execution Name already exists!";
        }
        res.json(responseObject);
        //responseError(res, responseObject, "Error in merging the Throughput Data.");
    }

}


/* Function to compare multiple STA-Coex-Tp execution data */
async function smartMergeCompareStaCoexTpData(executions) {
    try {
        let uniqTpType = _.pluck(_.uniq(_.union(executions), false, _.property('TP TYPE')), 'TP TYPE');
        let uniqDut = _.pluck(_.uniq(_.union(executions), false, _.property('DUT')), 'DUT');
        let uniqSocVer = _.pluck(_.uniq(_.union(executions), false, _.property('SoC Version')), 'SoC Version');
        let uniqSocType = _.pluck(_.uniq(_.union(executions), false, _.property('SoC TYPE')), 'SoC TYPE');
        let uniqDutFwDrv = _.pluck(_.uniq(_.union(executions), false, _.property('DUT Fw/Drv')), 'DUT Fw/Drv');
        let uniqInterface = _.pluck(_.uniq(_.union(executions), false, _.property('Interface')), 'Interface');
        let uniqAggre = _.pluck(_.uniq(_.union(executions), false, _.property('Aggregation')), 'Aggregation');
        let uniqSpatialStreams = _.pluck(_.uniq(_.union(executions), false, _.property('Spatial Streams')), 'Spatial Streams');
        let uniqGuardInterv = _.pluck(_.uniq(_.union(executions), false, _.property('Guard Interval')), 'Guard Interval');
        let uniqDateRate = _.pluck(_.uniq(_.union(executions), false, _.property('Data Rate')), 'Data Rate');
        let uniqChanl2 = _.pluck(_.uniq(_.union(executions), false, _.property('Channel | 2 GHz')), 'Channel | 2 GHz');
        let uniqChanl5 = _.pluck(_.uniq(_.union(executions), false, _.property('Channel | 5 GHz')), 'Channel | 5 GHz');
        let uniqSdioClock = _.pluck(_.uniq(_.union(executions), false, _.property('SDIO Clock')), 'SDIO Clock');
        let uniqCompDevice = _.pluck(_.uniq(_.union(executions), false, _.property('Companion Device/')), 'Companion Device/');
        let uniqCompDeviceFwDrv = _.pluck(_.uniq(_.union(executions), false, _.property('Companion Device FW/Drv')), 'Companion Device FW/Drv');
        let uniqHostPlatform = _.pluck(_.uniq(_.union(executions), false, _.property('Host Platform')), 'Host Platform');
        let uniqOs = _.pluck(_.uniq(_.union(executions), false, _.property('OS')), 'OS');
        let uniqSecurity = _.pluck(_.uniq(_.union(executions), false, _.property('Security')), 'Security');
        let uniqBtRef = _.pluck(_.uniq(_.union(executions), false, _.property('BT Ref')), 'BT Ref');
        let uniqCoexMode = _.pluck(_.uniq(_.union(executions), false, _.property('Coex mode')), 'Coex mode');
        let uniqAntIsolation = _.pluck(_.uniq(_.union(executions), false, _.property('ANT isolation')), 'ANT isolation');
        let uniqBtProfiles = _.pluck(_.uniq(_.union(executions), false, _.property('BT profiles')), 'BT profiles');
        let uniqBtBleRole = _.pluck(_.uniq(_.union(executions), false, _.property('BT/BLE Role')), 'BT/BLE Role');
        let uniqProfileParam = _.pluck(_.uniq(_.union(executions), false, _.property('Profile Param')), 'Profile Param');
        let uniqConnectionParam = _.pluck(_.uniq(_.union(executions), false, _.property('Connection param')), 'Connection param');
        let uniqBtSniff = _.pluck(_.uniq(_.union(executions), false, _.property('BT Sniff')), 'BT Sniff');
        let uniqTestDuration = _.pluck(_.uniq(_.union(executions), false, _.property('Test Duration')), 'Test Duration');
        //let uniqTestRepetition = _.pluck(_.uniq(_.union(executions), false, _.property('Test Repetition')), 'Test Repetition');

        let testCompareObjects = [];

        _.each(uniqTpType, function(item) { // 0th iteration 
                let commonItems = _.filter(executions, function(k) { return k['TP TYPE'] == item; })

                _.each(uniqDut, function(item2) { // 1th iteration
                    let commonItems2 = _.filter(commonItems, function(k) { return k['DUT'] == item2; })

                    _.each(uniqSocType, function(item3) { // 2th iteration
                        let commonItems3 = _.filter(commonItems2, function(k) { return k['SoC TYPE'] == item3; })

                        _.each(uniqSocVer, function(item4) { // 3th iteration
                            let commonItems4 = _.filter(commonItems3, function(k) { return k['SoC Version'] == item4; })

                            _.each(uniqDutFwDrv, function(item5) { // 4th iteration
                                let commonItems5 = _.filter(commonItems4, function(k) { return k['DUT Fw/Drv'] == item5; })

                                _.each(uniqInterface, function(item6) { // 5th iteration
                                    let commonItems6 = _.filter(commonItems5, function(k) { return k['Interface'] == item6; })

                                    _.each(uniqAggre, function(item7) { // 6th iteration
                                        let commonItems7 = _.filter(commonItems6, function(k) { return k['Aggregation'] == item7; })

                                        _.each(uniqSpatialStreams, function(item8) { // 7th iteration
                                            let commonItems8 = _.filter(commonItems7, function(k) { return k['Spatial Streams'] == item8; })

                                            _.each(uniqGuardInterv, function(item9) { // 8th iteration
                                                let commonItems9 = _.filter(commonItems8, function(k) { return k['Guard Interval'] == item9; })

                                                _.each(uniqDateRate, function(item10) { // 9th iteration
                                                    let commonItems10 = _.filter(commonItems9, function(k) { return k['Data Rate'] == item10; })

                                                    _.each(uniqChanl2, function(item11) { // 10th iteration
                                                        let commonItems11 = _.filter(commonItems10, function(k) { return k['Channel | 2 GHz'] == item11; })

                                                        _.each(uniqChanl5, function(item12) { // 11th iteration
                                                            let commonItems12 = _.filter(commonItems11, function(k) { return k['Channel | 5 GHz'] == item12; })

                                                            _.each(uniqSdioClock, function(item13) { // 12th iteration
                                                                let commonItems13 = _.filter(commonItems12, function(k) { return k['SDIO Clock'] == item13; })

                                                                _.each(uniqCompDevice, function(item14) { // 13th iteration
                                                                    let commonItems14 = _.filter(commonItems13, function(k) { return k['Companion Device/'] == item14; })

                                                                    _.each(uniqCompDeviceFwDrv, function(item15) { // 14th iteration
                                                                        let commonItems15 = _.filter(commonItems14, function(k) { return k['Companion Device FW/Drv'] == item15; })

                                                                        _.each(uniqHostPlatform, function(item16) { // 15th iteration
                                                                            let commonItems16 = _.filter(commonItems15, function(k) { return k['Host Platform'] == item16; })

                                                                            _.each(uniqOs, function(item17) { // 16th iteration
                                                                                let commonItems17 = _.filter(commonItems16, function(k) { return k['OS'] == item17; })

                                                                                _.each(uniqSecurity, function(item18) { // 17th iteration
                                                                                    let commonItems18 = _.filter(commonItems17, function(k) { return k['Security'] == item18; })

                                                                                    _.each(uniqBtRef, function(item19) { // 18th iteration
                                                                                        let commonItems19 = _.filter(commonItems18, function(k) { return k['BT Ref'] == item19; })

                                                                                        _.each(uniqCoexMode, function(item20) { // 19th iteration
                                                                                            let commonItems20 = _.filter(commonItems19, function(k) { return k['Coex mode'] == item20; })

                                                                                            _.each(uniqAntIsolation, function(item21) { // 20th iteration
                                                                                                let commonItems21 = _.filter(commonItems20, function(k) { return k['ANT isolation'] == item21; })

                                                                                                _.each(uniqBtProfiles, function(item22) { // 21th iteration
                                                                                                    let commonItems22 = _.filter(commonItems21, function(k) { return k['BT profiles'] == item22; })

                                                                                                    _.each(uniqBtBleRole, function(item23) { // 22th iteration
                                                                                                        let commonItems23 = _.filter(commonItems22, function(k) { return k['BT/BLE Role'] == item23; })

                                                                                                        _.each(uniqProfileParam, function(item24) { // 23th iteration
                                                                                                            let commonItems24 = _.filter(commonItems23, function(k) { return k['Profile Param'] == item24; })

                                                                                                            _.each(uniqConnectionParam, function(item25) { // 24th iteration
                                                                                                                let commonItems25 = _.filter(commonItems24, function(k) { return k['Connection param'] == item25; })

                                                                                                                _.each(uniqBtSniff, function(item26) { // 25th iteration
                                                                                                                    let commonItems26 = _.filter(commonItems25, function(k) { return k['BT Sniff'] == item26; })

                                                                                                                    _.each(uniqTestDuration, function(item27) { // 26th iteration
                                                                                                                        let commonItems27 = _.filter(commonItems26, function(k) { return k['Test Duration'] == item27; })

                                                                                                                        // _.each(uniqTestRepetition, function(item28) { // 27th iteration
                                                                                                                        //     let commonItems28 = _.filter(commonItems27, function(k) { return k['Test Repetition'] == item28; })
                                                                                                                        if (commonItems27.length) {
                                                                                                                            testCompareObjects.push(commonItems27);
                                                                                                                        }
                                                                                                                        //})
                                                                                                                    })
                                                                                                                })
                                                                                                            })
                                                                                                        })
                                                                                                    })
                                                                                                })
                                                                                            })
                                                                                        })
                                                                                    })
                                                                                })
                                                                            })
                                                                        })
                                                                    })
                                                                })
                                                            })
                                                        })
                                                    })
                                                })
                                            })
                                        })
                                    })
                                })
                            })
                        })
                    })
                })
            })
            //console.log("testCompareObject--", testCompareObjects);
        return testCompareObjects;
    } catch (err) {
        logger.error("smartMergeCompareStaCoexTpData error : ", err);
    }
}


/* Function to updateMaxValueStaCoexTpData status */
async function updateMaxValueStaCoexTpData(smartMergeObj) {
    let BT_Baseline = [],
        BT_Baseline_val = [];
    let HT_20_2 = [],
        HT_20_2_val = [];
    let HE_20_2 = [],
        HE_20_2_val = [];
    let VHT_80_5 = [],
        VHT_80_5_val = [];
    let HE_80_5 = [],
        HE_80_5_val = [];
    let HT_40_2 = [],
        HT_40_2_val = [];
    let HE_40_2 = [],
        HE_40_2_val = [];
    let HT_40_5 = [],
        HT_40_5_val = [];
    let HE_40_5 = [],
        HE_40_5_val = [];
    let innerArr = [];

    try {

        for (var j = 0; j < smartMergeObj.length; j++) {

            for (var j = 0; j < smartMergeObj.length; j++) {
                innerArr = [];
                innerArr.push(smartMergeObj[j]);

                for (var i = 0; i < smartMergeObj[j].length; i++) {

                    if (typeof smartMergeObj[j][i]["BT Baseline"] != 'undefined') {

                        BT_Baseline.push(smartMergeObj[j][i]["BT Baseline"]["BT Baseline #1"] ? smartMergeObj[j][i]["BT Baseline"]["BT Baseline #1"] : '');
                        BT_Baseline.push(smartMergeObj[j][i]["BT Baseline"]["BT Baseline #2"] ? smartMergeObj[j][i]["BT Baseline"]["BT Baseline #2"] : '');
                        BT_Baseline.push(smartMergeObj[j][i]["BT Baseline"]["BT RSSI"] ? smartMergeObj[j][i]["BT Baseline"]["BT RSSI"] : '');

                        BT_Baseline_val.push(BT_Baseline);
                    }

                    if (typeof smartMergeObj[j][i]["HT-20MHz | 2GHz"] != 'undefined') {
                        if ((typeof smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Wlan Baseline"] != 'undefined') && (typeof smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"] != 'undefined')) {
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] : '');
                            HT_20_2_val.push(HT_20_2);
                        } else if (typeof smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] : '');
                            HT_20_2.push('');
                            HT_20_2.push('');
                            HT_20_2.push('');
                            HT_20_2.push('');
                            HT_20_2.push('');
                            HT_20_2.push('');
                            HT_20_2.push('');
                            HT_20_2.push('');
                            HT_20_2.push('');
                            HT_20_2.push('');
                            HT_20_2.push('');
                            HT_20_2.push('');
                            HT_20_2.push('');
                            HT_20_2.push('');
                            HT_20_2_val.push(HT_20_2);
                        } else if (typeof smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                            HT_20_2.push('');
                            HT_20_2.push('');
                            HT_20_2.push('');
                            HT_20_2.push('');
                            HT_20_2.push('');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] : '');
                            HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] : '');
                            HT_20_2_val.push(HT_20_2);
                        }
                    }
                    if (typeof smartMergeObj[j][i]["HE-20MHz | 2GHz"] != 'undefined') {
                        if ((typeof smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Wlan Baseline"] != 'undefined') && (typeof smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined')) {
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] : '');
                            HE_20_2_val.push(HE_20_2);
                        } else if (typeof smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] : '');
                            HE_20_2.push('');
                            HE_20_2.push('');
                            HE_20_2.push('');
                            HE_20_2.push('');
                            HE_20_2.push('');
                            HE_20_2.push('');
                            HE_20_2.push('');
                            HE_20_2.push('');
                            HE_20_2.push('');
                            HE_20_2.push('');
                            HE_20_2.push('');
                            HE_20_2.push('');
                            HE_20_2.push('');
                            HE_20_2.push('');
                            HE_20_2_val.push(HE_20_2);
                        } else if (typeof smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                            HE_20_2.push('');
                            HE_20_2.push('');
                            HE_20_2.push('');
                            HE_20_2.push('');
                            HE_20_2.push('');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] : '');
                            HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] : '');
                            HE_20_2_val.push(HE_20_2);
                        }
                    }
                    if (typeof smartMergeObj[j][i]["VHT-80MHz | 5GHz"] != 'undefined') {
                        if ((typeof smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') && (typeof smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined')) {
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] : '');
                            VHT_80_5_val.push(VHT_80_5);
                        } else if (typeof smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] : '');
                            VHT_80_5.push('');
                            VHT_80_5.push('');
                            VHT_80_5.push('');
                            VHT_80_5.push('');
                            VHT_80_5.push('');
                            VHT_80_5.push('');
                            VHT_80_5.push('');
                            VHT_80_5.push('');
                            VHT_80_5.push('');
                            VHT_80_5.push('');
                            VHT_80_5.push('');
                            VHT_80_5.push('');
                            VHT_80_5.push('');
                            VHT_80_5.push('');
                            VHT_80_5_val.push(VHT_80_5);
                        } else if (typeof smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                            VHT_80_5.push('');
                            VHT_80_5.push('');
                            VHT_80_5.push('');
                            VHT_80_5.push('');
                            VHT_80_5.push('');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] : '');
                            VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] : '');
                            VHT_80_5_val.push(VHT_80_5);
                        }
                    }
                    if (typeof smartMergeObj[j][i]["HE-80MHz | 5GHz"] != 'undefined') {
                        if ((typeof smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') && (typeof smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined')) {
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] : '');
                            HE_80_5_val.push(HE_80_5);
                        } else if (typeof smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] : '');
                            HE_80_5.push('');
                            HE_80_5.push('');
                            HE_80_5.push('');
                            HE_80_5.push('');
                            HE_80_5.push('');
                            HE_80_5.push('');
                            HE_80_5.push('');
                            HE_80_5.push('');
                            HE_80_5.push('');
                            HE_80_5.push('');
                            HE_80_5.push('');
                            HE_80_5.push('');
                            HE_80_5.push('');
                            HE_80_5.push('');
                            HE_80_5_val.push(HE_80_5);
                        } else if (typeof smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                            HE_80_5.push('');
                            HE_80_5.push('');
                            HE_80_5.push('');
                            HE_80_5.push('');
                            HE_80_5.push('');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] : '');
                            HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] : '');
                            HE_80_5_val.push(HE_80_5);
                        }
                    }
                    if (typeof smartMergeObj[j][i]["HT-40MHz | 2GHz"] != 'undefined') {
                        if ((typeof smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') && (typeof smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined')) {
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] : '');
                            HT_40_2_val.push(HT_40_2);
                        } else if (typeof smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] : '');
                            HT_40_2.push('');
                            HT_40_2.push('');
                            HT_40_2.push('');
                            HT_40_2.push('');
                            HT_40_2.push('');
                            HT_40_2.push('');
                            HT_40_2.push('');
                            HT_40_2.push('');
                            HT_40_2.push('');
                            HT_40_2.push('');
                            HT_40_2.push('');
                            HT_40_2.push('');
                            HT_40_2.push('');
                            HT_40_2.push('');
                            HT_40_2_val.push(HT_40_2);
                        } else if (typeof smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                            HT_40_2.push('');
                            HT_40_2.push('');
                            HT_40_2.push('');
                            HT_40_2.push('');
                            HT_40_2.push('');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] : '');
                            HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] : '');
                            HT_40_2_val.push(HT_40_2);
                        }
                    }
                    if (typeof smartMergeObj[j][i]["HE-40MHz | 2GHz"] != 'undefined') {
                        if ((typeof smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') && (typeof smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined')) {
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] : '');
                            HE_40_2_val.push(HE_40_2);
                        } else if (typeof smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] : '');
                            HE_40_2.push('');
                            HE_40_2.push('');
                            HE_40_2.push('');
                            HE_40_2.push('');
                            HE_40_2.push('');
                            HE_40_2.push('');
                            HE_40_2.push('');
                            HE_40_2.push('');
                            HE_40_2.push('');
                            HE_40_2.push('');
                            HE_40_2.push('');
                            HE_40_2.push('');
                            HE_40_2.push('');
                            HE_40_2.push('');
                            HE_40_2_val.push(HE_40_2);
                        } else if (typeof smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                            HE_40_2.push('');
                            HE_40_2.push('');
                            HE_40_2.push('');
                            HE_40_2.push('');
                            HE_40_2.push('');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] : '');
                            HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] : '');
                            HE_40_2_val.push(HE_40_2);
                        }
                    }
                    if (typeof smartMergeObj[j][i]["HT-40MHz | 5GHz"] != 'undefined') {
                        if ((typeof smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') && (typeof smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined')) {
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] : '');
                            HT_40_5_val.push(HT_40_5);
                        } else if (typeof smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] : '');
                            HT_40_5.push('');
                            HT_40_5.push('');
                            HT_40_5.push('');
                            HT_40_5.push('');
                            HT_40_5.push('');
                            HT_40_5.push('');
                            HT_40_5.push('');
                            HT_40_5.push('');
                            HT_40_5.push('');
                            HT_40_5.push('');
                            HT_40_5.push('');
                            HT_40_5.push('');
                            HT_40_5.push('');
                            HT_40_5.push('');
                            HT_40_5_val.push(HT_40_5);
                        } else if (typeof smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                            HT_40_5.push('');
                            HT_40_5.push('');
                            HT_40_5.push('');
                            HT_40_5.push('');
                            HT_40_5.push('');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] : '');
                            HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] : '');
                            HT_40_5_val.push(HT_40_5);
                        }
                    }
                    if (typeof smartMergeObj[j][i]["HE-40MHz | 5GHz"] != 'undefined') {
                        if ((typeof smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') && (typeof smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined')) {
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] : '');
                            HE_40_5_val.push(HE_40_5);
                        } else if (typeof smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] : '');
                            HE_40_5.push('');
                            HE_40_5.push('');
                            HE_40_5.push('');
                            HE_40_5.push('');
                            HE_40_5.push('');
                            HE_40_5.push('');
                            HE_40_5.push('');
                            HE_40_5.push('');
                            HE_40_5.push('');
                            HE_40_5.push('');
                            HE_40_5.push('');
                            HE_40_5.push('');
                            HE_40_5.push('');
                            HE_40_5.push('');
                            HE_40_5_val.push(HE_40_5);
                        } else if (typeof smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                            HE_40_5.push('');
                            HE_40_5.push('');
                            HE_40_5.push('');
                            HE_40_5.push('');
                            HE_40_5.push('');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] : '');
                            HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] : '');
                            HE_40_5_val.push(HE_40_5);
                        }
                    }
                    BT_Baseline = [];
                    HT_20_2 = [];
                    HE_20_2 = [];
                    VHT_80_5 = [];
                    HE_80_5 = [];
                    HT_40_2 = [];
                    HE_40_2 = [];
                    HT_40_5 = [];
                    HE_40_5 = [];
                }
                var Max_BT_Baseline = await getMaxValInArr(BT_Baseline_val);
                var Max_HT_20_2 = await getMaxValInArr(HT_20_2_val);
                var Max_HE_20_2 = await getMaxValInArr(HE_20_2_val);
                var Max_VHT_80_5 = await getMaxValInArr(VHT_80_5_val);
                var Max_HE_80_5 = await getMaxValInArr(HE_80_5_val);
                var Max_HT_40_2 = await getMaxValInArr(HT_40_2_val);
                var Max_HE_40_2 = await getMaxValInArr(HE_40_2_val);
                var Max_HT_40_5 = await getMaxValInArr(HT_40_5_val);
                var Max_HE_40_5 = await getMaxValInArr(HE_40_5_val);

                BT_Baseline_val = [];
                HT_20_2_val = [];
                HE_20_2_val = [];
                VHT_80_5_val = [];
                HE_80_5_val = [];
                HT_40_2_val = [];
                HE_40_2_val = [];
                HT_40_5_val = [];
                HE_40_5_val = [];

                // Status Changes loop
                for (var k = 0; k < innerArr.length; k++) {
                    for (var p = 0; p < innerArr[k].length; p++) {
                        if (typeof innerArr[k][p]["BT Baseline"] != 'undefined') {
                            if (typeof innerArr[k][p]["BT Baseline"]["BT Baseline #1"] != 'undefined') {
                                if (innerArr[k][p]["BT Baseline"]["BT Baseline #1"] == Max_BT_Baseline[0]) {
                                    innerArr[k][p]["BT Baseline"]["BT Baseline #1"] = [innerArr[k][p]["BT Baseline"]["BT Baseline #1"], true];
                                } else { innerArr[k][p]["BT Baseline"]["BT Baseline #1"] = [innerArr[k][p]["BT Baseline"]["BT Baseline #1"], false]; }
                            }
                            if (typeof innerArr[k][p]["BT Baseline"]["BT Baseline #2"] != 'undefined') {
                                if (innerArr[k][p]["BT Baseline"]["BT Baseline #2"] == Max_BT_Baseline[1]) {
                                    innerArr[k][p]["BT Baseline"]["BT Baseline #2"] = [innerArr[k][p]["BT Baseline"]["BT Baseline #2"], true];
                                } else { innerArr[k][p]["BT Baseline"]["BT Baseline #2"] = [innerArr[k][p]["BT Baseline"]["BT Baseline #2"], false]; }
                            }
                            if (typeof innerArr[k][p]["BT Baseline"]["BT RSSI"] != 'undefined') {
                                if (innerArr[k][p]["BT Baseline"]["BT RSSI"] == Max_BT_Baseline[0]) {
                                    innerArr[k][p]["BT Baseline"]["BT RSSI"] = [innerArr[k][p]["BT Baseline"]["BT RSSI"], true];
                                } else { innerArr[k][p]["BT Baseline"]["BT RSSI"] = [innerArr[k][p]["BT Baseline"]["BT RSSI"], false]; }
                            }
                        }
                        if (typeof innerArr[k][p]["HT-20MHz | 2GHz"] != 'undefined') {
                            if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] != 'undefined') {
                                    if (innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] == Max_HT_20_2[0]) {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"], true];
                                    } else { innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] != 'undefined') {
                                    if (innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] == Max_HT_20_2[1]) {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"], true];
                                    } else { innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] == Max_HT_20_2[2]) {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"], true];
                                    } else { innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] != 'undefined') {
                                    if (innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] == Max_HT_20_2[3]) {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"], true];
                                    } else { innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] == Max_HT_20_2[4]) {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"], true];
                                    } else { innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] == Max_HT_20_2[5]) {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"], true];
                                    } else { innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] == Max_HT_20_2[6]) {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] == Max_HT_20_2[7]) {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] != 'undefined') {
                                    if (innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] == Max_HT_20_2[8]) {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"], true];
                                    } else { innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] == Max_HT_20_2[9]) {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] == Max_HT_20_2[10]) {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] == Max_HT_20_2[11]) {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"], true];
                                    } else { innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] == Max_HT_20_2[12]) {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] == Max_HT_20_2[13]) {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] != 'undefined') {
                                    if (innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] == Max_HT_20_2[14]) {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"], true];
                                    } else { innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] == Max_HT_20_2[15]) {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] == Max_HT_20_2[16]) {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] == Max_HT_20_2[17]) {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"], true];
                                    } else { innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] == Max_HT_20_2[18]) {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"], true];
                                    } else { innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = [innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"], false]; }
                                }
                            }
                        }
                        if (typeof innerArr[k][p]["HE-20MHz | 2GHz"] != 'undefined') {
                            if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] != 'undefined') {
                                    if (innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] == Max_HE_20_2[0]) {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"], true];
                                    } else { innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] != 'undefined') {
                                    if (innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] == Max_HE_20_2[1]) {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"], true];
                                    } else { innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] == Max_HE_20_2[2]) {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"], true];
                                    } else { innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] != 'undefined') {
                                    if (innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] == Max_HE_20_2[3]) {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"], true];
                                    } else { innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] == Max_HE_20_2[4]) {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"], true];
                                    } else { innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] == Max_HE_20_2[5]) {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"], true];
                                    } else { innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] == Max_HE_20_2[6]) {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] == Max_HE_20_2[7]) {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] != 'undefined') {
                                    if (innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] == Max_HE_20_2[8]) {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"], true];
                                    } else { innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] == Max_HE_20_2[9]) {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] == Max_HE_20_2[10]) {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] == Max_HE_20_2[11]) {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"], true];
                                    } else { innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] == Max_HE_20_2[12]) {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] == Max_HE_20_2[13]) {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] != 'undefined') {
                                    if (innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] == Max_HE_20_2[14]) {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"], true];
                                    } else { innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] == Max_HE_20_2[15]) {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] == Max_HE_20_2[16]) {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] == Max_HE_20_2[17]) {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"], true];
                                    } else { innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] == Max_HE_20_2[18]) {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"], true];
                                    } else { innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = [innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"], false]; }
                                }
                            }
                        }
                        if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"] != 'undefined') {
                            if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] != 'undefined') {
                                    if (innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] == Max_VHT_80_5[0]) {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"], true];
                                    } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] != 'undefined') {
                                    if (innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] == Max_VHT_80_5[1]) {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"], true];
                                    } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] == Max_VHT_80_5[2]) {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"], true];
                                    } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] != 'undefined') {
                                    if (innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] == Max_VHT_80_5[3]) {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"], true];
                                    } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] == Max_VHT_80_5[4]) {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"], true];
                                    } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] == Max_VHT_80_5[5]) {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"], true];
                                    } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] == Max_VHT_80_5[6]) {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] == Max_VHT_80_5[7]) {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] != 'undefined') {
                                    if (innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] == Max_VHT_80_5[8]) {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"], true];
                                    } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] == Max_VHT_80_5[9]) {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] == Max_VHT_80_5[10]) {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] == Max_VHT_80_5[11]) {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"], true];
                                    } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] == Max_VHT_80_5[12]) {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] == Max_VHT_80_5[13]) {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] != 'undefined') {
                                    if (innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] == Max_VHT_80_5[14]) {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"], true];
                                    } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] == Max_VHT_80_5[15]) {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] == Max_VHT_80_5[16]) {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] == Max_VHT_80_5[17]) {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"], true];
                                    } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] == Max_VHT_80_5[18]) {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"], true];
                                    } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = [innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"], false]; }
                                }
                            }
                        }
                        if (typeof innerArr[k][p]["HE-80MHz | 5GHz"] != 'undefined') {
                            if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] != 'undefined') {
                                    if (innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] == Max_HE_80_5[0]) {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"], true];
                                    } else { innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] != 'undefined') {
                                    if (innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] == Max_HE_80_5[1]) {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"], true];
                                    } else { innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] == Max_HE_80_5[2]) {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"], true];
                                    } else { innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] != 'undefined') {
                                    if (innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] == Max_HE_80_5[3]) {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"], true];
                                    } else { innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] == Max_HE_80_5[4]) {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"], true];
                                    } else { innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] == Max_HE_80_5[5]) {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"], true];
                                    } else { innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] == Max_HE_80_5[6]) {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] == Max_HE_80_5[7]) {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] != 'undefined') {
                                    if (innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] == Max_HE_80_5[8]) {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"], true];
                                    } else { innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] == Max_HE_80_5[9]) {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] == Max_HE_80_5[10]) {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] == Max_HE_80_5[11]) {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"], true];
                                    } else { innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] == Max_HE_80_5[12]) {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] == Max_HE_80_5[13]) {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] != 'undefined') {
                                    if (innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] == Max_HE_80_5[14]) {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"], true];
                                    } else { innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] == Max_HE_80_5[15]) {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] == Max_HE_80_5[16]) {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] == Max_HE_80_5[17]) {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"], true];
                                    } else { innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] == Max_HE_80_5[18]) {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"], true];
                                    } else { innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = [innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"], false]; }
                                }
                            }
                        }
                        if (typeof innerArr[k][p]["HT-40MHz | 2GHz"] != 'undefined') {
                            if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] == Max_HT_40_2[0]) {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] == Max_HT_40_2[1]) {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] == Max_HT_40_2[2]) {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] == Max_HT_40_2[3]) {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] == Max_HT_40_2[4]) {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] == Max_HT_40_2[5]) {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] == Max_HT_40_2[6]) {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] == Max_HT_40_2[7]) {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] == Max_HT_40_2[8]) {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] == Max_HT_40_2[9]) {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] == Max_HT_40_2[10]) {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] == Max_HT_40_2[11]) {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] == Max_HT_40_2[12]) {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] == Max_HT_40_2[13]) {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] == Max_HT_40_2[14]) {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] == Max_HT_40_2[15]) {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] == Max_HT_40_2[16]) {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] == Max_HT_40_2[17]) {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] == Max_HT_40_2[18]) {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = [innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"], false]; }
                                }
                            }
                        }
                        if (typeof innerArr[k][p]["HE-40MHz | 2GHz"] != 'undefined') {
                            if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] == Max_HE_40_2[0]) {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] == Max_HE_40_2[1]) {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] == Max_HE_40_2[2]) {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] == Max_HE_40_2[3]) {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] == Max_HE_40_2[4]) {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] == Max_HE_40_2[5]) {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] == Max_HE_40_2[6]) {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] == Max_HE_40_2[7]) {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] == Max_HE_40_2[8]) {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] == Max_HE_40_2[9]) {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] == Max_HE_40_2[10]) {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] == Max_HE_40_2[11]) {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] == Max_HE_40_2[12]) {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] == Max_HE_40_2[13]) {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] == Max_HE_40_2[14]) {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] == Max_HE_40_2[15]) {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] == Max_HE_40_2[16]) {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] == Max_HE_40_2[17]) {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] == Max_HE_40_2[18]) {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = [innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"], false]; }
                                }
                            }
                        }
                        if (typeof innerArr[k][p]["HT-40MHz | 5GHz"] != 'undefined') {
                            if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] == Max_HT_40_5[0]) {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] == Max_HT_40_5[1]) {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] == Max_HT_40_5[2]) {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] == Max_HT_40_5[3]) {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] == Max_HT_40_5[4]) {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] == Max_HT_40_5[5]) {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] == Max_HT_40_5[6]) {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] == Max_HT_40_5[7]) {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] == Max_HT_40_5[8]) {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] == Max_HT_40_5[9]) {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] == Max_HT_40_5[10]) {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] == Max_HT_40_5[11]) {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] == Max_HT_40_5[12]) {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] == Max_HT_40_5[13]) {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] == Max_HT_40_5[14]) {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] == Max_HT_40_5[15]) {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] == Max_HT_40_5[16]) {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] == Max_HT_40_5[17]) {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] == Max_HT_40_5[18]) {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"], true];
                                    } else { innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = [innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"], false]; }
                                }
                            }
                        }
                        if (typeof innerArr[k][p]["HE-40MHz | 5GHz"] != 'undefined') {
                            if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] == Max_HE_40_5[0]) {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] == Max_HE_40_5[1]) {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] == Max_HE_40_5[2]) {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] == Max_HE_40_5[3]) {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] == Max_HE_40_5[4]) {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] == Max_HE_40_5[5]) {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] == Max_HE_40_5[6]) {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] == Max_HE_40_5[7]) {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] == Max_HE_40_5[8]) {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] == Max_HE_40_5[9]) {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] == Max_HE_40_5[10]) {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] == Max_HE_40_5[11]) {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] == Max_HE_40_5[12]) {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] == Max_HE_40_5[13]) {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] == Max_HE_40_5[14]) {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] == Max_HE_40_5[15]) {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] == Max_HE_40_5[16]) {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] == Max_HE_40_5[17]) {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"], true];
                                    } else { innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] = [innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"], false]; }
                                }
                            }
                            if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] != 'undefined') {
                                    if (innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] == Max_HE_40_5[18]) {
                                        innerArr[k][p]["HE 40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = [innerArr[k][p]["HE 40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"], true];
                                    } else { innerArr[k][p]["HE 40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = [innerArr[k][p]["HE 40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"], false]; }
                                }
                            }
                        }
                    }
                }
            }
        }
        return smartMergeObj;
    } catch (err) {
        logger.error("updateMaxValueStaCoexTpData error : ", err);
    }
}

async function modifyDataStaCoexTpData(smartMergeObj) {
    try {
        for (var j = 0; j < smartMergeObj.length; j++) {

            for (var j = 0; j < smartMergeObj.length; j++) {
                innerArr = [];
                innerArr.push(smartMergeObj[j]);

                // Status Changes loop
                for (var k = 0; k < innerArr.length; k++) {
                    for (var p = 0; p < innerArr[k].length; p++) {
                        console.log("innerArr[k][p][reportName] -->>", innerArr[k][p]["reportName"])
                        if (typeof innerArr[k][p]["reportName"] != 'undefined') {

                            if (typeof innerArr[k][p]["BT Baseline"] != 'undefined') {
                                if (typeof innerArr[k][p]["BT Baseline"]["BT Baseline #1"] != 'undefined') {
                                    innerArr[k][p]["BT Baseline"]["BT Baseline #1"] = innerArr[k][p]["BT Baseline"]["BT Baseline #1"][0];
                                }
                                if (typeof innerArr[k][p]["BT Baseline"]["BT Baseline #2"] != 'undefined') {
                                    innerArr[k][p]["BT Baseline"]["BT Baseline #2"] = innerArr[k][p]["BT Baseline"]["BT Baseline #2"][0];
                                }
                                if (typeof innerArr[k][p]["BT Baseline"]["BT RSSI"] != 'undefined') {
                                    innerArr[k][p]["BT Baseline"]["BT RSSI"] = innerArr[k][p]["BT Baseline"]["BT RSSI"][0];
                                }
                            }
                            //"HT-20MHz | 2GHz" 
                            if (typeof innerArr[k][p]["HT-20MHz | 2GHz"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] != 'undefined') {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"][0];
                                    }

                                    if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] != 'undefined') {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"][0];
                                    }

                                    if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] != 'undefined') {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"][0];
                                    }

                                    if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] != 'undefined') {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"][0];
                                    }

                                    if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] != 'undefined') {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = innerArr[k][p]["HT-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"][0];
                                    }
                                }

                                //COEX_Performance
                                if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] != 'undefined') {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] = innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"][0];
                                    }

                                    if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"][0];
                                    }

                                    if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"][0];
                                    }

                                    if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] != 'undefined') {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] = innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"][0];
                                    }

                                    if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"][0];
                                    }

                                    if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"][0];
                                    }

                                    if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] != 'undefined') {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] = innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"][0];
                                    }

                                    if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"][0];
                                    }

                                    if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"][0];
                                    }

                                    if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] != 'undefined') {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] = innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"][0];
                                    }

                                    if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"][0];
                                    }

                                    if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"][0];
                                    }

                                    if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] != 'undefined') {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] = innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"][0];
                                    }

                                    if (typeof innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] != 'undefined') {
                                        innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = innerArr[k][p]["HT-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"][0];
                                    }
                                }
                            }

                            //"HE-20MHz | 2GHz"
                            if (typeof innerArr[k][p]["HE-20MHz | 2GHz"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] != 'undefined') {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] != 'undefined') {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] != 'undefined') {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] != 'undefined') {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] != 'undefined') {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = innerArr[k][p]["HE-20MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] != 'undefined') {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] = innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] != 'undefined') {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] = innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] != 'undefined') {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] = innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] != 'undefined') {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] = innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] != 'undefined') {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] = innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["BT RSSI"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] != 'undefined') {
                                        innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = innerArr[k][p]["HE-20MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"][0];
                                    }
                                }
                            }

                            //"VHT-80MHz | 5GHz"
                            if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"] != 'undefined') {
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] != 'undefined') {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] != 'undefined') {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] != 'undefined') {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] != 'undefined') {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] != 'undefined') {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = innerArr[k][p]["VHT-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] != 'undefined') {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] = innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] != 'undefined') {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] = innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] != 'undefined') {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] = innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] != 'undefined') {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] = innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] != 'undefined') {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] = innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] != 'undefined') {
                                        innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = innerArr[k][p]["VHT-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"][0];
                                    }
                                }
                            }

                            //"HE-80MHz | 5GHz"
                            if (typeof innerArr[k][p]["HE-80MHz | 5GHz"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] != 'undefined') {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] != 'undefined') {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] != 'undefined') {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] != 'undefined') {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] != 'undefined') {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = innerArr[k][p]["HE-80MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] != 'undefined') {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] = innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] != 'undefined') {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] = innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] != 'undefined') {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] = innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] != 'undefined') {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] = innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] != 'undefined') {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] = innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["BT RSSI"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] != 'undefined') {
                                        innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = innerArr[k][p]["HE-80MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"][0];
                                    }
                                }
                            }

                            //"HT-40MHz | 2GHz"
                            if (typeof innerArr[k][p]["HT-40MHz | 2GHz"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = innerArr[k][p]["HT-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] = innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] = innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] = innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] = innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] = innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = innerArr[k][p]["HT-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"][0];
                                    }
                                }
                            }

                            //"HE-40MHz | 2GHz"
                            if (typeof innerArr[k][p]["HE-40MHz | 2GHz"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Tx"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline TCP-Rx"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-TX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Baseline UDP-Rx"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = innerArr[k][p]["HE-40MHz | 2GHz"]["Wlan Baseline"]["Wi-Fi RSSI"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"] = innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-TX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"] = innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex TCP-RX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"] = innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-TX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"] = innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Coex UDP-RX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"] = innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["BT RSSI"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = innerArr[k][p]["HE-40MHz | 2GHz"]["COEX_Performance"]["Wi-Fi RSSI"][0];
                                    }
                                }
                            }

                            //"HT-40MHz | 5GHz"
                            if (typeof innerArr[k][p]["HT-40MHz | 5GHz"] != 'undefined') {
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = innerArr[k][p]["HT-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] = innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] = innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] = innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] = innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] = innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] != 'undefined') {
                                        innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = innerArr[k][p]["HT-40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"][0];
                                    }
                                }
                            }

                            //"HE-40MHz | 5GHz"
                            if (typeof innerArr[k][p]["HE-40MHz | 5GHz"] != 'undefined') {
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"] = innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Tx"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"] = innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline TCP-Rx"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"] = innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-TX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"] = innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Baseline UDP-Rx"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"] = innerArr[k][p]["HE-40MHz | 5GHz"]["Wlan Baseline"]["Wi-Fi RSSI"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"] = innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-TX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"] = innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"] = innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-TX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"] = innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex TCP-RX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"] = innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"] = innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexTCP-RX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"] = innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-TX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"] = innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"] = innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-TX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"] = innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Coex UDP-RX"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"] = innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#1"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"] = innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["CoexUDP-RX_BT Performance Result#2"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] != 'undefined') {
                                        innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"] = innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["BT RSSI"][0];
                                    }
                                }
                                if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["HE-40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] != 'undefined') {
                                        innerArr[k][p]["HE 40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"] = innerArr[k][p]["HE 40MHz | 5GHz"]["COEX_Performance"]["Wi-Fi RSSI"][0];
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return smartMergeObj;
    } catch (err) {
        logger.error("modify Data StaCoexTpData error : ", err);
    }
}

/* Function for smart merge of Ul 11ax Mu Mimo executions */
async function Ul11axMuMimoMerge(executions) {
    try {
        let testCompareObjects = [];

        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('FW/Driver ver')), 'FW/Driver ver'), function(element) {
                let commonFwDriver = _.filter(executions, function(p) { return p['FW/Driver ver'] == element; })
                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('AP-Model')), 'AP-Model'), function(element) {
                    let commonApModel = _.filter(commonFwDriver, function(p) { return p['AP-Model'] == element; })
                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('AP-SoC Rev')), 'AP-SoC Rev'), function(element) {
                        let commonApSocRev = _.filter(commonApModel, function(p) { return p['AP-SoC Rev'] == element; })
                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Band')), 'Band'), function(element) {
                            let commonBand = _.filter(commonApSocRev, function(p) { return p['Band'] == element; })
                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Channel')), 'Channel'), function(element) {
                                let commonChannel = _.filter(commonBand, function(p) { return p['Channel'] == element; })
                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Environment')), 'Environment'), function(element) {
                                    let commonEnvironment = _.filter(commonChannel, function(p) { return p['Environment'] == element; })
                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('MCS Rates')), 'MCS Rates'), function(element) {
                                        let commonMcsRates = _.filter(commonEnvironment, function(p) { return p['MCS Rates'] == element; })
                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('MIMO Cache')), 'MIMO Cache'), function(element) {
                                            let commonMimoCache = _.filter(commonMcsRates, function(p) { return p['MIMO Cache'] == element; })
                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('MU Config')), 'MU Config'), function(element) {
                                                let commonMuConfig = _.filter(commonMimoCache, function(p) { return p['MU Config'] == element; })
                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('MU Groups')), 'MU Groups'), function(element) {
                                                    let commonMuGroups = _.filter(commonMuConfig, function(p) { return p['MU Groups'] == element; })
                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Mode/BW')), 'Mode/BW'), function(element) {
                                                        let commonModeBw = _.filter(commonMuGroups, function(p) { return p['Mode/BW'] == element; })
                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('No of clients')), 'No of clients'), function(element) {
                                                            let commonNoofClients = _.filter(commonModeBw, function(p) { return p['No of clients'] == element; })
                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Pvt build')), 'Pvt build'), function(element) {
                                                                let commonPvtBuild = _.filter(commonNoofClients, function(p) { return p['Pvt build'] == element; })
                                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('SGI/LGI')), 'SGI/LGI'), function(element) {
                                                                    let commonSgiLgi = _.filter(commonPvtBuild, function(p) { return p['SGI/LGI'] == element; })
                                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('STA1 ANT')), 'STA1 ANT'), function(element) {
                                                                        let commonSta1Ant = _.filter(commonSgiLgi, function(p) { return p['STA1 ANT'] == element; })
                                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('STA2 ANT')), 'STA2 ANT'), function(element) {
                                                                            let commonSta2Ant = _.filter(commonSta1Ant, function(p) { return p['STA2 ANT'] == element; })
                                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('STA3 ANT')), 'STA3 ANT'), function(element) {
                                                                                let commonSta3Ant = _.filter(commonSta2Ant, function(p) { return p['STA3 ANT'] == element; })
                                                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('STA4 ANT')), 'STA4 ANT'), function(element) {
                                                                                    let commonSta4Ant = _.filter(commonSta3Ant, function(p) { return p['STA4 ANT'] == element; })
                                                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Security')), 'Security'), function(element) {
                                                                                        let commonuniqSecurity = _.filter(commonSta4Ant, function(p) { return p['Security'] == element; })
                                                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('traffic Tool')), 'traffic Tool'), function(element) {
                                                                                            let commonTrafficTool = _.filter(commonuniqSecurity, function(p) { return p['traffic Tool'] == element; })
                                                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('STA1')), 'STA1'), function(element) {
                                                                                                let commonSta1 = _.filter(commonTrafficTool, function(p) { return p['STA1'] == element; })
                                                                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('STA2')), 'STA2'), function(element) {
                                                                                                    let commonSta2 = _.filter(commonSta1, function(p) { return p['STA2'] == element; })
                                                                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('STA3')), 'STA3'), function(element) {
                                                                                                        let commonSta3 = _.filter(commonSta2, function(p) { return p['STA3'] == element; })
                                                                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('STA4')), 'STA4'), function(element) {
                                                                                                            let commonSta4 = _.filter(commonSta3, function(p) { return p['STA4'] == element; })
                                                                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Data bytes')), 'Data bytes'), function(element) {
                                                                                                                let commonDataBytes = _.filter(commonSta4, function(p) { return p['Data bytes'] == element; })
                                                                                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Target RSSI set in AP')), 'Target RSSI set in AP'), function(element) {
                                                                                                                    let commonTargetRssi = _.filter(commonDataBytes, function(p) { return p['Target RSSI set in AP'] == element; })

                                                                                                                    if (commonTargetRssi.length) {
                                                                                                                        testCompareObjects.push(commonTargetRssi);
                                                                                                                    }
                                                                                                                })
                                                                                                            })
                                                                                                        })
                                                                                                    })
                                                                                                })
                                                                                            })
                                                                                        })
                                                                                    })
                                                                                })
                                                                            })
                                                                        })
                                                                    })
                                                                })
                                                            })
                                                        })
                                                    })
                                                })
                                            })
                                        })
                                    })
                                })
                            })
                        })

                    })
                })
            })
            //console.log("testCompareObjects", testCompareObjects);
        return testCompareObjects;
    } catch (err) {
        logger.error("Ul11axMuMimoMerge error : ", err);
    }
}


/* Function for smart merge of Dl 11ax Mu Mimo executions */
async function Dl11axMuMimoMerge(executions) {
    try {
        let testCompareObjects = [];

        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('FW/Driver ver')), 'FW/Driver ver'), function(element) {
                let commonFwDriver = _.filter(executions, function(p) { return p['FW/Driver ver'] == element; })
                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('AP-Model')), 'AP-Model'), function(element) {
                    let commonApModel = _.filter(commonFwDriver, function(p) { return p['AP-Model'] == element; })
                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('AP-SoC Rev')), 'AP-SoC Rev'), function(element) {
                        let commonApSocRev = _.filter(commonApModel, function(p) { return p['AP-SoC Rev'] == element; })
                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('BW')), 'BW'), function(element) {
                            let commonBw = _.filter(commonApSocRev, function(p) { return p['BW'] == element; })
                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Band')), 'Band'), function(element) {
                                let commonBand = _.filter(commonBw, function(p) { return p['Band'] == element; })
                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Channel')), 'Channel'), function(element) {
                                    let commonChannel = _.filter(commonBand, function(p) { return p['Channel'] == element; })
                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Environment')), 'Environment'), function(element) {
                                        let commonEnvironment = _.filter(commonChannel, function(p) { return p['Environment'] == element; })
                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('MCS Rates')), 'MCS Rates'), function(element) {
                                            let commonMcsRates = _.filter(commonEnvironment, function(p) { return p['MCS Rates'] == element; })
                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('MIMO Cache')), 'MIMO Cache'), function(element) {
                                                let commonMimoCache = _.filter(commonMcsRates, function(p) { return p['MIMO Cache'] == element; })
                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('MU Config')), 'MU Config'), function(element) {
                                                    let commonMuConfig = _.filter(commonMimoCache, function(p) { return p['MU Config'] == element; })
                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('MU Groups')), 'MU Groups'), function(element) {
                                                        let commonMuGroups = _.filter(commonMuConfig, function(p) { return p['MU Groups'] == element; })
                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Mode/BW')), 'Mode/BW'), function(element) {
                                                            let commonModeBw = _.filter(commonMuGroups, function(p) { return p['Mode/BW'] == element; })
                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Num of client')), 'Num of client'), function(element) {
                                                                let commonNoofClients = _.filter(commonModeBw, function(p) { return p['Num of client'] == element; })
                                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Pvt build')), 'Pvt build'), function(element) {
                                                                    let commonPvtBuild = _.filter(commonNoofClients, function(p) { return p['Pvt build'] == element; })
                                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('SGI/LGI')), 'SGI/LGI'), function(element) {
                                                                        let commonSgiLgi = _.filter(commonPvtBuild, function(p) { return p['SGI/LGI'] == element; })
                                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('STA1 ANT')), 'STA1 ANT'), function(element) {
                                                                            let commonSta1Ant = _.filter(commonSgiLgi, function(p) { return p['STA1 ANT'] == element; })
                                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('STA2 ANT')), 'STA2 ANT'), function(element) {
                                                                                let commonSta2Ant = _.filter(commonSta1Ant, function(p) { return p['STA2 ANT'] == element; })
                                                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('STA3 ANT')), 'STA3 ANT'), function(element) {
                                                                                    let commonSta3Ant = _.filter(commonSta2Ant, function(p) { return p['STA3 ANT'] == element; })
                                                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('STA4 ANT')), 'STA4 ANT'), function(element) {
                                                                                        let commonSta4Ant = _.filter(commonSta3Ant, function(p) { return p['STA4 ANT'] == element; })
                                                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Security')), 'Security'), function(element) {
                                                                                            let commonuniqSecurity = _.filter(commonSta4Ant, function(p) { return p['Security'] == element; })
                                                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('traffic Tool')), 'traffic Tool'), function(element) {
                                                                                                let commonTrafficTool = _.filter(commonuniqSecurity, function(p) { return p['traffic Tool'] == element; })
                                                                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('STA1')), 'STA1'), function(element) {
                                                                                                    let commonSta1 = _.filter(commonTrafficTool, function(p) { return p['STA1'] == element; })
                                                                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('STA2')), 'STA2'), function(element) {
                                                                                                        let commonSta2 = _.filter(commonSta1, function(p) { return p['STA2'] == element; })
                                                                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('STA3')), 'STA3'), function(element) {
                                                                                                            let commonSta3 = _.filter(commonSta2, function(p) { return p['STA3'] == element; })
                                                                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('STA4')), 'STA4'), function(element) {
                                                                                                                let commonSta4 = _.filter(commonSta3, function(p) { return p['STA4'] == element; })

                                                                                                                if (commonSta4.length) {
                                                                                                                    testCompareObjects.push(commonSta4);
                                                                                                                }
                                                                                                            })
                                                                                                        })
                                                                                                    })
                                                                                                })
                                                                                            })
                                                                                        })
                                                                                    })
                                                                                })
                                                                            })
                                                                        })
                                                                    })
                                                                })
                                                            })
                                                        })
                                                    })
                                                })
                                            })
                                        })
                                    })
                                })
                            })
                        })
                    })
                })
            })
            //console.log("testCompareObjects", testCompareObjects);
        return testCompareObjects;
    } catch (err) {
        logger.error("Dl11axMuMimoMerge error : ", err);
    }
}


/* Function for smart merge of Dl 11ac Mu Mimo executions */
async function Dl11acMuMimoMerge(executions) {
    try {
        let testCompareObjects = [];

        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('FW/Driver ver')), 'FW/Driver ver'), function(element) {
                let commonFwDriver = _.filter(executions, function(p) { return p['FW/Driver ver'] == element; })
                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('AP-Model')), 'AP-Model'), function(element) {
                    let commonApModel = _.filter(commonFwDriver, function(p) { return p['AP-Model'] == element; })
                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('AP-SoC Rev')), 'AP-SoC Rev'), function(element) {
                        let commonApSocRev = _.filter(commonApModel, function(p) { return p['AP-SoC Rev'] == element; })
                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('BW')), 'BW'), function(element) {
                            let commonBw = _.filter(commonApSocRev, function(p) { return p['BW'] == element; })
                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Band')), 'Band'), function(element) {
                                let commonBand = _.filter(commonBw, function(p) { return p['Band'] == element; })
                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Channel')), 'Channel'), function(element) {
                                    let commonChannel = _.filter(commonBand, function(p) { return p['Channel'] == element; })
                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Environment')), 'Environment'), function(element) {
                                        let commonEnvironment = _.filter(commonChannel, function(p) { return p['Environment'] == element; })
                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('MCS Rates')), 'MCS Rates'), function(element) {
                                            let commonMcsRates = _.filter(commonEnvironment, function(p) { return p['MCS Rates'] == element; })
                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('MIMO Cache')), 'MIMO Cache'), function(element) {
                                                let commonMimoCache = _.filter(commonMcsRates, function(p) { return p['MIMO Cache'] == element; })
                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('MU Config')), 'MU Config'), function(element) {
                                                    let commonMuConfig = _.filter(commonMimoCache, function(p) { return p['MU Config'] == element; })
                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('MU Groups')), 'MU Groups'), function(element) {
                                                        let commonMuGroups = _.filter(commonMuConfig, function(p) { return p['MU Groups'] == element; })
                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Mode/BW')), 'Mode/BW'), function(element) {
                                                            let commonModeBw = _.filter(commonMuGroups, function(p) { return p['Mode/BW'] == element; })
                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('No of clients')), 'No of clients'), function(element) {
                                                                let commonNoofClients = _.filter(commonModeBw, function(p) { return p['No of clients'] == element; })
                                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Pvt build')), 'Pvt build'), function(element) {
                                                                    let commonPvtBuild = _.filter(commonNoofClients, function(p) { return p['Pvt build'] == element; })
                                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('SGI/LGI')), 'SGI/LGI'), function(element) {
                                                                        let commonSgiLgi = _.filter(commonPvtBuild, function(p) { return p['SGI/LGI'] == element; })
                                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('STA1 ANT')), 'STA1 ANT'), function(element) {
                                                                            let commonSta1Ant = _.filter(commonSgiLgi, function(p) { return p['STA1 ANT'] == element; })
                                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('STA2 ANT')), 'STA2 ANT'), function(element) {
                                                                                let commonSta2Ant = _.filter(commonSta1Ant, function(p) { return p['STA2 ANT'] == element; })
                                                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('STA3 ANT')), 'STA3 ANT'), function(element) {
                                                                                    let commonSta3Ant = _.filter(commonSta2Ant, function(p) { return p['STA3 ANT'] == element; })
                                                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('STA4 ANT')), 'STA4 ANT'), function(element) {
                                                                                        let commonSta4Ant = _.filter(commonSta3Ant, function(p) { return p['STA4 ANT'] == element; })
                                                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Security')), 'Security'), function(element) {
                                                                                            let commonuniqSecurity = _.filter(commonSta4Ant, function(p) { return p['Security'] == element; })
                                                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('traffic Tool')), 'traffic Tool'), function(element) {
                                                                                                let commonTrafficTool = _.filter(commonuniqSecurity, function(p) { return p['traffic Tool'] == element; })
                                                                                                if (commonTrafficTool.length) {
                                                                                                    testCompareObjects.push(commonTrafficTool);
                                                                                                }
                                                                                            })
                                                                                        })
                                                                                    })
                                                                                })
                                                                            })
                                                                        })
                                                                    })
                                                                })
                                                            })
                                                        })
                                                    })
                                                })
                                            })
                                        })
                                    })
                                })
                            })
                        })
                    })
                })
            })
            //console.log("testCompareObjects", testCompareObjects);
        return testCompareObjects;
    } catch (err) {
        logger.error("Dl11acMuMimoMerge error : ", err);
    }
}

/* Function to update MAX value date MaxValueMumimoData*/
async function updateMaxValueMuMimoData(smartMergeObj) {
    try {
        _.each(smartMergeObj, function(val) {
            let maxMuUdp = _.pluck(val, "MU UDP");
            let maxSuUdp = _.pluck(val, "SU UDP");
            let maxMuTcp = _.pluck(val, "MU TCP");
            let maxSuTcp = _.pluck(val, "SU TCP");
            _.each(val, function(data) {
                if (_.contains(data, _.max(maxMuUdp))) {
                    data["MU UDP"] = [data["MU UDP"], true];
                } else {
                    data["MU UDP"] = [data["MU UDP"], false];
                }

                if (_.contains(data, _.max(maxSuUdp))) {
                    data["SU UDP"] = [data["SU UDP"], true];
                } else {
                    data["SU UDP"] = [data["SU UDP"], false];
                }

                if (_.contains(data, _.max(maxMuTcp))) {
                    data["MU TCP"] = [data["MU TCP"], true];
                } else {
                    data["MU TCP"] = [data["MU TCP"], false];
                }

                if (_.contains(data, _.max(maxSuTcp))) {
                    data["SU TCP"] = [data["SU TCP"], true];
                } else {
                    data["SU TCP"] = [data["SU TCP"], false];
                }
            })
        })
        return smartMergeObj;
    } catch (err) {
        logger.error("updateMaxValueMuMimoData error : ", err);
    }
}


/* Function to compare IOP TP execution data */
async function smartMergeCompareIopTpData(executions) {
    try {
        let uniqType = _.pluck(_.uniq(_.union(executions), false, _.property('TP TYPE')), 'TP TYPE');
        let uniqDut = _.pluck(_.uniq(_.union(executions), false, _.property('DUT')), 'DUT');
        let uniqSocVer = _.pluck(_.uniq(_.union(executions), false, _.property('SoC Version')), 'SoC Version');
        let uniqSocType = _.pluck(_.uniq(_.union(executions), false, _.property('SoC TYPE')), 'SoC TYPE');
        let uniqDutFwDrv = _.pluck(_.uniq(_.union(executions), false, _.property('DUT Fw/Drv')), 'DUT Fw/Drv');
        let uniqInterface = _.pluck(_.uniq(_.union(executions), false, _.property('Interface')), 'Interface');
        let uniqAggre = _.pluck(_.uniq(_.union(executions), false, _.property('Aggregation')), 'Aggregation');
        let uniqSpatialStreams = _.pluck(_.uniq(_.union(executions), false, _.property('Spatial Streams')), 'Spatial Streams');
        let uniqGuardInterval = _.pluck(_.uniq(_.union(executions), false, _.property('Guard Interval')), 'Guard Interval');
        let uniqDataRate = _.pluck(_.uniq(_.union(executions), false, _.property('Data Rate')), 'Data Rate');
        let uniqChanl1 = _.pluck(_.uniq(_.union(executions), false, _.property('Channel | 2 GHz')), 'Channel | 2 GHz');
        let uniqChanl2 = _.pluck(_.uniq(_.union(executions), false, _.property('Channel | 5 GHz')), 'Channel | 5 GHz');
        let uniqSdioClock = _.pluck(_.uniq(_.union(executions), false, _.property('SDIO Clock')), 'SDIO Clock');
        let uniqCompanionDevice = _.pluck(_.uniq(_.union(executions), false, _.property('Companion Device/Ex-AP/Ex-STA/Ex-P2P-GO/Ex-P2P-GC')), 'Companion Device/Ex-AP/Ex-STA/Ex-P2P-GO/Ex-P2P-GC');
        let uniqCompanionDeviceFWDrv = _.pluck(_.uniq(_.union(executions), false, _.property('Companion Device FW/Drv)')), 'Companion Device FW/Drv)');
        let uniqHostPlatform = _.pluck(_.uniq(_.union(executions), false, _.property('Host Platform')), 'Host Platform');
        let uniqOS = _.pluck(_.uniq(_.union(executions), false, _.property('OS')), 'OS');
        let uniqDUTBeamformingConfig = _.pluck(_.uniq(_.union(executions), false, _.property('DUT Beamforming Config')), 'DUT Beamforming Config');
        let uniqCompanionDeviceBeamformingConfig = _.pluck(_.uniq(_.union(executions), false, _.property('Companion Device Beamforming Config')), 'Companion Device Beamforming Config');
        let uniqDUTLDPC = _.pluck(_.uniq(_.union(executions), false, _.property('DUT LDPC')), 'DUT LDPC');
        let uniqDUTSTBC = _.pluck(_.uniq(_.union(executions), false, _.property('DUT STBC')), 'DUT STBC');
        let uniqEdMac = _.pluck(_.uniq(_.union(executions), false, _.property('EdMac')), 'EdMac');
        let uniqMoreConfiginfo = _.pluck(_.uniq(_.union(executions), false, _.property('More Config info')), 'More Config info');
        let uniqSecurity = _.pluck(_.uniq(_.union(executions), false, _.property('Security')), 'Security');
        //let uniqTestRepetition = _.pluck(_.uniq(_.union(executions), false, _.property('Test Repetition')), 'Test Repetition');

        let testCompareObjects = [];

        _.each(uniqType, function(item) {
            let uniqType1 = _.filter(executions, function(p) { return p['TP TYPE'] == item; })

            _.each(uniqDut, function(item) {
                let uniqDut1 = _.filter(uniqType1, function(p) { return p['DUT'] == item; })

                _.each(uniqSocVer, function(item) {
                    let uniqSocVer1 = _.filter(uniqDut1, function(k) { return k['SoC Version'] == item; })

                    _.each(uniqSocType, function(item) {
                        let uniqSocType1 = _.filter(uniqSocVer1, function(k) { return k['SoC TYPE'] == item; })

                        _.each(uniqDutFwDrv, function(item) {
                            let uniqDutFwDrv1 = _.filter(uniqSocType1, function(k) { return k['DUT Fw/Drv'] == item; })

                            _.each(uniqInterface, function(item) {
                                let uniqInterface1 = _.filter(uniqDutFwDrv1, function(k) { return k['Interface'] == item; })

                                _.each(uniqAggre, function(item) {
                                    let uniqAggre1 = _.filter(uniqInterface1, function(k) { return k['Aggregation'] == item; })

                                    _.each(uniqSpatialStreams, function(item) {
                                        let uniqSpatialStreams1 = _.filter(uniqAggre1, function(k) { return k['Spatial Streams'] == item; })

                                        _.each(uniqGuardInterval, function(item) {
                                            let uniqGuardInterval1 = _.filter(uniqSpatialStreams1, function(k) { return k['Guard Interval'] == item; })

                                            _.each(uniqDataRate, function(item) {
                                                let uniqDataRate1 = _.filter(uniqGuardInterval1, function(k) { return k['Data Rate'] == item; })

                                                _.each(uniqChanl1, function(item) {
                                                    let uniqChanl11 = _.filter(uniqDataRate1, function(k) { return k['Channel | 2 GHz'] == item; })

                                                    _.each(uniqChanl2, function(item) {
                                                        let uniqChanl21 = _.filter(uniqChanl11, function(k) { return k['Channel | 5 GHz'] == item; })

                                                        _.each(uniqSdioClock, function(item) {
                                                            let uniqSdioClock1 = _.filter(uniqChanl21, function(k) { return k['SDIO Clock'] == item; })

                                                            _.each(uniqCompanionDevice, function(item) {
                                                                let uniqCompanionDevice1 = _.filter(uniqSdioClock1, function(k) { return k['Companion Device/Ex-AP/Ex-STA/Ex-P2P-GO/Ex-P2P-GC'] == item; })

                                                                _.each(uniqCompanionDeviceFWDrv, function(item) {
                                                                    let uniqCompanionDeviceFWDrv1 = _.filter(uniqCompanionDevice1, function(k) { return k['Companion Device FW/Drv)'] == item; })

                                                                    _.each(uniqHostPlatform, function(item) {
                                                                        let uniqHostPlatform1 = _.filter(uniqCompanionDeviceFWDrv1, function(k) { return k['Host Platform'] == item; })

                                                                        _.each(uniqOS, function(item) {
                                                                            let uniqOS1 = _.filter(uniqHostPlatform1, function(k) { return k['OS'] == item; })

                                                                            _.each(uniqDUTBeamformingConfig, function(item) {
                                                                                let uniqDUTBeamformingConfig1 = _.filter(uniqOS1, function(k) { return k['DUT Beamforming Config'] == item; })

                                                                                _.each(uniqCompanionDeviceBeamformingConfig, function(item) {
                                                                                    let uniqCompanionDeviceBeamformingConfig1 = _.filter(uniqDUTBeamformingConfig1, function(k) { return k['Companion Device Beamforming Config'] == item; })

                                                                                    _.each(uniqDUTLDPC, function(item) {
                                                                                        let uniqDUTLDPC1 = _.filter(uniqCompanionDeviceBeamformingConfig1, function(k) { return k['DUT LDPC'] == item; })

                                                                                        _.each(uniqDUTSTBC, function(item) {
                                                                                            let uniqDUTSTBC1 = _.filter(uniqDUTLDPC1, function(k) { return k['DUT STBC'] == item; })

                                                                                            _.each(uniqEdMac, function(item) {
                                                                                                let uniqEdMac1 = _.filter(uniqDUTSTBC1, function(k) { return k['EdMac'] == item; })

                                                                                                _.each(uniqMoreConfiginfo, function(item) {
                                                                                                    let uniqMoreConfiginfo1 = _.filter(uniqEdMac1, function(k) { return k['More Config info'] == item; })

                                                                                                    _.each(uniqSecurity, function(item) {
                                                                                                        let uniqSecurity1 = _.filter(uniqMoreConfiginfo1, function(k) { return k['Security'] == item; })

                                                                                                        // _.each(uniqTestRepetition, function(item) {
                                                                                                        //     let uniqTestRepetition1 = _.filter(uniqSecurity1, function(k) { return k['Test Repetition'] == item; })

                                                                                                        if (uniqSecurity1.length) {
                                                                                                            testCompareObjects.push(uniqSecurity1);
                                                                                                        }
                                                                                                        //})
                                                                                                    })
                                                                                                })
                                                                                            })
                                                                                        })
                                                                                    })
                                                                                })
                                                                            })
                                                                        })
                                                                    })
                                                                })
                                                            })
                                                        })
                                                    })
                                                })
                                            })
                                        })
                                    })
                                })
                            })
                        })
                    })
                })
            })
        });
        // console.log("testCompareObject--", testCompareObjects);
        return testCompareObjects;
    } catch (err) {
        logger.error("smartMergeCompareIopTpData error : ", err);
    }
}


/* Function to compare multiple TP execution data */
async function smartMergeCompareTPData(executions) {
    try {
        let uniqTpType = _.pluck(_.uniq(_.union(executions), false, _.property('TP TYPE')), 'TP TYPE');
        let uniqDut = _.pluck(_.uniq(_.union(executions), false, _.property('DUT')), 'DUT');
        let uniqDutFwDrv = _.pluck(_.uniq(_.union(executions), false, _.property('DUT Fw/Drv')), 'DUT Fw/Drv');
        let uniqHostPlatform = _.pluck(_.uniq(_.union(executions), false, _.property('Host Platform')), 'Host Platform');
        let uniqSocType = _.pluck(_.uniq(_.union(executions), false, _.property('SoC TYPE')), 'SoC TYPE');
        let uniqSocVer = _.pluck(_.uniq(_.union(executions), false, _.property('SoC Version')), 'SoC Version');
        let uniqInterface = _.pluck(_.uniq(_.union(executions), false, _.property('Interface')), 'Interface');
        let uniqAggre = _.pluck(_.uniq(_.union(executions), false, _.property('Aggregation')), 'Aggregation');
        let uniqSpatialStreams = _.pluck(_.uniq(_.union(executions), false, _.property('Spatial Streams')), 'Spatial Streams');
        let uniqGuardInterv = _.pluck(_.uniq(_.union(executions), false, _.property('Guard Interval')), 'Guard Interval');
        let uniqDateRate = _.pluck(_.uniq(_.union(executions), false, _.property('Data Rate')), 'Data Rate');
        let uniqChanl2 = _.pluck(_.uniq(_.union(executions), false, _.property('Channel | 2 GHz')), 'Channel | 2 GHz');
        let uniqChanl5 = _.pluck(_.uniq(_.union(executions), false, _.property('Channel | 5 GHz')), 'Channel | 5 GHz');
        let uniqSdioClock = _.pluck(_.uniq(_.union(executions), false, _.property('SDIO Clock')), 'SDIO Clock');
        let uniqCompDevice = _.pluck(_.uniq(_.union(executions), false, _.property('Companion Device FW/Drv')), 'Companion Device FW/Drv');
        let uniqSecurity = _.pluck(_.uniq(_.union(executions), false, _.property('Security')), 'Security');

        let testCompareObjects = [];

        _.each(uniqTpType, function(item) { // 0th iteration 
            let commonItems = _.filter(executions, function(k) { return k['TP TYPE'] == item; })

            _.each(uniqDut, function(item2) { // 1th iteration
                let commonItems2 = _.filter(commonItems, function(k) { return k['DUT'] == item2; })

                _.each(uniqDutFwDrv, function(item3) { // 2th iteration
                    let commonItems3 = _.filter(commonItems2, function(k) { return k['DUT Fw/Drv'] == item3; })

                    _.each(uniqHostPlatform, function(item4) { // 3th iteration
                        let commonItems4 = _.filter(commonItems3, function(k) { return k['Host Platform'] == item4; })

                        _.each(uniqSocType, function(item5) { // 4th iteration
                            let commonItems5 = _.filter(commonItems4, function(k) { return k['SoC TYPE'] == item5; })

                            _.each(uniqSocVer, function(item6) { // 5th iteration
                                let commonItems6 = _.filter(commonItems5, function(k) { return k['SoC Version'] == item6; })

                                _.each(uniqInterface, function(item7) { // 6th iteration
                                    let commonItems7 = _.filter(commonItems6, function(k) { return k['Interface'] == item7; })

                                    _.each(uniqAggre, function(item8) { // 7th iteration
                                        let commonItems8 = _.filter(commonItems7, function(k) { return k['Aggregation'] == item8; })

                                        _.each(uniqSpatialStreams, function(item9) { // 8th iteration
                                            let commonItems9 = _.filter(commonItems8, function(k) { return k['Spatial Streams'] == item9; })

                                            _.each(uniqGuardInterv, function(item10) { // 9th iteration
                                                let commonItems10 = _.filter(commonItems9, function(k) { return k['Guard Interval'] == item10; })

                                                _.each(uniqDateRate, function(item11) { // 10th iteration
                                                    let commonItems11 = _.filter(commonItems10, function(k) { return k['Data Rate'] == item11; })

                                                    _.each(uniqChanl2, function(item12) { // 11th iteration
                                                        let commonItems12 = _.filter(commonItems11, function(k) { return k['Channel | 2 GHz'] == item12; })

                                                        _.each(uniqChanl5, function(item13) { // 12th iteration
                                                            let commonItems13 = _.filter(commonItems12, function(k) { return k['Channel | 5 GHz'] == item13; })

                                                            _.each(uniqSdioClock, function(item14) { // 13th iteration
                                                                let commonItems14 = _.filter(commonItems13, function(k) { return k['SDIO Clock'] == item14; })

                                                                _.each(uniqCompDevice, function(item15) { // 14th iteration
                                                                    let commonItems15 = _.filter(commonItems14, function(k) { return k['Companion Device/'] == item15; })

                                                                    _.each(uniqSecurity, function(item16) { // 15th iteration
                                                                        let commonItems16 = _.filter(commonItems15, function(k) { return k['Security'] == item16; })
                                                                        if (commonItems16.length) {
                                                                            testCompareObjects.push(commonItems16);
                                                                        }
                                                                    })
                                                                })
                                                            })
                                                        })
                                                    })
                                                })
                                            })
                                        })
                                    })
                                })
                            })
                        })
                    })
                })
            })
        })

        //console.log("testCompareObject--", testCompareObjects);
        return testCompareObjects;
    } catch (err) {
        logger.error("smartCompareTPData error : ", err);
    }
}


/* Function to compare multiple BAT CABLE UP execution data */
async function smartMergeCompareBatCableUpData(executions) {
    try {
        let uniqApTpType = _.pluck(_.uniq(_.union(executions), false, _.property('AP_TP TYPE')), 'AP_TP TYPE');
        let uniqDut = _.pluck(_.uniq(_.union(executions), false, _.property('DUT')), 'DUT');
        let uniqSocVer = _.pluck(_.uniq(_.union(executions), false, _.property('SoC Version')), 'SoC Version');
        let uniqSocType = _.pluck(_.uniq(_.union(executions), false, _.property('SoC TYPE')), 'SoC TYPE');
        let uniqRelease = _.pluck(_.uniq(_.union(executions), false, _.property('Release')), 'Release');
        let uniqLspVer = _.pluck(_.uniq(_.union(executions), false, _.property('LSP Ver.')), 'LSP Ver.');
        let uniqDutFwDrv = _.pluck(_.uniq(_.union(executions), false, _.property('DUT Fw/Drv')), 'DUT Fw/Drv');
        let uniqBoard = _.pluck(_.uniq(_.union(executions), false, _.property('Board')), 'Board');
        let uniqInterface = _.pluck(_.uniq(_.union(executions), false, _.property('Interface')), 'Interface');
        let uniqChanl1 = _.pluck(_.uniq(_.union(executions), false, _.property('Channel | 2 GHz')), 'Channel | 2 GHz');
        let uniqChanl2 = _.pluck(_.uniq(_.union(executions), false, _.property('Channel | 5 GHz')), 'Channel | 5 GHz');
        let uniqAggre = _.pluck(_.uniq(_.union(executions), false, _.property('Aggregation')), 'Aggregation');
        let uniq11axNss = _.pluck(_.uniq(_.union(executions), false, _.property('11ax NSS')), '11ax NSS');
        let uniq11acNss = _.pluck(_.uniq(_.union(executions), false, _.property('11ac NSS')), '11ac NSS');
        let uniqGuardInterval = _.pluck(_.uniq(_.union(executions), false, _.property('Guard Interval')), 'Guard Interval');
        let uniqLdpc = _.pluck(_.uniq(_.union(executions), false, _.property('LDPC')), 'LDPC');
        let uniqStbc = _.pluck(_.uniq(_.union(executions), false, _.property('STBC')), 'STBC');
        let uniqWmm = _.pluck(_.uniq(_.union(executions), false, _.property('WMM')), 'WMM');
        let uniqPowerTable = _.pluck(_.uniq(_.union(executions), false, _.property('Power Table')), 'Power Table');
        let uniqSuperBa = _.pluck(_.uniq(_.union(executions), false, _.property('superBA')), 'superBA');
        let uniqRstProtection = _.pluck(_.uniq(_.union(executions), false, _.property('RTS Protection')), 'RTS Protection');
        let uniqBeamForming = _.pluck(_.uniq(_.union(executions), false, _.property('BeamForming')), 'BeamForming');
        let uniqEdmac = _.pluck(_.uniq(_.union(executions), false, _.property('EDMAC')), 'EDMAC');
        let uniqCckDesense = _.pluck(_.uniq(_.union(executions), false, _.property('CCK Desense')), 'CCK Desense');
        let uniqRxAbort = _.pluck(_.uniq(_.union(executions), false, _.property('RX Abort')), 'RX Abort');
        let uniqDataRate = _.pluck(_.uniq(_.union(executions), false, _.property('Data Rate')), 'Data Rate');
        let uniqStaDevice = _.pluck(_.uniq(_.union(executions), false, _.property('STA Device')), 'STA Device');
        let uniqHostPlatform = _.pluck(_.uniq(_.union(executions), false, _.property('Host Platform')), 'Host Platform');
        let uniqStaOsLsp = _.pluck(_.uniq(_.union(executions), false, _.property('STA OS/LSP')), 'STA OS/LSP');
        let uniqStaFwDrv = _.pluck(_.uniq(_.union(executions), false, _.property('STA FW/Drv')), 'STA FW/Drv');
        let uniqSecurity = _.pluck(_.uniq(_.union(executions), false, _.property('Security')), 'Security');
        let Test_id = _.pluck(_.uniq(_.union(executions), false, _.property('Test_id')), 'Test_id');

        let testCompareObjects = [];

        _.each(Test_id, function(element) { // 0th iteration
            let commonElements = _.filter(executions, function(p) { return p['Test_id'] == element; })
                //console.log("common---", commonElements);

            _.each(uniqApTpType, function(item) { // 1th iteration 
                let commonItems = _.filter(commonElements, function(k) { return k['AP_TP TYPE'] == item; })

                _.each(uniqDut, function(item2) { // 2th iteration
                    let commonItems2 = _.filter(commonItems, function(k) { return k['DUT'] == item2; })

                    _.each(uniqSocVer, function(item3) { // 3th iteration
                        let commonItems3 = _.filter(commonItems2, function(k) { return k['SoC Version'] == item3; })

                        _.each(uniqSocType, function(item4) { // 4th iteration
                            let commonItems4 = _.filter(commonItems3, function(k) { return k['SoC TYPE'] == item4; })

                            _.each(uniqRelease, function(item5) { // 5th iteration
                                let commonItems5 = _.filter(commonItems4, function(k) { return k['Release'] == item5; })

                                _.each(uniqLspVer, function(item6) { // 6th iteration
                                    let commonItems6 = _.filter(commonItems5, function(k) { return k['LSP Ver.'] == item6; })

                                    _.each(uniqDutFwDrv, function(item7) { // 7th iteration
                                        let commonItems7 = _.filter(commonItems6, function(k) { return k['DUT Fw/Drv'] == item7; })

                                        _.each(uniqBoard, function(item8) { // 8th iteration
                                            let commonItems8 = _.filter(commonItems7, function(k) { return k['Board'] == item8; })

                                            _.each(uniqInterface, function(item9) { // 9th iteration
                                                let commonItems9 = _.filter(commonItems8, function(k) { return k['Interface'] == item9; })

                                                _.each(uniqChanl1, function(item10) { // 10th iteration
                                                    let commonItems10 = _.filter(commonItems9, function(k) { return k['Channel | 2 GHz'] == item10; })

                                                    _.each(uniqChanl2, function(item11) { // 11th iteration
                                                        let commonItems11 = _.filter(commonItems10, function(k) { return k['Channel | 5 GHz'] == item11; })

                                                        _.each(uniqAggre, function(item12) { // 12th iteration
                                                            let commonItems12 = _.filter(commonItems11, function(k) { return k['Aggregation'] == item12; })

                                                            _.each(uniq11axNss, function(item13) { // 13th iteration
                                                                let commonItems13 = _.filter(commonItems12, function(k) { return k['11ax NSS'] == item13; })

                                                                _.each(uniq11acNss, function(item14) { // 14th iteration
                                                                    let commonItems14 = _.filter(commonItems13, function(k) { return k['11ac NSS'] == item14; })

                                                                    _.each(uniqGuardInterval, function(item15) { // 15th iteration
                                                                        let commonItems15 = _.filter(commonItems14, function(k) { return k['Guard Interval'] == item15; })

                                                                        _.each(uniqLdpc, function(item16) { // 16th iteration
                                                                            let commonItems16 = _.filter(commonItems15, function(k) { return k['LDPC'] == item16; })

                                                                            _.each(uniqStbc, function(item17) { // 17th iteration
                                                                                let commonItems17 = _.filter(commonItems16, function(k) { return k['STBC'] == item17; })

                                                                                _.each(uniqWmm, function(item18) { // 18th iteration
                                                                                    let commonItems18 = _.filter(commonItems17, function(k) { return k['WMM'] == item18; })

                                                                                    _.each(uniqPowerTable, function(item19) { // 19th iteration
                                                                                        let commonItems19 = _.filter(commonItems18, function(k) { return k['Power Table'] == item19; })

                                                                                        _.each(uniqSuperBa, function(item20) { // 20th iteration
                                                                                            let commonItems20 = _.filter(commonItems19, function(k) { return k['superBA'] == item20; })

                                                                                            _.each(uniqRstProtection, function(item21) { // 21th iteration
                                                                                                let commonItems21 = _.filter(commonItems20, function(k) { return k['RTS Protection'] == item21; })

                                                                                                _.each(uniqBeamForming, function(item22) { // 22th iteration
                                                                                                    let commonItems22 = _.filter(commonItems21, function(k) { return k['BeamForming'] == item22; })

                                                                                                    _.each(uniqEdmac, function(item23) { // 23th iteration
                                                                                                        let commonItems23 = _.filter(commonItems22, function(k) { return k['EDMAC'] == item23; })

                                                                                                        _.each(uniqCckDesense, function(item24) { // 24th iteration
                                                                                                            let commonItems24 = _.filter(commonItems23, function(k) { return k['CCK Desense'] == item24; })

                                                                                                            _.each(uniqRxAbort, function(item25) { // 25th iteration
                                                                                                                let commonItems25 = _.filter(commonItems24, function(k) { return k['RX Abort'] == item25; })

                                                                                                                _.each(uniqDataRate, function(item26) { // 26th iteration
                                                                                                                    let commonItems26 = _.filter(commonItems25, function(k) { return k['Data Rate'] == item26; })

                                                                                                                    _.each(uniqStaDevice, function(item27) { // 27th iteration
                                                                                                                        let commonItems27 = _.filter(commonItems26, function(k) { return k['STA Device'] == item27; })

                                                                                                                        _.each(uniqHostPlatform, function(item28) { // 28th iteration
                                                                                                                            let commonItems28 = _.filter(commonItems27, function(k) { return k['Host Platform'] == item28; })

                                                                                                                            _.each(uniqStaOsLsp, function(item29) { // 29th iteration
                                                                                                                                let commonItems29 = _.filter(commonItems28, function(k) { return k['STA OS/LSP'] == item29; })

                                                                                                                                _.each(uniqStaFwDrv, function(item30) { // 30th iteration
                                                                                                                                    let commonItems30 = _.filter(commonItems29, function(k) { return k['STA FW/Drv'] == item30; })

                                                                                                                                    _.each(uniqSecurity, function(item31) { // 31th iteration
                                                                                                                                        let commonItems31 = _.filter(commonItems30, function(k) { return k['Security'] == item31; })

                                                                                                                                        if (commonItems31.length) {
                                                                                                                                            testCompareObjects.push(commonItems31);
                                                                                                                                        }
                                                                                                                                    })
                                                                                                                                })
                                                                                                                            })
                                                                                                                        })
                                                                                                                    })
                                                                                                                })
                                                                                                            })
                                                                                                        })
                                                                                                    })
                                                                                                })
                                                                                            })
                                                                                        })
                                                                                    })
                                                                                })
                                                                            })
                                                                        })
                                                                    })
                                                                })
                                                            })
                                                        })
                                                    })
                                                })
                                            })
                                        })
                                    })
                                })
                            })
                        })
                    })
                })
            })
        });
        //console.log("testCompareObject--", testCompareObjects);
        return testCompareObjects;
    } catch (err) {
        logger.error("smartMergeCompareBatCableUpData error : ", err);
    }
}


/* Function to compare multiple MBSS SCBT execution data */
async function smartMergeCompareMbssScbtData(executions) {
    try {
        let uniqApTpType = _.pluck(_.uniq(_.union(executions), false, _.property('AP_TP TYPE')), 'AP_TP TYPE');
        let uniqDut = _.pluck(_.uniq(_.union(executions), false, _.property('DUT')), 'DUT');
        let uniqSocVer = _.pluck(_.uniq(_.union(executions), false, _.property('SoC Version')), 'SoC Version');
        let uniqSocType = _.pluck(_.uniq(_.union(executions), false, _.property('SoC TYPE')), 'SoC TYPE');
        let uniqRelease = _.pluck(_.uniq(_.union(executions), false, _.property('Release')), 'Release');
        let uniqLspVer = _.pluck(_.uniq(_.union(executions), false, _.property('LSP Ver.')), 'LSP Ver.');
        let uniqDutFwDrv = _.pluck(_.uniq(_.union(executions), false, _.property('DUT Fw/Drv')), 'DUT Fw/Drv');
        let uniqBoard = _.pluck(_.uniq(_.union(executions), false, _.property('Board')), 'Board');
        let uniqInterface = _.pluck(_.uniq(_.union(executions), false, _.property('Interface')), 'Interface');
        let uniqChanl1 = _.pluck(_.uniq(_.union(executions), false, _.property('Channel | 2 GHz')), 'Channel | 2 GHz');
        let uniqChanl2 = _.pluck(_.uniq(_.union(executions), false, _.property('Channel | 5 GHz')), 'Channel | 5 GHz');
        let uniqAggre = _.pluck(_.uniq(_.union(executions), false, _.property('Aggregation')), 'Aggregation');
        let uniq11axNss = _.pluck(_.uniq(_.union(executions), false, _.property('11ax NSS')), '11ax NSS');
        let uniq11acNss = _.pluck(_.uniq(_.union(executions), false, _.property('11ac NSS')), '11ac NSS');
        let uniqGuardInterval = _.pluck(_.uniq(_.union(executions), false, _.property('Guard Interval')), 'Guard Interval');
        let uniqLdpc = _.pluck(_.uniq(_.union(executions), false, _.property('LDPC')), 'LDPC');
        let uniqStbc = _.pluck(_.uniq(_.union(executions), false, _.property('STBC')), 'STBC');
        let uniqWmm = _.pluck(_.uniq(_.union(executions), false, _.property('WMM')), 'WMM');
        let uniqPowerTable = _.pluck(_.uniq(_.union(executions), false, _.property('Power Table')), 'Power Table');
        let uniqSuperBa = _.pluck(_.uniq(_.union(executions), false, _.property('superBA')), 'superBA');
        let uniqRstProtection = _.pluck(_.uniq(_.union(executions), false, _.property('RTS Protection')), 'RTS Protection');
        let uniqBeamForming = _.pluck(_.uniq(_.union(executions), false, _.property('BeamForming')), 'BeamForming');
        let uniqEdmac = _.pluck(_.uniq(_.union(executions), false, _.property('EDMAC')), 'EDMAC');
        let uniqCckDesense = _.pluck(_.uniq(_.union(executions), false, _.property('CCK Desense')), 'CCK Desense');
        let uniqRxAbort = _.pluck(_.uniq(_.union(executions), false, _.property('RX Abort')), 'RX Abort');
        let uniqDataRate = _.pluck(_.uniq(_.union(executions), false, _.property('Data Rate')), 'Data Rate');
        let uniqStaDevice = _.pluck(_.uniq(_.union(executions), false, _.property('STA Device')), 'STA Device');
        let uniqHostPlatform = _.pluck(_.uniq(_.union(executions), false, _.property('Host Platform')), 'Host Platform');
        let uniqStaOsLsp = _.pluck(_.uniq(_.union(executions), false, _.property('STA OS/LSP')), 'STA OS/LSP');
        let uniqStaFwDrv = _.pluck(_.uniq(_.union(executions), false, _.property('STA FW/Drv')), 'STA FW/Drv');
        let uniqSecurity = _.pluck(_.uniq(_.union(executions), false, _.property('Security')), 'Security');
        let uniqBss = _.pluck(_.uniq(_.union(executions), false, _.property('BSS')), 'BSS');
        let Test_id = _.pluck(_.uniq(_.union(executions), false, _.property('Test_id')), 'Test_id');

        let testCompareObjects = [];

        _.each(Test_id, function(element) { // 0th iteration
            let commonElements = _.filter(executions, function(p) { return p['Test_id'] == element; })
                //console.log("common---", commonElements);

            _.each(uniqApTpType, function(item) { // 1th iteration 
                let commonItems = _.filter(commonElements, function(k) { return k['AP_TP TYPE'] == item; })

                _.each(uniqDut, function(item2) { // 2th iteration
                    let commonItems2 = _.filter(commonItems, function(k) { return k['DUT'] == item2; })

                    _.each(uniqSocVer, function(item3) { // 3th iteration
                        let commonItems3 = _.filter(commonItems2, function(k) { return k['SoC Version'] == item3; })

                        _.each(uniqSocType, function(item4) { // 4th iteration
                            let commonItems4 = _.filter(commonItems3, function(k) { return k['SoC TYPE'] == item4; })

                            _.each(uniqRelease, function(item5) { // 5th iteration
                                let commonItems5 = _.filter(commonItems4, function(k) { return k['Release'] == item5; })

                                _.each(uniqLspVer, function(item6) { // 6th iteration
                                    let commonItems6 = _.filter(commonItems5, function(k) { return k['LSP Ver.'] == item6; })

                                    _.each(uniqDutFwDrv, function(item7) { // 7th iteration
                                        let commonItems7 = _.filter(commonItems6, function(k) { return k['DUT Fw/Drv'] == item7; })

                                        _.each(uniqBoard, function(item8) { // 8th iteration
                                            let commonItems8 = _.filter(commonItems7, function(k) { return k['Board'] == item8; })

                                            _.each(uniqInterface, function(item9) { // 9th iteration
                                                let commonItems9 = _.filter(commonItems8, function(k) { return k['Interface'] == item9; })

                                                _.each(uniqChanl1, function(item10) { // 10th iteration
                                                    let commonItems10 = _.filter(commonItems9, function(k) { return k['Channel | 2 GHz'] == item10; })

                                                    _.each(uniqChanl2, function(item11) { // 11th iteration
                                                        let commonItems11 = _.filter(commonItems10, function(k) { return k['Channel | 5 GHz'] == item11; })

                                                        _.each(uniqAggre, function(item12) { // 12th iteration
                                                            let commonItems12 = _.filter(commonItems11, function(k) { return k['Aggregation'] == item12; })

                                                            _.each(uniq11axNss, function(item13) { // 13th iteration
                                                                let commonItems13 = _.filter(commonItems12, function(k) { return k['11ax NSS'] == item13; })

                                                                _.each(uniq11acNss, function(item14) { // 14th iteration
                                                                    let commonItems14 = _.filter(commonItems13, function(k) { return k['11ac NSS'] == item14; })

                                                                    _.each(uniqGuardInterval, function(item15) { // 15th iteration
                                                                        let commonItems15 = _.filter(commonItems14, function(k) { return k['Guard Interval'] == item15; })

                                                                        _.each(uniqLdpc, function(item16) { // 16th iteration
                                                                            let commonItems16 = _.filter(commonItems15, function(k) { return k['LDPC'] == item16; })

                                                                            _.each(uniqStbc, function(item17) { // 17th iteration
                                                                                let commonItems17 = _.filter(commonItems16, function(k) { return k['STBC'] == item17; })

                                                                                _.each(uniqWmm, function(item18) { // 18th iteration
                                                                                    let commonItems18 = _.filter(commonItems17, function(k) { return k['WMM'] == item18; })

                                                                                    _.each(uniqPowerTable, function(item19) { // 19th iteration
                                                                                        let commonItems19 = _.filter(commonItems18, function(k) { return k['Power Table'] == item19; })

                                                                                        _.each(uniqSuperBa, function(item20) { // 20th iteration
                                                                                            let commonItems20 = _.filter(commonItems19, function(k) { return k['superBA'] == item20; })

                                                                                            _.each(uniqRstProtection, function(item21) { // 21th iteration
                                                                                                let commonItems21 = _.filter(commonItems20, function(k) { return k['RTS Protection'] == item21; })

                                                                                                _.each(uniqBeamForming, function(item22) { // 22th iteration
                                                                                                    let commonItems22 = _.filter(commonItems21, function(k) { return k['BeamForming'] == item22; })

                                                                                                    _.each(uniqEdmac, function(item23) { // 23th iteration
                                                                                                        let commonItems23 = _.filter(commonItems22, function(k) { return k['EDMAC'] == item23; })

                                                                                                        _.each(uniqCckDesense, function(item24) { // 24th iteration
                                                                                                            let commonItems24 = _.filter(commonItems23, function(k) { return k['CCK Desense'] == item24; })

                                                                                                            _.each(uniqRxAbort, function(item25) { // 25th iteration
                                                                                                                let commonItems25 = _.filter(commonItems24, function(k) { return k['RX Abort'] == item25; })

                                                                                                                _.each(uniqDataRate, function(item26) { // 26th iteration
                                                                                                                    let commonItems26 = _.filter(commonItems25, function(k) { return k['Data Rate'] == item26; })

                                                                                                                    _.each(uniqStaDevice, function(item27) { // 27th iteration
                                                                                                                        let commonItems27 = _.filter(commonItems26, function(k) { return k['STA Device'] == item27; })

                                                                                                                        _.each(uniqHostPlatform, function(item28) { // 28th iteration
                                                                                                                            let commonItems28 = _.filter(commonItems27, function(k) { return k['Host Platform'] == item28; })

                                                                                                                            _.each(uniqStaOsLsp, function(item29) { // 29th iteration
                                                                                                                                let commonItems29 = _.filter(commonItems28, function(k) { return k['STA OS/LSP'] == item29; })

                                                                                                                                _.each(uniqStaFwDrv, function(item30) { // 30th iteration
                                                                                                                                    let commonItems30 = _.filter(commonItems29, function(k) { return k['STA FW/Drv'] == item30; })

                                                                                                                                    _.each(uniqSecurity, function(item31) { // 31th iteration
                                                                                                                                        let commonItems31 = _.filter(commonItems30, function(k) { return k['Security'] == item31; })

                                                                                                                                        _.each(uniqBss, function(item32) { // 31th iteration
                                                                                                                                            let commonItems32 = _.filter(commonItems31, function(k) { return k['BSS'] == item32; })

                                                                                                                                            if (commonItems32.length) {
                                                                                                                                                testCompareObjects.push(commonItems32);
                                                                                                                                            }
                                                                                                                                        })
                                                                                                                                    })
                                                                                                                                })
                                                                                                                            })
                                                                                                                        })
                                                                                                                    })
                                                                                                                })
                                                                                                            })
                                                                                                        })
                                                                                                    })
                                                                                                })
                                                                                            })
                                                                                        })
                                                                                    })
                                                                                })
                                                                            })
                                                                        })
                                                                    })
                                                                })
                                                            })
                                                        })
                                                    })
                                                })
                                            })
                                        })
                                    })
                                })
                            })
                        })
                    })
                })
            })
        });
        //console.log("testCompareObject--", testCompareObjects);
        return testCompareObjects;
    } catch (err) {
        logger.error("smartMergeCompareMbssScbtData error : ", err);
    }
}


/* Function to compare multiple MBSS SCBT execution data */
async function smartMergeCompareIopPerfData(executions) {
    try {
        let uniqIopTpType = _.pluck(_.uniq(_.union(executions), false, _.property('IOP_TP TYPE')), 'IOP_TP TYPE');
        let uniqDut = _.pluck(_.uniq(_.union(executions), false, _.property('DUT')), 'DUT');
        let uniqSocVer = _.pluck(_.uniq(_.union(executions), false, _.property('SoC Version')), 'SoC Version');
        let uniqSocType = _.pluck(_.uniq(_.union(executions), false, _.property('SoC TYPE')), 'SoC TYPE');
        let uniqRelease = _.pluck(_.uniq(_.union(executions), false, _.property('Release')), 'Release');
        let uniqLspVer = _.pluck(_.uniq(_.union(executions), false, _.property('LSP Ver.')), 'LSP Ver.');
        let uniqDutFwDrv = _.pluck(_.uniq(_.union(executions), false, _.property('DUT Fw/Drv')), 'DUT Fw/Drv');
        let uniqBoard = _.pluck(_.uniq(_.union(executions), false, _.property('Board')), 'Board');
        let uniqInterface = _.pluck(_.uniq(_.union(executions), false, _.property('Interface')), 'Interface');
        let uniqChanl1 = _.pluck(_.uniq(_.union(executions), false, _.property('Channel | 2 GHz')), 'Channel | 2 GHz');
        let uniqChanl2 = _.pluck(_.uniq(_.union(executions), false, _.property('Channel | 5 GHz')), 'Channel | 5 GHz');
        let uniqAggre = _.pluck(_.uniq(_.union(executions), false, _.property('Aggregation')), 'Aggregation');
        let uniq11axNss = _.pluck(_.uniq(_.union(executions), false, _.property('11ax NSS')), '11ax NSS');
        let uniq11acNss = _.pluck(_.uniq(_.union(executions), false, _.property('11ac NSS')), '11ac NSS');
        let uniqGuardInterval = _.pluck(_.uniq(_.union(executions), false, _.property('Guard Interval')), 'Guard Interval');
        let uniqWmm = _.pluck(_.uniq(_.union(executions), false, _.property('WMM')), 'WMM');
        let uniqPowerTable = _.pluck(_.uniq(_.union(executions), false, _.property('Power Table')), 'Power Table');
        let uniqSuperBa = _.pluck(_.uniq(_.union(executions), false, _.property('superBA')), 'superBA');
        let uniqRstProtection = _.pluck(_.uniq(_.union(executions), false, _.property('RTS Protection')), 'RTS Protection');
        let uniqBeamForming = _.pluck(_.uniq(_.union(executions), false, _.property('BeamForming')), 'BeamForming');
        let uniqDataRate = _.pluck(_.uniq(_.union(executions), false, _.property('Data Rate')), 'Data Rate');
        let uniqStaDevice = _.pluck(_.uniq(_.union(executions), false, _.property('STA Device')), 'STA Device');
        let uniqCategory = _.pluck(_.uniq(_.union(executions), false, _.property('Category')), 'Category');
        let uniqStaFwDrv = _.pluck(_.uniq(_.union(executions), false, _.property('STA FW/Drv')), 'STA FW/Drv');
        let uniqPhyType = _.pluck(_.uniq(_.union(executions), false, _.property('PHY TYPE')), 'PHY TYPE');
        let uniqSecurity = _.pluck(_.uniq(_.union(executions), false, _.property('Security')), 'Security');
        let Test_id = _.pluck(_.uniq(_.union(executions), false, _.property('Test_id')), 'Test_id');

        let testCompareObjects = [];

        _.each(Test_id, function(element) { // 0th iteration
            let commonElements = _.filter(executions, function(p) { return p['Test_id'] == element; })
                //console.log("common---", commonElements);

            _.each(uniqIopTpType, function(item) { // 1th iteration 
                let commonItems = _.filter(commonElements, function(k) { return k['IOP_TP TYPE'] == item; })

                _.each(uniqDut, function(item2) { // 2th iteration
                    let commonItems2 = _.filter(commonItems, function(k) { return k['DUT'] == item2; })

                    _.each(uniqSocVer, function(item3) { // 3th iteration
                        let commonItems3 = _.filter(commonItems2, function(k) { return k['SoC Version'] == item3; })

                        _.each(uniqSocType, function(item4) { // 4th iteration
                            let commonItems4 = _.filter(commonItems3, function(k) { return k['SoC TYPE'] == item4; })

                            _.each(uniqRelease, function(item5) { // 5th iteration
                                let commonItems5 = _.filter(commonItems4, function(k) { return k['Release'] == item5; })

                                _.each(uniqLspVer, function(item6) { // 6th iteration
                                    let commonItems6 = _.filter(commonItems5, function(k) { return k['LSP Ver.'] == item6; })

                                    _.each(uniqDutFwDrv, function(item7) { // 7th iteration
                                        let commonItems7 = _.filter(commonItems6, function(k) { return k['DUT Fw/Drv'] == item7; })

                                        _.each(uniqBoard, function(item8) { // 8th iteration
                                            let commonItems8 = _.filter(commonItems7, function(k) { return k['Board'] == item8; })

                                            _.each(uniqInterface, function(item9) { // 9th iteration
                                                let commonItems9 = _.filter(commonItems8, function(k) { return k['Interface'] == item9; })

                                                _.each(uniqChanl1, function(item10) { // 10th iteration
                                                    let commonItems10 = _.filter(commonItems9, function(k) { return k['Channel | 2 GHz'] == item10; })

                                                    _.each(uniqChanl2, function(item11) { // 11th iteration
                                                        let commonItems11 = _.filter(commonItems10, function(k) { return k['Channel | 5 GHz'] == item11; })

                                                        _.each(uniqAggre, function(item12) { // 12th iteration
                                                            let commonItems12 = _.filter(commonItems11, function(k) { return k['Aggregation'] == item12; })

                                                            _.each(uniq11axNss, function(item13) { // 13th iteration
                                                                let commonItems13 = _.filter(commonItems12, function(k) { return k['11ax NSS'] == item13; })

                                                                _.each(uniq11acNss, function(item14) { // 14th iteration
                                                                    let commonItems14 = _.filter(commonItems13, function(k) { return k['11ac NSS'] == item14; })

                                                                    _.each(uniqGuardInterval, function(item15) { // 15th iteration
                                                                        let commonItems15 = _.filter(commonItems14, function(k) { return k['Guard Interval'] == item15; })

                                                                        _.each(uniqWmm, function(item16) { // 16th iteration
                                                                            let commonItems16 = _.filter(commonItems15, function(k) { return k['WMM'] == item16; })

                                                                            _.each(uniqPowerTable, function(item17) { // 17th iteration
                                                                                let commonItems17 = _.filter(commonItems16, function(k) { return k['Power Table'] == item17; })

                                                                                _.each(uniqSuperBa, function(item18) { // 18th iteration
                                                                                    let commonItems18 = _.filter(commonItems17, function(k) { return k['superBA'] == item18; })

                                                                                    _.each(uniqRstProtection, function(item19) { // 19th iteration
                                                                                        let commonItems19 = _.filter(commonItems18, function(k) { return k['RTS Protection'] == item19; })

                                                                                        _.each(uniqBeamForming, function(item20) { // 20th iteration
                                                                                            let commonItems20 = _.filter(commonItems19, function(k) { return k['BeamForming'] == item20; })

                                                                                            _.each(uniqDataRate, function(item21) { // 21th iteration
                                                                                                let commonItems21 = _.filter(commonItems20, function(k) { return k['Data Rate'] == item21; })

                                                                                                _.each(uniqStaDevice, function(item22) { // 22th iteration
                                                                                                    let commonItems22 = _.filter(commonItems21, function(k) { return k['STA Device'] == item22; })

                                                                                                    _.each(uniqCategory, function(item23) { // 23th iteration
                                                                                                        let commonItems23 = _.filter(commonItems22, function(k) { return k['Category'] == item23; })

                                                                                                        _.each(uniqStaFwDrv, function(item24) { // 24th iteration
                                                                                                            let commonItems24 = _.filter(commonItems23, function(k) { return k['STA FW/Drv'] == item24; })

                                                                                                            _.each(uniqPhyType, function(item25) { // 25th iteration
                                                                                                                let commonItems25 = _.filter(commonItems24, function(k) { return k['PHY TYPE'] == item25; })

                                                                                                                _.each(uniqSecurity, function(item26) { // 26th iteration
                                                                                                                    let commonItems26 = _.filter(commonItems25, function(k) { return k['Security'] == item26; })

                                                                                                                    if (commonItems26.length) {
                                                                                                                        testCompareObjects.push(commonItems26);
                                                                                                                    }
                                                                                                                })
                                                                                                            })
                                                                                                        })
                                                                                                    })
                                                                                                })
                                                                                            })
                                                                                        })
                                                                                    })
                                                                                })
                                                                            })
                                                                        })
                                                                    })
                                                                })
                                                            })
                                                        })
                                                    })
                                                })
                                            })
                                        })
                                    })
                                })
                            })
                        })
                    })
                })
            })
        });
        //console.log("testCompareObject--", testCompareObjects);
        return testCompareObjects;
    } catch (err) {
        logger.error("smartMergeCompareIopPerfData error : ", err);
    }
}


/* Function to Update max value status */
async function updateMaxValue(smartMergeObj) {
    let HE_160_5 = [],
        HE_160_5_val = [];
    let HE_80_5 = [],
        HE_80_5_val = [];
    let HE_40_2 = [],
        HE_40_2_val = [];
    let HE_40_5 = [],
        HE_40_5_val = [];
    let HE_20_2 = [],
        HE_20_2_val = [];
    let HE_20_5 = [],
        HE_20_5_val = [];
    let VHT_160_5 = [],
        VHT_160_5_val = [];
    let VHT_80_5 = [],
        VHT_80_5_val = [];
    let VHT_40_2 = [],
        VHT_40_2_val = [];
    let VHT_40_5 = [],
        VHT_40_5_val = [];
    let VHT_20_2 = [],
        VHT_20_2_val = [];
    let VHT_20_5 = [],
        VHT_20_5_val = [];
    let HT_40_5 = [],
        HT_40_5_val = [];
    let HT_40_2 = [],
        HT_40_2_val = [];
    let HT_20_5 = [],
        HT_20_5_val = [];
    let HT_20_2 = [],
        HT_20_2_val = [];
    let Non_HT_BG = [],
        Non_HT_BG_val = [];
    let Non_HT_A = [],
        Non_HT_A_val = [];
    let Non_HT_B = [],
        Non_HT_B_val = [];
    let Iop_Perf_5 = [],
        Iop_Perf_5_val = [];
    let Iop_Perf_2 = [],
        Iop_Perf_2_val = [];
    let innerArr = [];


    try {

        for (var j = 0; j < smartMergeObj.length; j++) {

            //if (smartMergeObj[j].length > 1) {
            innerArr = [];
            innerArr.push(smartMergeObj[j]);

            for (var i = 0; i < smartMergeObj[j].length; i++) {

                if (typeof smartMergeObj[j][i]["HE-160MHz | 5GHz"] != 'undefined') {

                    HE_160_5.push(smartMergeObj[j][i]["HE-160MHz | 5GHz"]["Tcp_Tx"] ? smartMergeObj[j][i]["HE-160MHz | 5GHz"]["Tcp_Tx"]["value"] : '');
                    HE_160_5.push(smartMergeObj[j][i]["HE-160MHz | 5GHz"]["Tcp_Rx"] ? smartMergeObj[j][i]["HE-160MHz | 5GHz"]["Tcp_Rx"]["value"] : '');
                    HE_160_5.push(smartMergeObj[j][i]["HE-160MHz | 5GHz"]["Tcp_BI"] ? smartMergeObj[j][i]["HE-160MHz | 5GHz"]["Tcp_BI"]["value"] : '');
                    HE_160_5.push(smartMergeObj[j][i]["HE-160MHz | 5GHz"]["Udp_Tx"] ? smartMergeObj[j][i]["HE-160MHz | 5GHz"]["Udp_Tx"]["value"] : '');
                    HE_160_5.push(smartMergeObj[j][i]["HE-160MHz | 5GHz"]["Udp_Rx"] ? smartMergeObj[j][i]["HE-160MHz | 5GHz"]["Udp_Rx"]["value"] : '');
                    HE_160_5.push(smartMergeObj[j][i]["HE-160MHz | 5GHz"]["Udp_BI"] ? smartMergeObj[j][i]["HE-160MHz | 5GHz"]["Udp_BI"]["value"] : '');

                    HE_160_5_val.push(HE_160_5);
                }

                if (typeof smartMergeObj[j][i]["HE-80MHz | 5GHz"] != 'undefined') {

                    HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Tcp_Tx"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Tcp_Tx"]["value"] : '');
                    HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Tcp_Rx"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Tcp_Rx"]["value"] : '');
                    HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Tcp_BI"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Tcp_BI"]["value"] : '');
                    HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Udp_Tx"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Udp_Tx"]["value"] : '');
                    HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Udp_Rx"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Udp_Rx"]["value"] : '');
                    HE_80_5.push(smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Udp_BI"] ? smartMergeObj[j][i]["HE-80MHz | 5GHz"]["Udp_BI"]["value"] : '');

                    HE_80_5_val.push(HE_80_5);
                }

                if (typeof smartMergeObj[j][i]["HE-40MHz | 2GHz"] != 'undefined') {

                    HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Tcp_Tx"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Tcp_Tx"]["value"] : '');
                    HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Tcp_Rx"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Tcp_Rx"]["value"] : '');
                    HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Tcp_BI"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Tcp_BI"]["value"] : '');
                    HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Udp_Tx"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Udp_Tx"]["value"] : '');
                    HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Udp_Rx"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Udp_Rx"]["value"] : '');
                    HE_40_2.push(smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Udp_BI"] ? smartMergeObj[j][i]["HE-40MHz | 2GHz"]["Udp_BI"]["value"] : '');

                    HE_40_2_val.push(HE_40_2);
                }

                if (typeof smartMergeObj[j][i]["HE-40MHz | 5GHz"] != 'undefined') {

                    HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Tcp_Tx"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Tcp_Tx"]["value"] : '');
                    HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Tcp_Rx"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Tcp_Rx"]["value"] : '');
                    HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Tcp_BI"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Tcp_BI"]["value"] : '');
                    HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Udp_Tx"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Udp_Tx"]["value"] : '');
                    HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Udp_Rx"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Udp_Rx"]["value"] : '');
                    HE_40_5.push(smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Udp_BI"] ? smartMergeObj[j][i]["HE-40MHz | 5GHz"]["Udp_BI"]["value"] : '');

                    HE_40_5_val.push(HE_40_5);
                }

                if (typeof smartMergeObj[j][i]["HE-20MHz | 2GHz"] != 'undefined') {

                    HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Tcp_Tx"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Tcp_Tx"]["value"] : '');
                    HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Tcp_Rx"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Tcp_Rx"]["value"] : '');
                    HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Tcp_BI"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Tcp_BI"]["value"] : '');
                    HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Udp_Tx"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Udp_Tx"]["value"] : '');
                    HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Udp_Rx"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Udp_Rx"]["value"] : '');
                    HE_20_2.push(smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Udp_BI"] ? smartMergeObj[j][i]["HE-20MHz | 2GHz"]["Udp_BI"]["value"] : '');

                    HE_20_2_val.push(HE_20_2);
                }

                if (typeof smartMergeObj[j][i]["HE-20MHz | 5GHz"] != 'undefined') {

                    HE_20_5.push(smartMergeObj[j][i]["HE-20MHz | 5GHz"]["Tcp_Tx"] ? smartMergeObj[j][i]["HE-20MHz | 5GHz"]["Tcp_Tx"]["value"] : '');
                    HE_20_5.push(smartMergeObj[j][i]["HE-20MHz | 5GHz"]["Tcp_Rx"] ? smartMergeObj[j][i]["HE-20MHz | 5GHz"]["Tcp_Rx"]["value"] : '');
                    HE_20_5.push(smartMergeObj[j][i]["HE-20MHz | 5GHz"]["Tcp_BI"] ? smartMergeObj[j][i]["HE-20MHz | 5GHz"]["Tcp_BI"]["value"] : '');
                    HE_20_5.push(smartMergeObj[j][i]["HE-20MHz | 5GHz"]["Udp_Tx"] ? smartMergeObj[j][i]["HE-20MHz | 5GHz"]["Udp_Tx"]["value"] : '');
                    HE_20_5.push(smartMergeObj[j][i]["HE-20MHz | 5GHz"]["Udp_Rx"] ? smartMergeObj[j][i]["HE-20MHz | 5GHz"]["Udp_Rx"]["value"] : '');
                    HE_20_5.push(smartMergeObj[j][i]["HE-20MHz | 5GHz"]["Udp_BI"] ? smartMergeObj[j][i]["HE-20MHz | 5GHz"]["Udp_BI"]["value"] : '');

                    HE_20_5_val.push(HE_20_5);
                }

                if (typeof smartMergeObj[j][i]["VHT-160MHz | 5GHz"] != 'undefined') {

                    VHT_160_5.push(smartMergeObj[j][i]["VHT-160MHz | 5GHz"]["Tcp_Tx"] ? smartMergeObj[j][i]["VHT-160MHz | 5GHz"]["Tcp_Tx"]["value"] : '');
                    VHT_160_5.push(smartMergeObj[j][i]["VHT-160MHz | 5GHz"]["Tcp_Rx"] ? smartMergeObj[j][i]["VHT-160MHz | 5GHz"]["Tcp_Rx"]["value"] : '');
                    VHT_160_5.push(smartMergeObj[j][i]["VHT-160MHz | 5GHz"]["Tcp_BI"] ? smartMergeObj[j][i]["VHT-160MHz | 5GHz"]["Tcp_BI"]["value"] : '');
                    VHT_160_5.push(smartMergeObj[j][i]["VHT-160MHz | 5GHz"]["Udp_Tx"] ? smartMergeObj[j][i]["VHT-160MHz | 5GHz"]["Udp_Tx"]["value"] : '');
                    VHT_160_5.push(smartMergeObj[j][i]["VHT-160MHz | 5GHz"]["Udp_Rx"] ? smartMergeObj[j][i]["VHT-160MHz | 5GHz"]["Udp_Rx"]["value"] : '');
                    VHT_160_5.push(smartMergeObj[j][i]["VHT-160MHz | 5GHz"]["Udp_BI"] ? smartMergeObj[j][i]["VHT-160MHz | 5GHz"]["Udp_BI"]["value"] : '');

                    VHT_160_5_val.push(VHT_160_5);
                }

                if (typeof smartMergeObj[j][i]["VHT-80MHz | 5GHz"] != 'undefined') {

                    VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Tcp_Tx"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Tcp_Tx"]["value"] : '');
                    VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Tcp_Rx"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Tcp_Rx"]["value"] : '');
                    VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Tcp_BI"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Tcp_BI"]["value"] : '');
                    VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Udp_Tx"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Udp_Tx"]["value"] : '');
                    VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Udp_Rx"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Udp_Rx"]["value"] : '');
                    VHT_80_5.push(smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Udp_BI"] ? smartMergeObj[j][i]["VHT-80MHz | 5GHz"]["Udp_BI"]["value"] : '');

                    VHT_80_5_val.push(VHT_80_5);
                }

                if (typeof smartMergeObj[j][i]["VHT-40MHz | 2GHz"] != 'undefined') {

                    VHT_40_2.push(smartMergeObj[j][i]["VHT-40MHz | 2GHz"]["Tcp_Tx"] ? smartMergeObj[j][i]["VHT-40MHz | 2GHz"]["Tcp_Tx"]["value"] : '');
                    VHT_40_2.push(smartMergeObj[j][i]["VHT-40MHz | 2GHz"]["Tcp_Rx"] ? smartMergeObj[j][i]["VHT-40MHz | 2GHz"]["Tcp_Rx"]["value"] : '');
                    VHT_40_2.push(smartMergeObj[j][i]["VHT-40MHz | 2GHz"]["Tcp_BI"] ? smartMergeObj[j][i]["VHT-40MHz | 2GHz"]["Tcp_BI"]["value"] : '');
                    VHT_40_2.push(smartMergeObj[j][i]["VHT-40MHz | 2GHz"]["Udp_Tx"] ? smartMergeObj[j][i]["VHT-40MHz | 2GHz"]["Udp_Tx"]["value"] : '');
                    VHT_40_2.push(smartMergeObj[j][i]["VHT-40MHz | 2GHz"]["Udp_Rx"] ? smartMergeObj[j][i]["VHT-40MHz | 2GHz"]["Udp_Rx"]["value"] : '');
                    VHT_40_2.push(smartMergeObj[j][i]["VHT-40MHz | 2GHz"]["Udp_BI"] ? smartMergeObj[j][i]["VHT-40MHz | 2GHz"]["Udp_BI"]["value"] : '');

                    VHT_40_2_val.push(VHT_40_2);
                }

                if (typeof smartMergeObj[j][i]["VHT-40MHz | 5GHz"] != 'undefined') {

                    VHT_40_5.push(smartMergeObj[j][i]["VHT-40MHz | 5GHz"]["Tcp_Tx"] ? smartMergeObj[j][i]["VHT-40MHz | 5GHz"]["Tcp_Tx"]["value"] : '');
                    VHT_40_5.push(smartMergeObj[j][i]["VHT-40MHz | 5GHz"]["Tcp_Rx"] ? smartMergeObj[j][i]["VHT-40MHz | 5GHz"]["Tcp_Rx"]["value"] : '');
                    VHT_40_5.push(smartMergeObj[j][i]["VHT-40MHz | 5GHz"]["Tcp_BI"] ? smartMergeObj[j][i]["VHT-40MHz | 5GHz"]["Tcp_BI"]["value"] : '');
                    VHT_40_5.push(smartMergeObj[j][i]["VHT-40MHz | 5GHz"]["Udp_Tx"] ? smartMergeObj[j][i]["VHT-40MHz | 5GHz"]["Udp_Tx"]["value"] : '');
                    VHT_40_5.push(smartMergeObj[j][i]["VHT-40MHz | 5GHz"]["Udp_Rx"] ? smartMergeObj[j][i]["VHT-40MHz | 5GHz"]["Udp_Rx"]["value"] : '');
                    VHT_40_5.push(smartMergeObj[j][i]["VHT-40MHz | 5GHz"]["Udp_BI"] ? smartMergeObj[j][i]["VHT-40MHz | 5GHz"]["Udp_BI"]["value"] : '');

                    VHT_40_5_val.push(VHT_40_5);
                }

                if (typeof smartMergeObj[j][i]["VHT-20MHz | 2GHz"] != 'undefined') {

                    VHT_20_2.push(smartMergeObj[j][i]["VHT-20MHz | 2GHz"]["Tcp_Tx"] ? smartMergeObj[j][i]["VHT-20MHz | 2GHz"]["Tcp_Tx"]["value"] : '');
                    VHT_20_2.push(smartMergeObj[j][i]["VHT-20MHz | 2GHz"]["Tcp_Rx"] ? smartMergeObj[j][i]["VHT-20MHz | 2GHz"]["Tcp_Rx"]["value"] : '');
                    VHT_20_2.push(smartMergeObj[j][i]["VHT-20MHz | 2GHz"]["Tcp_BI"] ? smartMergeObj[j][i]["VHT-20MHz | 2GHz"]["Tcp_BI"]["value"] : '');
                    VHT_20_2.push(smartMergeObj[j][i]["VHT-20MHz | 2GHz"]["Udp_Tx"] ? smartMergeObj[j][i]["VHT-20MHz | 2GHz"]["Udp_Tx"]["value"] : '');
                    VHT_20_2.push(smartMergeObj[j][i]["VHT-20MHz | 2GHz"]["Udp_Rx"] ? smartMergeObj[j][i]["VHT-20MHz | 2GHz"]["Udp_Rx"]["value"] : '');
                    VHT_20_2.push(smartMergeObj[j][i]["VHT-20MHz | 2GHz"]["Udp_BI"] ? smartMergeObj[j][i]["VHT-20MHz | 2GHz"]["Udp_BI"]["value"] : '');

                    VHT_20_2_val.push(VHT_20_2);
                }

                if (typeof smartMergeObj[j][i]["VHT-20MHz | 5GHz"] != 'undefined') {

                    VHT_20_5.push(smartMergeObj[j][i]["VHT-20MHz | 5GHz"]["Tcp_Tx"] ? smartMergeObj[j][i]["VHT-20MHz | 5GHz"]["Tcp_Tx"]["value"] : '');
                    VHT_20_5.push(smartMergeObj[j][i]["VHT-20MHz | 5GHz"]["Tcp_Rx"] ? smartMergeObj[j][i]["VHT-20MHz | 5GHz"]["Tcp_Rx"]["value"] : '');
                    VHT_20_5.push(smartMergeObj[j][i]["VHT-20MHz | 5GHz"]["Tcp_BI"] ? smartMergeObj[j][i]["VHT-20MHz | 5GHz"]["Tcp_BI"]["value"] : '');
                    VHT_20_5.push(smartMergeObj[j][i]["VHT-20MHz | 5GHz"]["Udp_Tx"] ? smartMergeObj[j][i]["VHT-20MHz | 5GHz"]["Udp_Tx"]["value"] : '');
                    VHT_20_5.push(smartMergeObj[j][i]["VHT-20MHz | 5GHz"]["Udp_Rx"] ? smartMergeObj[j][i]["VHT-20MHz | 5GHz"]["Udp_Rx"]["value"] : '');
                    VHT_20_5.push(smartMergeObj[j][i]["VHT-20MHz | 5GHz"]["Udp_BI"] ? smartMergeObj[j][i]["VHT-20MHz | 5GHz"]["Udp_BI"]["value"] : '');

                    VHT_20_5_val.push(VHT_20_5);
                }

                if (typeof smartMergeObj[j][i]["HT-40MHz | 5GHz"] != 'undefined') {

                    HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Tcp_Tx"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Tcp_Tx"]["value"] : '');
                    HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Tcp_Rx"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Tcp_Rx"]["value"] : '');
                    HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Tcp_BI"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Tcp_BI"]["value"] : '');
                    HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Udp_Tx"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Udp_Tx"]["value"] : '');
                    HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Udp_Rx"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Udp_Rx"]["value"] : '');
                    HT_40_5.push(smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Udp_BI"] ? smartMergeObj[j][i]["HT-40MHz | 5GHz"]["Udp_BI"]["value"] : '');

                    HT_40_5_val.push(HT_40_5);
                }

                if (typeof smartMergeObj[j][i]["HT-40MHz | 2GHz"] != 'undefined') {

                    HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Tcp_Tx"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Tcp_Tx"]["value"] : '');
                    HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Tcp_Rx"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Tcp_Rx"]["value"] : '');
                    HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Tcp_BI"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Tcp_BI"]["value"] : '');
                    HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Udp_Tx"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Udp_Tx"]["value"] : '');
                    HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Udp_Rx"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Udp_Rx"]["value"] : '');
                    HT_40_2.push(smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Udp_BI"] ? smartMergeObj[j][i]["HT-40MHz | 2GHz"]["Udp_BI"]["value"] : '');

                    HT_40_2_val.push(HT_40_2);
                }

                if (typeof smartMergeObj[j][i]["HT-20MHz | 5GHz"] != 'undefined') {

                    HT_20_5.push(smartMergeObj[j][i]["HT-20MHz | 5GHz"]["Tcp_Tx"] ? smartMergeObj[j][i]["HT-20MHz | 5GHz"]["Tcp_Tx"]["value"] : '');
                    HT_20_5.push(smartMergeObj[j][i]["HT-20MHz | 5GHz"]["Tcp_Rx"] ? smartMergeObj[j][i]["HT-20MHz | 5GHz"]["Tcp_Rx"]["value"] : '');
                    HT_20_5.push(smartMergeObj[j][i]["HT-20MHz | 5GHz"]["Tcp_BI"] ? smartMergeObj[j][i]["HT-20MHz | 5GHz"]["Tcp_BI"]["value"] : '');
                    HT_20_5.push(smartMergeObj[j][i]["HT-20MHz | 5GHz"]["Udp_Tx"] ? smartMergeObj[j][i]["HT-20MHz | 5GHz"]["Udp_Tx"]["value"] : '');
                    HT_20_5.push(smartMergeObj[j][i]["HT-20MHz | 5GHz"]["Udp_Rx"] ? smartMergeObj[j][i]["HT-20MHz | 5GHz"]["Udp_Rx"]["value"] : '');
                    HT_20_5.push(smartMergeObj[j][i]["HT-20MHz | 5GHz"]["Udp_BI"] ? smartMergeObj[j][i]["HT-20MHz | 5GHz"]["Udp_BI"]["value"] : '');

                    HT_20_5_val.push(HT_20_5);
                }

                if (typeof smartMergeObj[j][i]["HT-20MHz | 2GHz"] != 'undefined') {

                    HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Tcp_Tx"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Tcp_Tx"]["value"] : '');
                    HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Tcp_Rx"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Tcp_Rx"]["value"] : '');
                    HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Tcp_BI"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Tcp_BI"]["value"] : '');
                    HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Udp_Tx"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Udp_Tx"]["value"] : '');
                    HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Udp_Rx"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Udp_Rx"]["value"] : '');
                    HT_20_2.push(smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Udp_BI"] ? smartMergeObj[j][i]["HT-20MHz | 2GHz"]["Udp_BI"]["value"] : '');

                    HT_20_2_val.push(HT_20_2);
                }

                if (typeof smartMergeObj[j][i]["Non-HT BG | 2GHz"] != 'undefined') {

                    Non_HT_BG.push(smartMergeObj[j][i]["Non-HT BG | 2GHz"]["Tcp_Tx"] ? smartMergeObj[j][i]["Non-HT BG | 2GHz"]["Tcp_Tx"]["value"] : '');
                    Non_HT_BG.push(smartMergeObj[j][i]["Non-HT BG | 2GHz"]["Tcp_Rx"] ? smartMergeObj[j][i]["Non-HT BG | 2GHz"]["Tcp_Rx"]["value"] : '');
                    Non_HT_BG.push(smartMergeObj[j][i]["Non-HT BG | 2GHz"]["Tcp_BI"] ? smartMergeObj[j][i]["Non-HT BG | 2GHz"]["Tcp_BI"]["value"] : '');
                    Non_HT_BG.push(smartMergeObj[j][i]["Non-HT BG | 2GHz"]["Udp_Tx"] ? smartMergeObj[j][i]["Non-HT BG | 2GHz"]["Udp_Tx"]["value"] : '');
                    Non_HT_BG.push(smartMergeObj[j][i]["Non-HT BG | 2GHz"]["Udp_Rx"] ? smartMergeObj[j][i]["Non-HT BG | 2GHz"]["Udp_Rx"]["value"] : '');
                    Non_HT_BG.push(smartMergeObj[j][i]["Non-HT BG | 2GHz"]["Udp_BI"] ? smartMergeObj[j][i]["Non-HT BG | 2GHz"]["Udp_BI"]["value"] : '');

                    Non_HT_BG_val.push(Non_HT_BG);
                }

                if (typeof smartMergeObj[j][i]["Non-HT A | 5GHz"] != 'undefined') {

                    Non_HT_A.push(smartMergeObj[j][i]["Non-HT A | 5GHz"]["Tcp_Tx"] ? smartMergeObj[j][i]["Non-HT A | 5GHz"]["Tcp_Tx"]["value"] : '');
                    Non_HT_A.push(smartMergeObj[j][i]["Non-HT A | 5GHz"]["Tcp_Rx"] ? smartMergeObj[j][i]["Non-HT A | 5GHz"]["Tcp_Rx"]["value"] : '');
                    Non_HT_A.push(smartMergeObj[j][i]["Non-HT A | 5GHz"]["Tcp_BI"] ? smartMergeObj[j][i]["Non-HT A | 5GHz"]["Tcp_BI"]["value"] : '');
                    Non_HT_A.push(smartMergeObj[j][i]["Non-HT A | 5GHz"]["Udp_Tx"] ? smartMergeObj[j][i]["Non-HT A | 5GHz"]["Udp_Tx"]["value"] : '');
                    Non_HT_A.push(smartMergeObj[j][i]["Non-HT A | 5GHz"]["Udp_Rx"] ? smartMergeObj[j][i]["Non-HT A | 5GHz"]["Udp_Rx"]["value"] : '');
                    Non_HT_A.push(smartMergeObj[j][i]["Non-HT A | 5GHz"]["Udp_BI"] ? smartMergeObj[j][i]["Non-HT A | 5GHz"]["Udp_BI"]["value"] : '');

                    Non_HT_A_val.push(Non_HT_A);
                }

                if (typeof smartMergeObj[j][i]["Non-HT B-Only | 2GHz"] != 'undefined') {

                    Non_HT_B.push(smartMergeObj[j][i]["Non-HT B-Only | 2GHz"]["Tcp_Tx"] ? smartMergeObj[j][i]["Non-HT B-Only | 2GHz"]["Tcp_Tx"]["value"] : '');
                    Non_HT_B.push(smartMergeObj[j][i]["Non-HT B-Only | 2GHz"]["Tcp_Rx"] ? smartMergeObj[j][i]["Non-HT B-Only | 2GHz"]["Tcp_Rx"]["value"] : '');
                    Non_HT_B.push(smartMergeObj[j][i]["Non-HT B-Only | 2GHz"]["Tcp_BI"] ? smartMergeObj[j][i]["Non-HT B-Only | 2GHz"]["Tcp_BI"]["value"] : '');
                    Non_HT_B.push(smartMergeObj[j][i]["Non-HT B-Only | 2GHz"]["Udp_Tx"] ? smartMergeObj[j][i]["Non-HT B-Only | 2GHz"]["Udp_Tx"]["value"] : '');
                    Non_HT_B.push(smartMergeObj[j][i]["Non-HT B-Only | 2GHz"]["Udp_Rx"] ? smartMergeObj[j][i]["Non-HT B-Only | 2GHz"]["Udp_Rx"]["value"] : '');
                    Non_HT_B.push(smartMergeObj[j][i]["Non-HT B-Only | 2GHz"]["Udp_BI"] ? smartMergeObj[j][i]["Non-HT B-Only | 2GHz"]["Udp_BI"]["value"] : '');

                    Non_HT_B_val.push(Non_HT_B);
                }

                if (typeof smartMergeObj[j][i]["2GHz"] != 'undefined') {

                    Iop_Perf_2.push(smartMergeObj[j][i]["2GHz"]["Tcp_Tx"] ? smartMergeObj[j][i]["2GHz"]["Tcp_Tx"]["value"] : '');
                    Iop_Perf_2.push(smartMergeObj[j][i]["2GHz"]["Tcp_Rx"] ? smartMergeObj[j][i]["2GHz"]["Tcp_Rx"]["value"] : '');
                    Iop_Perf_2.push(smartMergeObj[j][i]["2GHz"]["Udp_Tx"] ? smartMergeObj[j][i]["2GHz"]["Udp_Tx"]["value"] : '');
                    Iop_Perf_2.push(smartMergeObj[j][i]["2GHz"]["Udp_Rx"] ? smartMergeObj[j][i]["2GHz"]["Udp_Rx"]["value"] : '');
                    Iop_Perf_2.push(smartMergeObj[j][i]["2GHz"]["PHY Rate"] ? smartMergeObj[j][i]["2GHz"]["PHY Rate"]["value"] : '');

                    Iop_Perf_2_val.push(Iop_Perf_2);
                }
                if (typeof smartMergeObj[j][i]["5GHz"] != 'undefined') {

                    Iop_Perf_5.push(smartMergeObj[j][i]["5GHz"]["Tcp_Tx"] ? smartMergeObj[j][i]["5GHz"]["Tcp_Tx"]["value"] : '');
                    Iop_Perf_5.push(smartMergeObj[j][i]["5GHz"]["Tcp_Rx"] ? smartMergeObj[j][i]["5GHz"]["Tcp_Rx"]["value"] : '');
                    Iop_Perf_5.push(smartMergeObj[j][i]["5GHz"]["Udp_Tx"] ? smartMergeObj[j][i]["5GHz"]["Udp_Tx"]["value"] : '');
                    Iop_Perf_5.push(smartMergeObj[j][i]["5GHz"]["Udp_Rx"] ? smartMergeObj[j][i]["5GHz"]["Udp_Rx"]["value"] : '');
                    Iop_Perf_5.push(smartMergeObj[j][i]["5GHz"]["PHY Rate"] ? smartMergeObj[j][i]["5GHz"]["PHY Rate"]["value"] : '');

                    Iop_Perf_5_val.push(Iop_Perf_5);
                }

                HE_160_5 = [];
                HE_80_5 = [];
                HE_40_2 = [];
                HE_40_5 = [];
                HE_20_2 = [];
                HE_20_5 = [];
                VHT_160_5 = [];
                VHT_80_5 = [];
                VHT_40_2 = [];
                VHT_40_5 = [];
                VHT_20_2 = [];
                VHT_20_5 = [];
                HT_40_2 = [];
                HT_20_2 = [];
                HT_40_5 = [];
                HT_20_5 = [];
                Non_HT_BG = [];
                Non_HT_A = [];
                Non_HT_B = [];
                Iop_Perf_5 = [];
                Iop_Perf_2 = [];

            }

            var Max_HE_160_5 = await getMaxValInArr(HE_160_5_val);
            var Max_HE_80_5 = await getMaxValInArr(HE_80_5_val);
            var Max_HE_40_2 = await getMaxValInArr(HE_40_2_val);
            var Max_HE_40_5 = await getMaxValInArr(HE_40_5_val);
            var Max_HE_20_2 = await getMaxValInArr(HE_20_2_val);
            var Max_HE_20_5 = await getMaxValInArr(HE_20_5_val);
            var Max_VHT_160_5 = await getMaxValInArr(VHT_160_5_val);
            var Max_VHT_80_5 = await getMaxValInArr(VHT_80_5_val);
            var Max_VHT_40_2 = await getMaxValInArr(VHT_40_2_val);
            var Max_VHT_40_5 = await getMaxValInArr(VHT_40_5_val);
            var Max_VHT_20_2 = await getMaxValInArr(VHT_20_2_val);
            var Max_VHT_20_5 = await getMaxValInArr(VHT_20_5_val);
            var Max_HT_40_5 = await getMaxValInArr(HT_40_5_val);
            var Max_HT_40_2 = await getMaxValInArr(HT_40_2_val);
            var Max_HT_20_5 = await getMaxValInArr(HT_20_5_val);
            var Max_HT_20_2 = await getMaxValInArr(HT_20_2_val);
            var Max_Non_HT_BG = await getMaxValInArr(Non_HT_BG_val);
            var Max_Non_HT_A = await getMaxValInArr(Non_HT_A_val);
            var Max_Non_HT_B = await getMaxValInArr(Non_HT_B_val);
            var Max_Iop_Perf_2 = await getMaxValInArr(Iop_Perf_2_val);
            var Max_Iop_Perf_5 = await getMaxValInArr(Iop_Perf_5_val);

            HE_160_5_val = [];
            HE_80_5_val = [];
            HE_40_2_val = [];
            HE_40_5_val = [];
            HE_20_2_val = [];
            HE_20_5_val = [];
            VHT_160_5_val = [];
            VHT_80_5_val = [];
            VHT_40_2_val = [];
            VHT_40_5_val = [];
            VHT_20_2_val = [];
            VHT_20_5_val = [];
            HT_40_5_val = [];
            HT_40_2_val = [];
            HT_20_5_val = [];
            HT_20_2_val = [];
            Non_HT_BG_val = [];
            Non_HT_A_val = [];
            Non_HT_B_val = [];
            Iop_Perf_2_val = [];
            Iop_Perf_5_val = [];

            // Status Changes loop
            for (var k = 0; k < innerArr.length; k++) {
                for (var p = 0; p < innerArr[k].length; p++) {

                    if (typeof innerArr[k][p]["HE-160MHz | 5GHz"] != 'undefined') {
                        if (innerArr[k][p]["HE-160MHz | 5GHz"]["Tcp_Tx"]) {
                            if (innerArr[k][p]["HE-160MHz | 5GHz"]["Tcp_Tx"]["value"] == Max_HE_160_5[0]) {
                                innerArr[k][p]["HE-160MHz | 5GHz"]["Tcp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["HE-160MHz | 5GHz"]["Tcp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-160MHz | 5GHz"]["Tcp_Rx"]) {
                            if (innerArr[k][p]["HE-160MHz | 5GHz"]["Tcp_Rx"]["value"] == Max_HE_160_5[1]) {
                                innerArr[k][p]["HE-160MHz | 5GHz"]["Tcp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["HE-160MHz | 5GHz"]["Tcp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-160MHz | 5GHz"]["Tcp_BI"]) {
                            if (innerArr[k][p]["HE-160MHz | 5GHz"]["Tcp_BI"]["value"] == Max_HE_160_5[2]) {
                                innerArr[k][p]["HE-160MHz | 5GHz"]["Tcp_BI"]['status'] = true;
                            } else { innerArr[k][p]["HE-160MHz | 5GHz"]["Tcp_BI"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-160MHz | 5GHz"]["Udp_Tx"]) {
                            if (innerArr[k][p]["HE-160MHz | 5GHz"]["Udp_Tx"]["value"] == Max_HE_160_5[3]) {
                                innerArr[k][p]["HE-160MHz | 5GHz"]["Udp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["HE-160MHz | 5GHz"]["Udp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-160MHz | 5GHz"]["Udp_Rx"]) {
                            if (innerArr[k][p]["HE-160MHz | 5GHz"]["Udp_Rx"]["value"] == Max_HE_160_5[4]) {
                                innerArr[k][p]["HE-160MHz | 5GHz"]["Udp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["HE-160MHz | 5GHz"]["Udp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-160MHz | 5GHz"]["Udp_BI"]) {
                            if (innerArr[k][p]["HE-160MHz | 5GHz"]["Udp_BI"]["value"] == Max_HE_160_5[5]) {
                                innerArr[k][p]["HE-160MHz | 5GHz"]["Udp_BI"]['status'] = true;
                            } else { innerArr[k][p]["HE-160MHz | 5GHz"]["Udp_BI"]['status'] = false; }
                        }
                    }
                    if (typeof innerArr[k][p]["HE-80MHz | 5GHz"] != 'undefined') {
                        if (innerArr[k][p]["HE-80MHz | 5GHz"]["Tcp_Tx"]) {
                            if (innerArr[k][p]["HE-80MHz | 5GHz"]["Tcp_Tx"]["value"] == Max_HE_80_5[0]) {
                                innerArr[k][p]["HE-80MHz | 5GHz"]["Tcp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["HE-80MHz | 5GHz"]["Tcp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-80MHz | 5GHz"]["Tcp_Rx"]) {
                            if (innerArr[k][p]["HE-80MHz | 5GHz"]["Tcp_Rx"]["value"] == Max_HE_80_5[1]) {
                                innerArr[k][p]["HE-80MHz | 5GHz"]["Tcp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["HE-80MHz | 5GHz"]["Tcp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-80MHz | 5GHz"]["Tcp_BI"]) {
                            if (innerArr[k][p]["HE-80MHz | 5GHz"]["Tcp_BI"]["value"] == Max_HE_80_5[2]) {
                                innerArr[k][p]["HE-80MHz | 5GHz"]["Tcp_BI"]['status'] = true;
                            } else { innerArr[k][p]["HE-80MHz | 5GHz"]["Tcp_BI"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-80MHz | 5GHz"]["Udp_Tx"]) {
                            if (innerArr[k][p]["HE-80MHz | 5GHz"]["Udp_Tx"]["value"] == Max_HE_80_5[3]) {
                                innerArr[k][p]["HE-80MHz | 5GHz"]["Udp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["HE-80MHz | 5GHz"]["Udp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-80MHz | 5GHz"]["Udp_Rx"]) {
                            if (innerArr[k][p]["HE-80MHz | 5GHz"]["Udp_Rx"]["value"] == Max_HE_80_5[4]) {
                                innerArr[k][p]["HE-80MHz | 5GHz"]["Udp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["HE-80MHz | 5GHz"]["Udp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-80MHz | 5GHz"]["Udp_BI"]) {
                            if (innerArr[k][p]["HE-80MHz | 5GHz"]["Udp_BI"]["value"] == Max_HE_80_5[5]) {
                                innerArr[k][p]["HE-80MHz | 5GHz"]["Udp_BI"]['status'] = true;
                            } else { innerArr[k][p]["HE-80MHz | 5GHz"]["Udp_BI"]['status'] = false; }
                        }
                    }
                    if (typeof innerArr[k][p]["HE-40MHz | 2GHz"] != 'undefined') {
                        if (innerArr[k][p]["HE-40MHz | 2GHz"]["Tcp_Tx"]) {
                            if (innerArr[k][p]["HE-40MHz | 2GHz"]["Tcp_Tx"]["value"] == Max_HE_40_2[0]) {
                                innerArr[k][p]["HE-40MHz | 2GHz"]["Tcp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["HE-40MHz | 2GHz"]["Tcp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-40MHz | 2GHz"]["Tcp_Rx"]) {
                            if (innerArr[k][p]["HE-40MHz | 2GHz"]["Tcp_Rx"]["value"] == Max_HE_40_2[1]) {
                                innerArr[k][p]["HE-40MHz | 2GHz"]["Tcp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["HE-40MHz | 2GHz"]["Tcp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-40MHz | 2GHz"]["Tcp_BI"]) {
                            if (innerArr[k][p]["HE-40MHz | 2GHz"]["Tcp_BI"]["value"] == Max_HE_40_2[2]) {
                                innerArr[k][p]["HE-40MHz | 2GHz"]["Tcp_BI"]['status'] = true;
                            } else { innerArr[k][p]["HE-40MHz | 2GHz"]["Tcp_BI"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-40MHz | 2GHz"]["Udp_Tx"]) {
                            if (innerArr[k][p]["HE-40MHz | 2GHz"]["Udp_Tx"]["value"] == Max_HE_40_2[3]) {
                                innerArr[k][p]["HE-40MHz | 2GHz"]["Udp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["HE-40MHz | 2GHz"]["Udp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-40MHz | 2GHz"]["Udp_Rx"]) {
                            if (innerArr[k][p]["HE-40MHz | 2GHz"]["Udp_Rx"]["value"] == Max_HE_40_2[4]) {
                                innerArr[k][p]["HE-40MHz | 2GHz"]["Udp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["HE-40MHz | 2GHz"]["Udp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-40MHz | 2GHz"]["Udp_BI"]) {
                            if (innerArr[k][p]["HE-40MHz | 2GHz"]["Udp_BI"]["value"] == Max_HE_40_2[5]) {
                                innerArr[k][p]["HE-40MHz | 2GHz"]["Udp_BI"]['status'] = true;
                            } else { innerArr[k][p]["HE-40MHz | 2GHz"]["Udp_BI"]['status'] = false; }
                        }
                    }
                    if (typeof innerArr[k][p]["HE-40MHz | 5GHz"] != 'undefined') {
                        if (innerArr[k][p]["HE-40MHz | 5GHz"]["Tcp_Tx"]) {
                            if (innerArr[k][p]["HE-40MHz | 5GHz"]["Tcp_Tx"]["value"] == Max_HE_40_5[0]) {
                                innerArr[k][p]["HE-40MHz | 5GHz"]["Tcp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["HE-40MHz | 5GHz"]["Tcp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-40MHz | 5GHz"]["Tcp_Rx"]) {
                            if (innerArr[k][p]["HE-40MHz | 5GHz"]["Tcp_Rx"]["value"] == Max_HE_40_5[1]) {
                                innerArr[k][p]["HE-40MHz | 5GHz"]["Tcp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["HE-40MHz | 5GHz"]["Tcp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-40MHz | 5GHz"]["Tcp_BI"]) {
                            if (innerArr[k][p]["HE-40MHz | 5GHz"]["Tcp_BI"]["value"] == Max_HE_40_5[2]) {
                                innerArr[k][p]["HE-40MHz | 5GHz"]["Tcp_BI"]['status'] = true;
                            } else { innerArr[k][p]["HE-40MHz | 5GHz"]["Tcp_BI"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-40MHz | 5GHz"]["Udp_Tx"]) {
                            if (innerArr[k][p]["HE-40MHz | 5GHz"]["Udp_Tx"]["value"] == Max_HE_40_5[3]) {
                                innerArr[k][p]["HE-40MHz | 5GHz"]["Udp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["HE-40MHz | 5GHz"]["Udp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-40MHz | 5GHz"]["Udp_Rx"]) {
                            if (innerArr[k][p]["HE-40MHz | 5GHz"]["Udp_Rx"]["value"] == Max_HE_40_5[4]) {
                                innerArr[k][p]["HE-40MHz | 5GHz"]["Udp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["HE-40MHz | 5GHz"]["Udp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-40MHz | 5GHz"]["Udp_BI"]) {
                            if (innerArr[k][p]["HE-40MHz | 5GHz"]["Udp_BI"]["value"] == Max_HE_40_5[5]) {
                                innerArr[k][p]["HE-40MHz | 5GHz"]["Udp_BI"]['status'] = true;
                            } else { innerArr[k][p]["HE-40MHz | 5GHz"]["Udp_BI"]['status'] = false; }
                        }
                    }
                    if (typeof innerArr[k][p]["HE-20MHz | 2GHz"] != 'undefined') {
                        if (innerArr[k][p]["HE-20MHz | 2GHz"]["Tcp_Tx"]) {
                            if (innerArr[k][p]["HE-20MHz | 2GHz"]["Tcp_Tx"]["value"] == Max_HE_20_2[0]) {
                                innerArr[k][p]["HE-20MHz | 2GHz"]["Tcp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["HE-20MHz | 2GHz"]["Tcp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-20MHz | 2GHz"]["Tcp_Rx"]) {
                            if (innerArr[k][p]["HE-20MHz | 2GHz"]["Tcp_Rx"]["value"] == Max_HE_20_2[1]) {
                                innerArr[k][p]["HE-20MHz | 2GHz"]["Tcp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["HE-20MHz | 2GHz"]["Tcp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-20MHz | 2GHz"]["Tcp_BI"]) {
                            if (innerArr[k][p]["HE-20MHz | 2GHz"]["Tcp_BI"]["value"] == Max_HE_20_2[2]) {
                                innerArr[k][p]["HE-20MHz | 2GHz"]["Tcp_BI"]['status'] = true;
                            } else { innerArr[k][p]["HE-20MHz | 2GHz"]["Tcp_BI"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-20MHz | 2GHz"]["Udp_Tx"]) {
                            if (innerArr[k][p]["HE-20MHz | 2GHz"]["Udp_Tx"]["value"] == Max_HE_20_2[3]) {
                                innerArr[k][p]["HE-20MHz | 2GHz"]["Udp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["HE-20MHz | 2GHz"]["Udp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-20MHz | 2GHz"]["Udp_Rx"]) {
                            if (innerArr[k][p]["HE-20MHz | 2GHz"]["Udp_Rx"]["value"] == Max_HE_20_2[4]) {
                                innerArr[k][p]["HE-20MHz | 2GHz"]["Udp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["HE-20MHz | 2GHz"]["Udp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-20MHz | 2GHz"]["Udp_BI"]) {
                            if (innerArr[k][p]["HE-20MHz | 2GHz"]["Udp_BI"]["value"] == Max_HE_20_2[5]) {
                                innerArr[k][p]["HE-20MHz | 2GHz"]["Udp_BI"]['status'] = true;
                            } else { innerArr[k][p]["HE-20MHz | 2GHz"]["Udp_BI"]['status'] = false; }
                        }
                    }
                    if (typeof innerArr[k][p]["HE-20MHz | 5GHz"] != 'undefined') {
                        if (innerArr[k][p]["HE-20MHz | 5GHz"]["Tcp_Tx"]) {
                            if (innerArr[k][p]["HE-20MHz | 5GHz"]["Tcp_Tx"]["value"] == Max_HE_20_5[0]) {
                                innerArr[k][p]["HE-20MHz | 5GHz"]["Tcp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["HE-20MHz | 5GHz"]["Tcp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-20MHz | 5GHz"]["Tcp_Rx"]) {
                            if (innerArr[k][p]["HE-20MHz | 5GHz"]["Tcp_Rx"]["value"] == Max_HE_20_5[1]) {
                                innerArr[k][p]["HE-20MHz | 5GHz"]["Tcp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["HE-20MHz | 5GHz"]["Tcp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-20MHz | 5GHz"]["Tcp_BI"]) {
                            if (innerArr[k][p]["HE-20MHz | 5GHz"]["Tcp_BI"]["value"] == Max_HE_20_5[2]) {
                                innerArr[k][p]["HE-20MHz | 5GHz"]["Tcp_BI"]['status'] = true;
                            } else { innerArr[k][p]["HE-20MHz | 5GHz"]["Tcp_BI"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-20MHz | 5GHz"]["Udp_Tx"]) {
                            if (innerArr[k][p]["HE-20MHz | 5GHz"]["Udp_Tx"]["value"] == Max_HE_20_5[3]) {
                                innerArr[k][p]["HE-20MHz | 5GHz"]["Udp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["HE-20MHz | 5GHz"]["Udp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-20MHz | 5GHz"]["Udp_Rx"]) {
                            if (innerArr[k][p]["HE-20MHz | 5GHz"]["Udp_Rx"]["value"] == Max_HE_20_5[4]) {
                                innerArr[k][p]["HE-20MHz | 5GHz"]["Udp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["HE-20MHz | 5GHz"]["Udp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HE-20MHz | 5GHz"]["Udp_BI"]) {
                            if (innerArr[k][p]["HE-20MHz | 5GHz"]["Udp_BI"]["value"] == Max_HE_20_5[5]) {
                                innerArr[k][p]["HE-20MHz | 5GHz"]["Udp_BI"]['status'] = true;
                            } else { innerArr[k][p]["HE-20MHz | 5GHz"]["Udp_BI"]['status'] = false; }
                        }
                    }
                    if (typeof innerArr[k][p]["VHT-160MHz | 5GHz"] != 'undefined') {
                        if (innerArr[k][p]["VHT-160MHz | 5GHz"]["Tcp_Tx"]) {
                            if (innerArr[k][p]["VHT-160MHz | 5GHz"]["Tcp_Tx"]["value"] == Max_VHT_160_5[0]) {
                                innerArr[k][p]["VHT-160MHz | 5GHz"]["Tcp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-160MHz | 5GHz"]["Tcp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-160MHz | 5GHz"]["Tcp_Rx"]) {
                            if (innerArr[k][p]["VHT-160MHz | 5GHz"]["Tcp_Rx"]["value"] == Max_VHT_160_5[1]) {
                                innerArr[k][p]["VHT-160MHz | 5GHz"]["Tcp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-160MHz | 5GHz"]["Tcp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-160MHz | 5GHz"]["Tcp_BI"]) {
                            if (innerArr[k][p]["VHT-160MHz | 5GHz"]["Tcp_BI"]["value"] == Max_VHT_160_5[2]) {
                                innerArr[k][p]["VHT-160MHz | 5GHz"]["Tcp_BI"]['status'] = true;
                            } else { innerArr[k][p]["VHT-160MHz | 5GHz"]["Tcp_BI"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-160MHz | 5GHz"]["Udp_Tx"]) {
                            if (innerArr[k][p]["VHT-160MHz | 5GHz"]["Udp_Tx"]["value"] == Max_VHT_160_5[3]) {
                                innerArr[k][p]["VHT-160MHz | 5GHz"]["Udp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-160MHz | 5GHz"]["Udp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-160MHz | 5GHz"]["Udp_Rx"]) {
                            if (innerArr[k][p]["VHT-160MHz | 5GHz"]["Udp_Rx"]["value"] == Max_VHT_160_5[4]) {
                                innerArr[k][p]["VHT-160MHz | 5GHz"]["Udp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-160MHz | 5GHz"]["Udp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-160MHz | 5GHz"]["Udp_BI"]) {
                            if (innerArr[k][p]["VHT-160MHz | 5GHz"]["Udp_BI"]["value"] == Max_VHT_160_5[5]) {
                                innerArr[k][p]["VHT-160MHz | 5GHz"]["Udp_BI"]['status'] = true;
                            } else { innerArr[k][p]["VHT-160MHz | 5GHz"]["Udp_BI"]['status'] = false; }
                        }

                    }
                    if (typeof innerArr[k][p]["VHT-80MHz | 5GHz"] != 'undefined') {
                        if (innerArr[k][p]["VHT-80MHz | 5GHz"]["Tcp_Tx"]) {
                            if (innerArr[k][p]["VHT-80MHz | 5GHz"]["Tcp_Tx"]["value"] == Max_VHT_80_5[0]) {
                                innerArr[k][p]["VHT-80MHz | 5GHz"]["Tcp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["Tcp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-80MHz | 5GHz"]["Tcp_Rx"]) {
                            if (innerArr[k][p]["VHT-80MHz | 5GHz"]["Tcp_Rx"]["value"] == Max_VHT_80_5[1]) {
                                innerArr[k][p]["VHT-80MHz | 5GHz"]["Tcp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["Tcp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-80MHz | 5GHz"]["Tcp_BI"]) {
                            if (innerArr[k][p]["VHT-80MHz | 5GHz"]["Tcp_BI"]["value"] == Max_VHT_80_5[2]) {
                                innerArr[k][p]["VHT-80MHz | 5GHz"]["Tcp_BI"]['status'] = true;
                            } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["Tcp_BI"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-80MHz | 5GHz"]["Udp_Tx"]) {
                            if (innerArr[k][p]["VHT-80MHz | 5GHz"]["Udp_Tx"]["value"] == Max_VHT_80_5[3]) {
                                innerArr[k][p]["VHT-80MHz | 5GHz"]["Udp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["Udp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-80MHz | 5GHz"]["Udp_Rx"]) {
                            if (innerArr[k][p]["VHT-80MHz | 5GHz"]["Udp_Rx"]["value"] == Max_VHT_80_5[4]) {
                                innerArr[k][p]["VHT-80MHz | 5GHz"]["Udp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["Udp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-80MHz | 5GHz"]["Udp_BI"]) {
                            if (innerArr[k][p]["VHT-80MHz | 5GHz"]["Udp_BI"]["value"] == Max_VHT_80_5[5]) {
                                innerArr[k][p]["VHT-80MHz | 5GHz"]["Udp_BI"]['status'] = true;
                            } else { innerArr[k][p]["VHT-80MHz | 5GHz"]["Udp_BI"]['status'] = false; }
                        }

                    }
                    if (typeof innerArr[k][p]["VHT-40MHz | 2GHz"] != 'undefined') {
                        if (innerArr[k][p]["VHT-40MHz | 2GHz"]["Tcp_Tx"]) {
                            if (innerArr[k][p]["VHT-40MHz | 2GHz"]["Tcp_Tx"]["value"] == Max_VHT_40_2[0]) {
                                innerArr[k][p]["VHT-40MHz | 2GHz"]["Tcp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-40MHz | 2GHz"]["Tcp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-40MHz | 2GHz"]["Tcp_Rx"]) {
                            if (innerArr[k][p]["VHT-40MHz | 2GHz"]["Tcp_Rx"]["value"] == Max_VHT_40_2[1]) {
                                innerArr[k][p]["VHT-40MHz | 2GHz"]["Tcp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-40MHz | 2GHz"]["Tcp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-40MHz | 2GHz"]["Tcp_BI"]) {
                            if (innerArr[k][p]["VHT-40MHz | 2GHz"]["Tcp_BI"]["value"] == Max_VHT_40_2[2]) {
                                innerArr[k][p]["VHT-40MHz | 2GHz"]["Tcp_BI"]['status'] = true;
                            } else { innerArr[k][p]["VHT-40MHz | 2GHz"]["Tcp_BI"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-40MHz | 2GHz"]["Udp_Tx"]) {
                            if (innerArr[k][p]["VHT-40MHz | 2GHz"]["Udp_Tx"]["value"] == Max_VHT_40_2[3]) {
                                innerArr[k][p]["VHT-40MHz | 2GHz"]["Udp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-40MHz | 2GHz"]["Udp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-40MHz | 2GHz"]["Udp_Rx"]) {
                            if (innerArr[k][p]["VHT-40MHz | 2GHz"]["Udp_Rx"]["value"] == Max_VHT_40_2[4]) {
                                innerArr[k][p]["VHT-40MHz | 2GHz"]["Udp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-40MHz | 2GHz"]["Udp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-40MHz | 2GHz"]["Udp_BI"]) {
                            if (innerArr[k][p]["VHT-40MHz | 2GHz"]["Udp_BI"]["value"] == Max_VHT_40_2[5]) {
                                innerArr[k][p]["VHT-40MHz | 2GHz"]["Udp_BI"]['status'] = true;
                            } else { innerArr[k][p]["VHT-40MHz | 2GHz"]["Udp_BI"]['status'] = false; }
                        }
                    }
                    if (typeof innerArr[k][p]["VHT-40MHz | 5GHz"] != 'undefined') {
                        if (innerArr[k][p]["VHT-40MHz | 5GHz"]["Tcp_Tx"]) {
                            if (innerArr[k][p]["VHT-40MHz | 5GHz"]["Tcp_Tx"]["value"] == Max_VHT_40_5[0]) {
                                innerArr[k][p]["VHT-40MHz | 5GHz"]["Tcp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-40MHz | 5GHz"]["Tcp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-40MHz | 5GHz"]["Tcp_Rx"]) {
                            if (innerArr[k][p]["VHT-40MHz | 5GHz"]["Tcp_Rx"]["value"] == Max_VHT_40_5[1]) {
                                innerArr[k][p]["VHT-40MHz | 5GHz"]["Tcp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-40MHz | 5GHz"]["Tcp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-40MHz | 5GHz"]["Tcp_BI"]) {
                            if (innerArr[k][p]["VHT-40MHz | 5GHz"]["Tcp_BI"]["value"] == Max_VHT_40_5[2]) {
                                innerArr[k][p]["VHT-40MHz | 5GHz"]["Tcp_BI"]['status'] = true;
                            } else { innerArr[k][p]["VHT-40MHz | 5GHz"]["Tcp_BI"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-40MHz | 5GHz"]["Udp_Tx"]) {
                            if (innerArr[k][p]["VHT-40MHz | 5GHz"]["Udp_Tx"]["value"] == Max_VHT_40_5[3]) {
                                innerArr[k][p]["VHT-40MHz | 5GHz"]["Udp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-40MHz | 5GHz"]["Udp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-40MHz | 5GHz"]["Udp_Rx"]) {
                            if (innerArr[k][p]["VHT-40MHz | 5GHz"]["Udp_Rx"]["value"] == Max_VHT_40_5[4]) {
                                innerArr[k][p]["VHT-40MHz | 5GHz"]["Udp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-40MHz | 5GHz"]["Udp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-40MHz | 5GHz"]["Udp_BI"]) {
                            if (innerArr[k][p]["VHT-40MHz | 5GHz"]["Udp_BI"]["value"] == Max_VHT_40_5[5]) {
                                innerArr[k][p]["VHT-40MHz | 5GHz"]["Udp_BI"]['status'] = true;
                            } else { innerArr[k][p]["VHT-40MHz | 5GHz"]["Udp_BI"]['status'] = false; }
                        }
                    }
                    if (typeof innerArr[k][p]["VHT-20MHz | 2GHz"] != 'undefined') {
                        if (innerArr[k][p]["VHT-20MHz | 2GHz"]["Tcp_Tx"]) {
                            if (innerArr[k][p]["VHT-20MHz | 2GHz"]["Tcp_Tx"]["value"] == Max_VHT_20_2[0]) {
                                innerArr[k][p]["VHT-20MHz | 2GHz"]["Tcp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-20MHz | 2GHz"]["Tcp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-20MHz | 2GHz"]["Tcp_Rx"]) {
                            if (innerArr[k][p]["VHT-20MHz | 2GHz"]["Tcp_Rx"]["value"] == Max_VHT_20_2[1]) {
                                innerArr[k][p]["VHT-20MHz | 2GHz"]["Tcp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-20MHz | 2GHz"]["Tcp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-20MHz | 2GHz"]["Tcp_BI"]) {
                            if (innerArr[k][p]["VHT-20MHz | 2GHz"]["Tcp_BI"]["value"] == Max_VHT_20_2[2]) {
                                innerArr[k][p]["VHT-20MHz | 2GHz"]["Tcp_BI"]['status'] = true;
                            } else { innerArr[k][p]["VHT-20MHz | 2GHz"]["Tcp_BI"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-20MHz | 2GHz"]["Udp_Tx"]) {
                            if (innerArr[k][p]["VHT-20MHz | 2GHz"]["Udp_Tx"]["value"] == Max_VHT_20_2[3]) {
                                innerArr[k][p]["VHT-20MHz | 2GHz"]["Udp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-20MHz | 2GHz"]["Udp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-20MHz | 2GHz"]["Udp_Rx"]) {
                            if (innerArr[k][p]["VHT-20MHz | 2GHz"]["Udp_Rx"]["value"] == Max_VHT_20_2[4]) {
                                innerArr[k][p]["VHT-20MHz | 2GHz"]["Udp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-20MHz | 2GHz"]["Udp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-20MHz | 2GHz"]["Udp_BI"]) {
                            if (innerArr[k][p]["VHT-20MHz | 2GHz"]["Udp_BI"]["value"] == Max_VHT_20_2[5]) {
                                innerArr[k][p]["VHT-20MHz | 2GHz"]["Udp_BI"]['status'] = true;
                            } else { innerArr[k][p]["VHT-20MHz | 2GHz"]["Udp_BI"]['status'] = false; }
                        }
                    }
                    if (typeof innerArr[k][p]["VHT-20MHz | 5GHz"] != 'undefined') {
                        if (innerArr[k][p]["VHT-20MHz | 5GHz"]["Tcp_Tx"]) {
                            if (innerArr[k][p]["VHT-20MHz | 5GHz"]["Tcp_Tx"]["value"] == Max_VHT_20_5[0]) {
                                innerArr[k][p]["VHT-20MHz | 5GHz"]["Tcp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-20MHz | 5GHz"]["Tcp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-20MHz | 5GHz"]["Tcp_Rx"]) {
                            if (innerArr[k][p]["VHT-20MHz | 5GHz"]["Tcp_Rx"]["value"] == Max_VHT_20_5[1]) {
                                innerArr[k][p]["VHT-20MHz | 5GHz"]["Tcp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-20MHz | 5GHz"]["Tcp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-20MHz | 5GHz"]["Tcp_BI"]) {
                            if (innerArr[k][p]["VHT-20MHz | 5GHz"]["Tcp_BI"]["value"] == Max_VHT_20_5[2]) {
                                innerArr[k][p]["VHT-20MHz | 5GHz"]["Tcp_BI"]['status'] = true;
                            } else { innerArr[k][p]["VHT-20MHz | 5GHz"]["Tcp_BI"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-20MHz | 5GHz"]["Udp_Tx"]) {
                            if (innerArr[k][p]["VHT-20MHz | 5GHz"]["Udp_Tx"]["value"] == Max_VHT_20_5[3]) {
                                innerArr[k][p]["VHT-20MHz | 5GHz"]["Udp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-20MHz | 5GHz"]["Udp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-20MHz | 5GHz"]["Udp_Rx"]) {
                            if (innerArr[k][p]["VHT-20MHz | 5GHz"]["Udp_Rx"]["value"] == Max_VHT_20_5[4]) {
                                innerArr[k][p]["VHT-20MHz | 5GHz"]["Udp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["VHT-20MHz | 5GHz"]["Udp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["VHT-20MHz | 5GHz"]["Udp_BI"]) {
                            if (innerArr[k][p]["VHT-20MHz | 5GHz"]["Udp_BI"]["value"] == Max_VHT_20_5[5]) {
                                innerArr[k][p]["VHT-20MHz | 5GHz"]["Udp_BI"]['status'] = true;
                            } else { innerArr[k][p]["VHT-20MHz | 5GHz"]["Udp_BI"]['status'] = false; }
                        }
                    }
                    if (typeof innerArr[k][p]["HT-40MHz | 5GHz"] != 'undefined') {
                        if (innerArr[k][p]["HT-40MHz | 5GHz"]["Tcp_Tx"]) {
                            if (innerArr[k][p]["HT-40MHz | 5GHz"]["Tcp_Tx"]["value"] == Max_HT_40_5[0]) {
                                innerArr[k][p]["HT-40MHz | 5GHz"]["Tcp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["HT-40MHz | 5GHz"]["Tcp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HT-40MHz | 5GHz"]["Tcp_Rx"]) {
                            if (innerArr[k][p]["HT-40MHz | 5GHz"]["Tcp_Rx"]["value"] == Max_HT_40_5[1]) {
                                innerArr[k][p]["HT-40MHz | 5GHz"]["Tcp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["HT-40MHz | 5GHz"]["Tcp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HT-40MHz | 5GHz"]["Tcp_BI"]) {
                            if (innerArr[k][p]["HT-40MHz | 5GHz"]["Tcp_BI"]["value"] == Max_HT_40_5[2]) {
                                innerArr[k][p]["HT-40MHz | 5GHz"]["Tcp_BI"]['status'] = true;
                            } else { innerArr[k][p]["HT-40MHz | 5GHz"]["Tcp_BI"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HT-40MHz | 5GHz"]["Udp_Tx"]) {
                            if (innerArr[k][p]["HT-40MHz | 5GHz"]["Udp_Tx"]["value"] == Max_HT_40_5[3]) {
                                innerArr[k][p]["HT-40MHz | 5GHz"]["Udp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["HT-40MHz | 5GHz"]["Udp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HT-40MHz | 5GHz"]["Udp_Rx"]) {
                            if (innerArr[k][p]["HT-40MHz | 5GHz"]["Udp_Rx"]["value"] == Max_HT_40_5[4]) {
                                innerArr[k][p]["HT-40MHz | 5GHz"]["Udp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["HT-40MHz | 5GHz"]["Udp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HT-40MHz | 5GHz"]["Udp_BI"]) {
                            if (innerArr[k][p]["HT-40MHz | 5GHz"]["Udp_BI"]["value"] == Max_HT_40_5[5]) {
                                innerArr[k][p]["HT-40MHz | 5GHz"]["Udp_BI"]['status'] = true;
                            } else { innerArr[k][p]["HT-40MHz | 5GHz"]["Udp_BI"]['status'] = false; }
                        }
                    }
                    if (typeof innerArr[k][p]["HT-40MHz | 2GHz"] != 'undefined') {
                        if (innerArr[k][p]["HT-40MHz | 2GHz"]["Tcp_Tx"]) {
                            if (innerArr[k][p]["HT-40MHz | 2GHz"]["Tcp_Tx"]["value"] == Max_HT_40_2[0]) {
                                innerArr[k][p]["HT-40MHz | 2GHz"]["Tcp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["HT-40MHz | 2GHz"]["Tcp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HT-40MHz | 2GHz"]["Tcp_Rx"]) {
                            if (innerArr[k][p]["HT-40MHz | 2GHz"]["Tcp_Rx"]["value"] == Max_HT_40_2[1]) {
                                innerArr[k][p]["HT-40MHz | 2GHz"]["Tcp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["HT-40MHz | 2GHz"]["Tcp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HT-40MHz | 2GHz"]["Tcp_BI"]) {
                            if (innerArr[k][p]["HT-40MHz | 2GHz"]["Tcp_BI"]["value"] == Max_HT_40_2[2]) {
                                innerArr[k][p]["HT-40MHz | 2GHz"]["Tcp_BI"]['status'] = true;
                            } else { innerArr[k][p]["HT-40MHz | 2GHz"]["Tcp_BI"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HT-40MHz | 2GHz"]["Udp_Tx"]) {
                            if (innerArr[k][p]["HT-40MHz | 2GHz"]["Udp_Tx"]["value"] == Max_HT_40_2[3]) {
                                innerArr[k][p]["HT-40MHz | 2GHz"]["Udp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["HT-40MHz | 2GHz"]["Udp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HT-40MHz | 2GHz"]["Udp_Rx"]) {
                            if (innerArr[k][p]["HT-40MHz | 2GHz"]["Udp_Rx"]["value"] == Max_HT_40_2[4]) {
                                innerArr[k][p]["HT-40MHz | 2GHz"]["Udp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["HT-40MHz | 2GHz"]["Udp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HT-40MHz | 2GHz"]["Udp_BI"]) {
                            if (innerArr[k][p]["HT-40MHz | 2GHz"]["Udp_BI"]["value"] == Max_HT_40_2[5]) {
                                innerArr[k][p]["HT-40MHz | 2GHz"]["Udp_BI"]['status'] = true;
                            } else { innerArr[k][p]["HT-40MHz | 2GHz"]["Udp_BI"]['status'] = false; }
                        }
                    }
                    if (typeof innerArr[k][p]["HT-20MHz | 5GHz"] != 'undefined') {
                        if (innerArr[k][p]["HT-20MHz | 5GHz"]["Tcp_Tx"]) {
                            if (innerArr[k][p]["HT-20MHz | 5GHz"]["Tcp_Tx"]["value"] == Max_HT_20_5[0]) {
                                innerArr[k][p]["HT-20MHz | 5GHz"]["Tcp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["HT-20MHz | 5GHz"]["Tcp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HT-20MHz | 5GHz"]["Tcp_Rx"]) {
                            if (innerArr[k][p]["HT-20MHz | 5GHz"]["Tcp_Rx"]["value"] == Max_HT_20_5[1]) {
                                innerArr[k][p]["HT-20MHz | 5GHz"]["Tcp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["HT-20MHz | 5GHz"]["Tcp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HT-20MHz | 5GHz"]["Tcp_BI"]) {
                            if (innerArr[k][p]["HT-20MHz | 5GHz"]["Tcp_BI"]["value"] == Max_HT_20_5[2]) {
                                innerArr[k][p]["HT-20MHz | 5GHz"]["Tcp_BI"]['status'] = true;
                            } else { innerArr[k][p]["HT-20MHz | 5GHz"]["Tcp_BI"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HT-20MHz | 5GHz"]["Udp_Tx"]) {
                            if (innerArr[k][p]["HT-20MHz | 5GHz"]["Udp_Tx"]["value"] == Max_HT_20_5[3]) {
                                innerArr[k][p]["HT-20MHz | 5GHz"]["Udp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["HT-20MHz | 5GHz"]["Udp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HT-20MHz | 5GHz"]["Udp_Rx"]) {
                            if (innerArr[k][p]["HT-20MHz | 5GHz"]["Udp_Rx"]["value"] == Max_HT_20_5[4]) {
                                innerArr[k][p]["HT-20MHz | 5GHz"]["Udp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["HT-20MHz | 5GHz"]["Udp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HT-20MHz | 5GHz"]["Udp_BI"]) {
                            if (innerArr[k][p]["HT-20MHz | 5GHz"]["Udp_BI"]["value"] == Max_HT_20_5[5]) {
                                innerArr[k][p]["HT-20MHz | 5GHz"]["Udp_BI"]['status'] = true;
                            } else { innerArr[k][p]["HT-20MHz | 5GHz"]["Udp_BI"]['status'] = false; }
                        }
                    }
                    if (typeof innerArr[k][p]["HT-20MHz | 2GHz"] != 'undefined') {
                        if (innerArr[k][p]["HT-20MHz | 2GHz"]["Tcp_Tx"]) {
                            if (innerArr[k][p]["HT-20MHz | 2GHz"]["Tcp_Tx"]["value"] == Max_HT_20_2[0]) {
                                innerArr[k][p]["HT-20MHz | 2GHz"]["Tcp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["HT-20MHz | 2GHz"]["Tcp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HT-20MHz | 2GHz"]["Tcp_Rx"]) {
                            if (innerArr[k][p]["HT-20MHz | 2GHz"]["Tcp_Rx"]["value"] == Max_HT_20_2[1]) {
                                innerArr[k][p]["HT-20MHz | 2GHz"]["Tcp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["HT-20MHz | 2GHz"]["Tcp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HT-20MHz | 2GHz"]["Tcp_BI"]) {
                            if (innerArr[k][p]["HT-20MHz | 2GHz"]["Tcp_BI"]["value"] == Max_HT_20_2[2]) {
                                innerArr[k][p]["HT-20MHz | 2GHz"]["Tcp_BI"]['status'] = true;
                            } else { innerArr[k][p]["HT-20MHz | 2GHz"]["Tcp_BI"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HT-20MHz | 2GHz"]["Udp_Tx"]) {
                            if (innerArr[k][p]["HT-20MHz | 2GHz"]["Udp_Tx"]["value"] == Max_HT_20_2[3]) {
                                innerArr[k][p]["HT-20MHz | 2GHz"]["Udp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["HT-20MHz | 2GHz"]["Udp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HT-20MHz | 2GHz"]["Udp_Rx"]) {
                            if (innerArr[k][p]["HT-20MHz | 2GHz"]["Udp_Rx"]["value"] == Max_HT_20_2[4]) {
                                innerArr[k][p]["HT-20MHz | 2GHz"]["Udp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["HT-20MHz | 2GHz"]["Udp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["HT-20MHz | 2GHz"]["Udp_BI"]) {
                            if (innerArr[k][p]["HT-20MHz | 2GHz"]["Udp_BI"]["value"] == Max_HT_20_2[5]) {
                                innerArr[k][p]["HT-20MHz | 2GHz"]["Udp_BI"]['status'] = true;
                            } else { innerArr[k][p]["HT-20MHz | 2GHz"]["Udp_BI"]['status'] = false; }
                        }
                    }
                    if (typeof innerArr[k][p]["Non-HT BG | 2GHz"] != 'undefined') {
                        if (innerArr[k][p]["Non-HT BG | 2GHz"]["Tcp_Tx"]) {
                            if (innerArr[k][p]["Non-HT BG | 2GHz"]["Tcp_Tx"]["value"] == Max_Non_HT_BG[0]) {
                                innerArr[k][p]["Non-HT BG | 2GHz"]["Tcp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["Non-HT BG | 2GHz"]["Tcp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["Non-HT BG | 2GHz"]["Tcp_Rx"]) {
                            if (innerArr[k][p]["Non-HT BG | 2GHz"]["Tcp_Rx"]["value"] == Max_Non_HT_BG[1]) {
                                innerArr[k][p]["Non-HT BG | 2GHz"]["Tcp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["Non-HT BG | 2GHz"]["Tcp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["Non-HT BG | 2GHz"]["Tcp_BI"]) {
                            if (innerArr[k][p]["Non-HT BG | 2GHz"]["Tcp_BI"]["value"] == Max_Non_HT_BG[2]) {
                                innerArr[k][p]["Non-HT BG | 2GHz"]["Tcp_BI"]['status'] = true;
                            } else { innerArr[k][p]["Non-HT BG | 2GHz"]["Tcp_BI"]['status'] = false; }
                        }
                        if (innerArr[k][p]["Non-HT BG | 2GHz"]["Udp_Tx"]) {
                            if (innerArr[k][p]["Non-HT BG | 2GHz"]["Udp_Tx"]["value"] == Max_Non_HT_BG[3]) {
                                innerArr[k][p]["Non-HT BG | 2GHz"]["Udp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["Non-HT BG | 2GHz"]["Udp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["Non-HT BG | 2GHz"]["Udp_Rx"]) {
                            if (innerArr[k][p]["Non-HT BG | 2GHz"]["Udp_Rx"]["value"] == Max_Non_HT_BG[4]) {
                                innerArr[k][p]["Non-HT BG | 2GHz"]["Udp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["Non-HT BG | 2GHz"]["Udp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["Non-HT BG | 2GHz"]["Udp_BI"]) {
                            if (innerArr[k][p]["Non-HT BG | 2GHz"]["Udp_BI"]["value"] == Max_Non_HT_BG[5]) {
                                innerArr[k][p]["Non-HT BG | 2GHz"]["Udp_BI"]['status'] = true;
                            } else { innerArr[k][p]["Non-HT BG | 2GHz"]["Udp_BI"]['status'] = false; }
                        }
                    }
                    if (typeof innerArr[k][p]["Non-HT A | 5GHz"] != 'undefined') {
                        if (innerArr[k][p]["Non-HT A | 5GHz"]["Tcp_Tx"]) {
                            if (innerArr[k][p]["Non-HT A | 5GHz"]["Tcp_Tx"]["value"] == Max_Non_HT_A[0]) {
                                innerArr[k][p]["Non-HT A | 5GHz"]["Tcp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["Non-HT A | 5GHz"]["Tcp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["Non-HT A | 5GHz"]["Tcp_Rx"]) {
                            if (innerArr[k][p]["Non-HT A | 5GHz"]["Tcp_Rx"]["value"] == Max_Non_HT_A[1]) {
                                innerArr[k][p]["Non-HT A | 5GHz"]["Tcp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["Non-HT A | 5GHz"]["Tcp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["Non-HT A | 5GHz"]["Tcp_BI"]) {
                            if (innerArr[k][p]["Non-HT A | 5GHz"]["Tcp_BI"]["value"] == Max_Non_HT_A[2]) {
                                innerArr[k][p]["Non-HT A | 5GHz"]["Tcp_BI"]['status'] = true;
                            } else { innerArr[k][p]["Non-HT A | 5GHz"]["Tcp_BI"]['status'] = false; }
                        }
                        if (innerArr[k][p]["Non-HT A | 5GHz"]["Udp_Tx"]) {
                            if (innerArr[k][p]["Non-HT A | 5GHz"]["Udp_Tx"]["value"] == Max_Non_HT_A[3]) {
                                innerArr[k][p]["Non-HT A | 5GHz"]["Udp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["Non-HT A | 5GHz"]["Udp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["Non-HT A | 5GHz"]["Udp_Rx"]) {
                            if (innerArr[k][p]["Non-HT A | 5GHz"]["Udp_Rx"]["value"] == Max_Non_HT_A[4]) {
                                innerArr[k][p]["Non-HT A | 5GHz"]["Udp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["Non-HT A | 5GHz"]["Udp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["Non-HT A | 5GHz"]["Udp_BI"]) {
                            if (innerArr[k][p]["Non-HT A | 5GHz"]["Udp_BI"]["value"] == Max_Non_HT_A[5]) {
                                innerArr[k][p]["Non-HT A | 5GHz"]["Udp_BI"]['status'] = true;
                            } else { innerArr[k][p]["Non-HT A | 5GHz"]["Udp_BI"]['status'] = false; }
                        }
                    }
                    if (typeof innerArr[k][p]["Non-HT B-Only | 2GHz"] != 'undefined') {
                        if (innerArr[k][p]["Non-HT B-Only | 2GHz"]["Tcp_Tx"]) {
                            if (innerArr[k][p]["Non-HT B-Only | 2GHz"]["Tcp_Tx"]["value"] == Max_Non_HT_B[0]) {
                                innerArr[k][p]["Non-HT B-Only | 2GHz"]["Tcp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["Non-HT B-Only | 2GHz"]["Tcp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["Non-HT B-Only | 2GHz"]["Tcp_Rx"]) {
                            if (innerArr[k][p]["Non-HT B-Only | 2GHz"]["Tcp_Rx"]["value"] == Max_Non_HT_B[1]) {
                                innerArr[k][p]["Non-HT B-Only | 2GHz"]["Tcp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["Non-HT B-Only | 2GHz"]["Tcp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["Non-HT B-Only | 2GHz"]["Tcp_BI"]) {
                            if (innerArr[k][p]["Non-HT B-Only | 2GHz"]["Tcp_BI"]["value"] == Max_Non_HT_B[2]) {
                                innerArr[k][p]["Non-HT B-Only | 2GHz"]["Tcp_BI"]['status'] = true;
                            } else { innerArr[k][p]["Non-HT B-Only | 2GHz"]["Tcp_BI"]['status'] = false; }
                        }
                        if (innerArr[k][p]["Non-HT B-Only | 2GHz"]["Udp_Tx"]) {
                            if (innerArr[k][p]["Non-HT B-Only | 2GHz"]["Udp_Tx"]["value"] == Max_Non_HT_B[3]) {
                                innerArr[k][p]["Non-HT B-Only | 2GHz"]["Udp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["Non-HT B-Only | 2GHz"]["Udp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["Non-HT B-Only | 2GHz"]["Udp_Rx"]) {
                            if (innerArr[k][p]["Non-HT B-Only | 2GHz"]["Udp_Rx"]["value"] == Max_Non_HT_B[4]) {
                                innerArr[k][p]["Non-HT B-Only | 2GHz"]["Udp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["Non-HT B-Only | 2GHz"]["Udp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["Non-HT B-Only | 2GHz"]["Udp_BI"]) {
                            if (innerArr[k][p]["Non-HT B-Only | 2GHz"]["Udp_BI"]["value"] == Max_Non_HT_B[5]) {
                                innerArr[k][p]["Non-HT B-Only | 2GHz"]["Udp_BI"]['status'] = true;
                            } else { innerArr[k][p]["Non-HT B-Only | 2GHz"]["Udp_BI"]['status'] = false; }
                        }
                    }
                    if (typeof innerArr[k][p]["2GHz"] != 'undefined') {
                        if (innerArr[k][p]["2GHz"]["Tcp_Tx"]) {
                            if (innerArr[k][p]["2GHz"]["Tcp_Tx"]["value"] == Max_Iop_Perf_2[0]) {
                                innerArr[k][p]["2GHz"]["Tcp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["2GHz"]["Tcp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["2GHz"]["Tcp_Rx"]) {
                            if (innerArr[k][p]["2GHz"]["Tcp_Rx"]["value"] == Max_Iop_Perf_2[1]) {
                                innerArr[k][p]["2GHz"]["Tcp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["2GHz"]["Tcp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["2GHz"]["Udp_Tx"]) {
                            if (innerArr[k][p]["2GHz"]["Udp_Tx"]["value"] == Max_Iop_Perf_2[2]) {
                                innerArr[k][p]["2GHz"]["Udp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["2GHz"]["Udp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["2GHz"]["Udp_Rx"]) {
                            if (innerArr[k][p]["2GHz"]["Udp_Rx"]["value"] == Max_Iop_Perf_2[3]) {
                                innerArr[k][p]["2GHz"]["Udp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["2GHz"]["Udp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["2GHz"]["PHY Rate"]) {
                            if (innerArr[k][p]["2GHz"]["PHY Rate"]["value"] == Max_Iop_Perf_2[4]) {
                                innerArr[k][p]["2GHz"]["PHY Rate"]['status'] = true;
                            } else { innerArr[k][p]["2GHz"]["PHY Rate"]['status'] = false; }
                        }
                    }
                    if (typeof innerArr[k][p]["5GHz"] != 'undefined') {
                        if (innerArr[k][p]["5GHz"]["Tcp_Tx"]) {
                            if (innerArr[k][p]["5GHz"]["Tcp_Tx"]["value"] == Max_Iop_Perf_5[0]) {
                                innerArr[k][p]["5GHz"]["Tcp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["5GHz"]["Tcp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["5GHz"]["Tcp_Rx"]) {
                            if (innerArr[k][p]["5GHz"]["Tcp_Rx"]["value"] == Max_Iop_Perf_5[1]) {
                                innerArr[k][p]["5GHz"]["Tcp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["5GHz"]["Tcp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["5GHz"]["Udp_Tx"]) {
                            if (innerArr[k][p]["5GHz"]["Udp_Tx"]["value"] == Max_Iop_Perf_5[2]) {
                                innerArr[k][p]["5GHz"]["Udp_Tx"]['status'] = true;
                            } else { innerArr[k][p]["5GHz"]["Udp_Tx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["5GHz"]["Udp_Rx"]) {
                            if (innerArr[k][p]["5GHz"]["Udp_Rx"]["value"] == Max_Iop_Perf_5[3]) {
                                innerArr[k][p]["5GHz"]["Udp_Rx"]['status'] = true;
                            } else { innerArr[k][p]["5GHz"]["Udp_Rx"]['status'] = false; }
                        }
                        if (innerArr[k][p]["5GHz"]["PHY Rate"]) {
                            if (innerArr[k][p]["5GHz"]["PHY Rate"]["value"] == Max_Iop_Perf_5[4]) {
                                innerArr[k][p]["5GHz"]["PHY Rate"]['status'] = true;
                            } else { innerArr[k][p]["5GHz"]["PHY Rate"]['status'] = false; }
                        }
                    }

                    let bandArr = ["HE 80 | 5GHz", "HE 20 | 2GHz", "VHT 80MHz | 5GHz", "HT 40MHz | 5GHz", "HT 20MHz | 2GHz"];
                    let bandSubValueArr = ["Association", "Unicast ping", "Ping (Bi-Directional)", "Re-association", "TCP Data (Bi-Directional)", "UDP Data (Bi-Directional)", "Broadcast Data", "Multicast Data"]

                    if (typeof innerArr[k][p]["reportName"] != 'undefined') {
                        for (let a = 0; a < bandArr.length; a++) {
                            for (let b = 0; b < bandSubValueArr.length; b++) {
                                if (typeof innerArr[k][p][bandArr[a]] != 'undefined') {
                                    if (typeof innerArr[k][p][bandArr[a]][bandSubValueArr[b]] != 'undefined') {
                                        if (innerArr[k][p][bandArr[a]][bandSubValueArr[b]]["value"] == 'PASS') {
                                            innerArr[k][p][bandArr[a]][bandSubValueArr[b]] = { "value": innerArr[k][p][bandArr[a]][bandSubValueArr[b]]["value"], "status": true };
                                        } else { innerArr[k][p][bandArr[a]][bandSubValueArr[b]] = { "value": innerArr[k][p][bandArr[a]][bandSubValueArr[b]]["value"], "status": false }; }
                                    }
                                }
                            }
                        }
                    } else {
                        for (let a = 0; a < bandArr.length; a++) {
                            for (let b = 0; b < bandSubValueArr.length; b++) {
                                if (typeof innerArr[k][p][bandArr[a]] != 'undefined') {
                                    if (typeof innerArr[k][p][bandArr[a]][bandSubValueArr[b]] != 'undefined') {
                                        if (innerArr[k][p][bandArr[a]][bandSubValueArr[b]] == 'PASS') {
                                            innerArr[k][p][bandArr[a]][bandSubValueArr[b]] = { "value": innerArr[k][p][bandArr[a]][bandSubValueArr[b]], "status": true };
                                        } else { innerArr[k][p][bandArr[a]][bandSubValueArr[b]] = { "value": innerArr[k][p][bandArr[a]][bandSubValueArr[b]], "status": false }; }
                                    }
                                }
                            }
                        }
                    }




                } // Inner For loop
            }
        }
        return smartMergeObj;
    } catch (err) {
        logger.error("updateMaxValue error : ", err);
    }
}


/*
    This method receives the throughput Smart Marge data for report view
*/
routes.prototype.insertSmartMergeReport = async function(req, res) {
    var responseObject = {
        status: true,
        responseCode: 200,
        message: ''
    };

    try {
        let execution_names = req.body.execution_names;
        let executions = [];

        if (typeof execution_names != 'undefined') {

            for (var i = 0; i < execution_names.length; i++) {
                if (Object.keys(execution_names[i]).length !== 0) {
                    console.log(execution_names[i].name);
                    let executionDetails = await executionObj.getExecution(execution_names[i].id);
                    executions.push(executionDetails[0]);
                }
            }

            let report = {
                filename: req.body.fileinfo[0].filename,
                projectType: req.body.projectType,
                created_by: req.body.fileinfo[0].email,
                created_time: Date.now(),
                executions: executions,
            }

            /* get last inserted id of the report table*/
            let insertReport = await throughputObj.insertReport(report);
            console.log(insertReport.insertedId);

            let bodyDataArr = [];
            for (var i = 0; i < req.body.data.length; i++) {
                for (var j = 0; j < req.body.data[i].length; j++) {
                    delete req.body.data[i][j]["_id"];
                    req.body.data[i][j]['report_id'] = insertReport.insertedId;
                    req.body.data[i][j]['reportName'] = req.body.fileinfo[0].filename;
                    bodyDataArr.push(req.body.data[i][j]);
                }
            }

            console.log("bodyDataArr -->", bodyDataArr);
            let insertReportData = await throughputObj.insertReportData(bodyDataArr);
            console.log("result-- ", insertReportData.result);
            responseObject.message = 'Created Report Successfully';
        } else {
            responseObject.message = 'Please Pass Execution ID and Name';
            responseObject.status = false;
            responseObject.responseCode = 400;
        }

    } catch (err) {
        logger.error("insert SmartMergeThroughpu Report Data:", err);
        if (err.code == '11000') {
            responseError(res, responseObject, "This Report Name already exists!");
        } else {
            responseError(res, responseObject, "Error in inserting Smartmerge Throughput Report Data.");
        }
    }
    res.json(responseObject);
}


/*
    This method receives List of name saved as Merge TP Report
*/
routes.prototype.getReportList = async function(req, res) {
    var responseObject = {
        status: true,
        responseCode: 200,
        size: '',
        data: {}
    };

    try {
        let getReportList = await throughputObj.getReportList();
        console.log('Report --', getReportList);

        for (var i = 0; i < getReportList.length; i++) {
            if (typeof getReportList[i].executions != 'undefined') {
                for (var j = 0; j < getReportList[i].executions.length; j++) {
                    if (getReportList[i].executions[j].location == '' || typeof getReportList[i].executions[j].location == 'undefined') {
                        getReportList[i].executions[j].location = '-';
                    }
                    if (getReportList[i].executions[j].interface == '' || typeof getReportList[i].executions[j].interface == 'undefined') {
                        getReportList[i].executions[j].interface = '-';
                    }
                    if (getReportList[i].executions[j].platform == '' || getReportList[i].executions[j].platform == null || typeof getReportList[i].executions[j].platform == 'undefined') {
                        getReportList[i].executions[j].platform = '-';
                    }
                    if (getReportList[i].executions[j].soc == '' || typeof getReportList[i].executions[j].soc == 'undefined') {
                        getReportList[i].executions[j].soc = '-';
                    }
                    if (getReportList[i].executions[j].os == '' || typeof getReportList[i].executions[j].os == 'undefined') {
                        getReportList[i].executions[j].os = '-';
                    }
                    if (getReportList[i].executions[j].release == '' || getReportList[i].executions[j].release == null || typeof getReportList[i].executions[j].release == 'undefined') {
                        getReportList[i].executions[j].release = '-';
                    }
                }
            }

            getReportList[i].id = getReportList[i]._id;
        }
        responseObject.size = getReportList.length;
        responseObject.data = getReportList;
    } catch (err) {
        logger.error("getTpReportList:", err);
        responseError(res, responseObject, "Error in list of Smartmerge getReportList Data.");
    }
    res.json(responseObject);
}


/*
    This method receives detail TP Report List of Smart Merge
*/
routes.prototype.detailReportList = async function(req, res) {
    var responseObject = {
        status: true,
        responseCode: 200,
        size: '',
        data: {}
    };

    let headers, uniqVal;
    var attenVal = [],
        val = [];

    try {
        let kpiData = await throughputObj.getDetailedReport(req.body.report_id);

        //let kpiData = await throughputObj.findThroughputData(query);

        let project_type_arr = _.pluck(_.uniq(_.union(kpiData), false, _.property('project_type')), 'project_type');
        project_type_arr = _.uniq(project_type_arr);
        console.log("Templates : ", project_type_arr);

        project_type = project_type_arr[0];
        kpi = _.where(kpiData, { project_type: project_type });

        if (project_type == 'RvR' || project_type == 'RVR-SCBT') {
            headers = await throughputObj.findHeader('RvR');
            for (let item of kpi) {
                let attenuationVal = (Object.keys(item));
                _.forEach(attenuationVal, function(item2) {
                    if (item2.match('^[0-9]*$')) {
                        val.push(Number(item2.match('^[0-9]*$')[0]));
                    }
                });
                let Un = _.uniq(val);
                uniqVal = Un.sort((a, b) => a - b);
            }

            responseObject.headers = headers.header;
            responseObject.attenuation = uniqVal;
            responseObject.projectType = project_type;
        } else if (project_type == 'TP') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
        } else if (project_type == 'Simul-TP-2INTF') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'Simul-TP-3INTF') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'Simul-TP-4INTF') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'BAT-CABLE-UP') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'IOP-Perf') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
            // } else if (project_type == 'BAT-OTA') {
            //     headers = await throughputObj.findHeader(project_type);
            //     responseObject.projectType = project_type;
            //     responseObject.headers = headers.header;
        } else if (project_type == 'MBSS-SCBT') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'OFDMA-UL') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'OFDMA-DL') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'DL-11ac-MU-MIMO') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'DL-11ax-MU-MIMO') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'UL-11ax-MU-MIMO') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'STA-CPU-Util') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
        } else if (project_type == 'REVERB-OTA-RVR') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            let attenuationDeg = (Object.keys(kpi[0]));
            _.forEach(attenuationDeg, function(item) {
                if (item.match('^[0-9]*$')) {
                    attenVal.push(item.match('^[0-9]*$')[0]);
                }
            });
            responseObject.headers = [];
            responseObject.headers.push(headers.header, attenVal);
        } else if (project_type == 'REVERB-OTA-REVERSE-RVR') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            let attenuationDeg = (Object.keys(kpi[0]));
            _.forEach(attenuationDeg, function(item) {
                if (item.match('^[0-9]*$')) {
                    attenVal.push(item.match('^[0-9]*$')[0]);
                }
            });
            responseObject.headers = [];
            responseObject.headers.push(headers.header, attenVal);
        } else if (project_type == 'DBC-Cpu-Util') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'IOP-TP') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
        } else if (project_type == 'STA-Coex-TP') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'P2P-Coex-TP') {
            headers = await throughputObj.findHeader("STA-Coex-TP");
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'MMH-Coex-TP') {
            headers = await throughputObj.findHeader("STA-Coex-TP");
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'Coex-Simul-TP-2INTF') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'Coex-Simul-TP-3INTF') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'COEX-BT-RVR') {
            headers = await throughputObj.findHeader("COEX-RVR");
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
            let attn = (Object.keys(kpi[0]));
            _.forEach(attn, function(item) {
                if (item.match('^[0-9]*$')) {
                    attenVal.push(item.match('^[0-9]*$')[0]);
                }
            });
            attenVal.unshift("BT Attn");
            responseObject.BtAttn = attenVal;

            let WifiAttnArr = ["Wi-Fi Attn", 40];
            let len = WifiAttnArr.length;
            for (let i = len; i < attenVal.length; i++) {
                WifiAttnArr.push(40);
            }
            //responseObject.WifiAttn = ["Wi-Fi Attn", 40, 40, 40, 40, 40, 40];
            responseObject.WifiAttn = WifiAttnArr;

        } else if (project_type == 'COEX-WiFi-RVR') {
            headers = await throughputObj.findHeader("COEX-RVR");
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
            let attn = (Object.keys(kpi[0]));
            _.forEach(attn, function(item) {
                if (item.match('^[0-9]*$')) {
                    attenVal.push(item.match('^[0-9]*$')[0]);
                }
            });
            attenVal.unshift("Wi-Fi Attn");
            responseObject.WifiAttn = attenVal;

            let BtAttnArr = ["BT Attn", 40];
            let len = BtAttnArr.length;
            for (let i = len; i < attenVal.length; i++) {
                BtAttnArr.push(40);
            }
            //responseObject.BtAttn = ["BT Attn", 40, 40, 40, 40, 40, 40];
            responseObject.BtAttn = BtAttnArr;

        } else if (project_type == 'COEX-BT-WiFi-RVR') {
            headers = await throughputObj.findHeader("COEX-RVR");
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
            let attn = (Object.keys(kpi[0]));
            _.forEach(attn, function(item) {
                if (item.match('^[0-9]*$')) {
                    attenVal.push(item.match('^[0-9]*$')[0]);
                }
            });
            attenVal.unshift("BT Attn");
            responseObject.BtAttn = attenVal;
            let WifiAtn = [...attenVal];
            WifiAtn[0] = "Wi-Fi Attn";
            responseObject.WifiAttn = WifiAtn;
        } else if (project_type == 'BT-Throughput') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'BLE-Throughput') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'BT-MOS') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'BT-Dual-HFP') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'CC') {
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;
        } else if (project_type == 'BLE-RvR') {
            for (let item of kpi) {
                let attenuationVal = (Object.keys(item));
                _.forEach(attenuationVal, function(item2) {
                    if (item2.match('^[0-9]*$')) {
                        val.push(Number(item2.match('^[0-9]*$')[0]));
                    }
                });
                let Un = _.uniq(val);
                uniqVal = Un.sort((a, b) => a - b);
            }
            responseObject.attenuation = uniqVal;

            let table = await BleRvrTables(kpi);
            kpi = table;
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;

        } else if (project_type == 'LE-Long-Range-RvR') {
            for (let item of kpi) {
                let attenuationVal = (Object.keys(item));
                _.forEach(attenuationVal, function(item2) {
                    if (item2.match('^[0-9]*$')) {
                        val.push(Number(item2.match('^[0-9]*$')[0]));
                    }
                });
                let Un = _.uniq(val);
                uniqVal = Un.sort((a, b) => a - b);
            }
            responseObject.attenuation = uniqVal;

            let table = await LongRangeRvrTables(kpi);
            kpi = table;
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;

        } else if (project_type == 'BT-RvR') {
            for (let item of kpi) {
                let attenuationVal = (Object.keys(item));
                _.forEach(attenuationVal, function(item2) {
                    if (item2.match('^[0-9]*$')) {
                        val.push(Number(item2.match('^[0-9]*$')[0]));
                    }
                });
                let Un = _.uniq(val);
                uniqVal = Un.sort((a, b) => a - b);
            }
            responseObject.attenuation = uniqVal;

            let table = await BtRvrTables(kpi);
            kpi = table;
            headers = await throughputObj.findHeader(project_type);
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;

        } else {
            responseObject.projectType = null;
            console.log("Different project type");
        }

        responseObject.size = kpiData.length;
        responseObject.data = kpiData;
        res.json(responseObject);

    } catch (err) {
        logger.error("detailTpReportList:", err);
        responseError(res, responseObject, "Error in getting detailed Smartmerge Throughput Data.");
    }


}

/** Merges rvr data of different executions */
async function mergeRvRData(uniqVal, executions, project) {

    let data;
    let itere = [];
    let max;
    let value;
    let resData = [];

    try {
        if (project == 'RvR') {
            data = await compareRvrData(executions);
        } else if (project == 'REVERB-OTA-REVERSE-RVR') {
            data = await compareReverseRvrData(executions);
        } else if (project == 'REVERB-OTA-RVR') {
            data = await compareOtaRvrData(executions);
        }

        _.each(data, function(item) {
            _.each(uniqVal, function(val) {
                _.each(item, function(element, index) {
                    if (typeof element["reportName"] != 'undefined') {
                        itere[index] = element[val][0];
                    } else {
                        itere[index] = element[val];
                    }
                });
                //send for max cal
                max = _.max(itere);

                _.each(item, function(element) {
                    value = [];
                    //console.log('element-->', element['reportName']);
                    if (typeof element["reportName"] != 'undefined') {
                        if (element[val][0] == max && max != '') {
                            value.push(max, true);
                            element[val] = value;
                        } else {
                            value.push(element[val][0], false);
                            element[val] = value;
                        }
                    } else {
                        if (element[val] == max && max != '') {
                            value.push(max, true);
                            element[val] = value;
                        } else {
                            value.push(element[val], false);
                            element[val] = value;
                        }
                    }

                });
            });
            resData.push(item);
        });
        //console.log("response data", resData);
        return resData;

    } catch (error) {
        logger.error("RvR merge error:", error);
    }

}


/** Merges Simul-TP-2INTF data of different executions */
async function smartMergeCompare2INFData(executions) {

    try {
        let uniqTPType = _.pluck(_.uniq(_.union(executions), false, _.property('TP TYPE')), 'TP TYPE');
        let uniqAggregation = _.pluck(_.uniq(_.union(executions), false, _.property('Aggregation')), 'Aggregation');
        let uniqChannelINTF1 = _.pluck(_.uniq(_.union(executions), false, _.property('Channel | INTF 1')), 'Channel | INTF 1');
        let uniqChannelINTF2 = _.pluck(_.uniq(_.union(executions), false, _.property('Channel | INTF 2')), 'Channel | INTF 2');
        let uniqConnectivityModes = _.pluck(_.uniq(_.union(executions), false, _.property('Connectivity Modes')), 'Connectivity Modes');
        let uniqDUT = _.pluck(_.uniq(_.union(executions), false, _.property('DUT')), 'DUT');
        let uniqDUTFwDrv = _.pluck(_.uniq(_.union(executions), false, _.property('DUT Fw/Drv')), 'DUT Fw/Drv');
        let uniqDUTHostPlatform = _.pluck(_.uniq(_.union(executions), false, _.property('DUT Host Platform')), 'DUT Host Platform');
        let uniqDataRate = _.pluck(_.uniq(_.union(executions), false, _.property('Data Rate')), 'Data Rate');
        let uniqGuardInterval = _.pluck(_.uniq(_.union(executions), false, _.property('Guard_Interval')), 'Guard_Interval');
        let uniqINTF1Configuration = _.pluck(_.uniq(_.union(executions), false, _.property('INTF1 Configuration')), 'INTF1 Configuration');
        let uniqINTF2Configuration = _.pluck(_.uniq(_.union(executions), false, _.property('INTF2 Configuration')), 'INTF2 Configuration');
        let uniqInterface = _.pluck(_.uniq(_.union(executions), false, _.property('Interface')), 'Interface');
        let uniqSDIOClock = _.pluck(_.uniq(_.union(executions), false, _.property('SDIO Clock')), 'SDIO Clock');
        let uniqSecurity = _.pluck(_.uniq(_.union(executions), false, _.property('Security')), 'Security');

        let testCompareObjects = [];

        _.each(uniqTPType, function(element) { // 0th iteration
            let commonuniqTPType = _.filter(executions, function(p) { return p['TP TYPE'] == element; })

            _.each(uniqAggregation, function(element) { // 1th iteration
                let commonuniqAggregation = _.filter(commonuniqTPType, function(p) { return p['Aggregation'] == element; })

                _.each(uniqChannelINTF1, function(element) { // 2th iteration
                    let commonuniqChannelINTF1 = _.filter(commonuniqAggregation, function(p) { return p['Channel | INTF 1'] == element; })

                    _.each(uniqChannelINTF2, function(element) { // 3th iteration
                        let commonuniqChannelINTF2 = _.filter(commonuniqChannelINTF1, function(p) { return p['Channel | INTF 2'] == element; })

                        _.each(uniqConnectivityModes, function(element) { // 4th iteration
                            let commonuniqConnectivityModes = _.filter(commonuniqChannelINTF2, function(p) { return p['Connectivity Modes'] == element; })

                            _.each(uniqDUT, function(element) { // 5th iteration
                                let commonuniqDUT = _.filter(commonuniqConnectivityModes, function(p) { return p['DUT'] == element; })

                                _.each(uniqDUTFwDrv, function(element) { // 6th iteration
                                    let commonuniqDUTFwDrv = _.filter(commonuniqDUT, function(p) { return p['DUT Fw/Drv'] == element; })

                                    _.each(uniqDUTHostPlatform, function(element) { // 7th iteration
                                        let commonuniqDUTHostPlatform = _.filter(commonuniqDUTFwDrv, function(p) { return p['DUT Host Platform'] == element; })

                                        _.each(uniqDataRate, function(element) { // 8th iteration
                                            let commonuniqDataRate = _.filter(commonuniqDUTHostPlatform, function(p) { return p['Data Rate'] == element; })

                                            _.each(uniqGuardInterval, function(element) { // 9th iteration
                                                let commonuniqGuardInterval = _.filter(commonuniqDataRate, function(p) { return p['Guard_Interval'] == element; })

                                                _.each(uniqINTF1Configuration, function(element) { // 10th iteration
                                                    let commonuniqINTF1Configuration = _.filter(commonuniqGuardInterval, function(p) { return p['INTF1 Configuration'] == element; })

                                                    _.each(uniqINTF2Configuration, function(element) { // 11th iteration
                                                        let commonuniqINTF2Configuration = _.filter(commonuniqINTF1Configuration, function(p) { return p['INTF2 Configuration'] == element; })

                                                        _.each(uniqInterface, function(element) { // 12th iteration
                                                            let commonuniqInterface = _.filter(commonuniqINTF2Configuration, function(p) { return p['Interface'] == element; })

                                                            _.each(uniqSDIOClock, function(element) { // 13th iteration
                                                                let commonuniqSDIOClock = _.filter(commonuniqInterface, function(p) { return p['SDIO Clock'] == element; })

                                                                _.each(uniqSecurity, function(element) { // 14th iteration
                                                                    let commonuniqSecurity = _.filter(commonuniqSDIOClock, function(p) { return p['Security'] == element; })

                                                                    if (commonuniqSecurity.length) {
                                                                        testCompareObjects.push(commonuniqSecurity);
                                                                    }

                                                                })
                                                            })
                                                        })
                                                    })
                                                })
                                            })
                                        })
                                    })
                                })
                            })
                        })
                    })
                })
            })
        })

        return testCompareObjects;
    } catch (err) {
        logger.error("smartCompareTPData error : ", err);
    }

}


/* Function to update MAX valueu pdateMaxValue2INFData*/
async function updateMaxValue2INFData(smartMergeObj) {
    try {
        let TCP_TXTX_INTF1 = [],
            TCP_TXTX_INTF2 = [],
            TCP_TXRX_INTF1 = [],
            TCP_TXRX_INTF2 = [],
            TCP_RXRX_INTF1 = [],
            TCP_RXRX_INTF2 = [],
            TCP_RXTX_INTF1 = [],
            TCP_RXTX_INTF2 = [],
            TCP_TXTX_INTF1_val = [],
            TCP_TXTX_INTF2_val = [],
            TCP_TXRX_INTF1_val = [],
            TCP_TXRX_INTF2_val = [],
            TCP_RXRX_INTF1_val = [],
            TCP_RXRX_INTF2_val = [],
            TCP_RXTX_INTF1_val = [],
            TCP_RXTX_INTF2_val = [];

        let UDP_TXTX_INTF1 = [],
            UDP_TXTX_INTF2 = [],
            UDP_TXRX_INTF1 = [],
            UDP_TXRX_INTF2 = [],
            UDP_RXRX_INTF1 = [],
            UDP_RXRX_INTF2 = [],
            UDP_RXTX_INTF1 = [],
            UDP_RXTX_INTF2 = [],
            UDP_TXTX_INTF1_val = [],
            UDP_TXTX_INTF2_val = [],
            UDP_TXRX_INTF1_val = [],
            UDP_TXRX_INTF2_val = [],
            UDP_RXRX_INTF1_val = [],
            UDP_RXRX_INTF2_val = [],
            UDP_RXTX_INTF1_val = [],
            UDP_RXTX_INTF2_val = [];

        for (var j = 0; j < smartMergeObj.length; j++) {
            innerArr = [];
            innerArr.push(smartMergeObj[j]);

            for (var i = 0; i < smartMergeObj[j].length; i++) {

                if (typeof smartMergeObj[j][i]["reportName"] != 'undefined') {
                    if (typeof smartMergeObj[j][i]["TCP"] != 'undefined') {
                        if (typeof smartMergeObj[j][i]["TCP"]["TXTX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["TCP"]["TXTX"]["INTF1"] != 'undefined') {
                                TCP_TXTX_INTF1.push(smartMergeObj[j][i]["TCP"]["TXTX"]["INTF1"]["value"]);
                                TCP_TXTX_INTF1_val.push(TCP_TXTX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["TXTX"]["INTF2"] != 'undefined') {
                                TCP_TXTX_INTF2.push(smartMergeObj[j][i]["TCP"]["TXTX"]["INTF2"]["value"]);
                                TCP_TXTX_INTF2_val.push(TCP_TXTX_INTF2);
                            }
                        }

                        if (typeof smartMergeObj[j][i]["TCP"]["TXRX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["TCP"]["TXRX"]["INTF1"] != 'undefined') {
                                TCP_TXRX_INTF1.push(smartMergeObj[j][i]["TCP"]["TXRX"]["INTF1"]["value"]);
                                TCP_TXRX_INTF1_val.push(TCP_TXRX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["TXRX"]["INTF2"] != 'undefined') {
                                TCP_TXRX_INTF2.push(smartMergeObj[j][i]["TCP"]["TXRX"]["INTF2"]["value"]);
                                TCP_TXRX_INTF2_val.push(TCP_TXRX_INTF2);
                            }
                        }

                        if (typeof smartMergeObj[j][i]["TCP"]["RXRX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["TCP"]["RXRX"]["INTF1"] != 'undefined') {
                                TCP_RXRX_INTF1.push(smartMergeObj[j][i]["TCP"]["RXRX"]["INTF1"]["value"]);
                                TCP_RXRX_INTF1_val.push(TCP_RXRX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["RXRX"]["INTF2"] != 'undefined') {
                                TCP_RXRX_INTF2.push(smartMergeObj[j][i]["TCP"]["RXRX"]["INTF2"]["value"]);
                                TCP_RXRX_INTF2_val.push(TCP_RXRX_INTF2);
                            }
                        }

                        if (typeof smartMergeObj[j][i]["TCP"]["RXTX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["TCP"]["RXTX"]["INTF1"] != 'undefined') {
                                TCP_RXTX_INTF1.push(smartMergeObj[j][i]["TCP"]["RXTX"]["INTF1"]["value"]);
                                TCP_RXTX_INTF1_val.push(TCP_RXTX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["RXTX"]["INTF2"] != 'undefined') {
                                TCP_RXTX_INTF2.push(smartMergeObj[j][i]["TCP"]["RXTX"]["INTF2"]["value"]);
                                TCP_RXTX_INTF2_val.push(TCP_RXTX_INTF2);
                            }
                        }
                    }

                    if (typeof smartMergeObj[j][i]["UDP"] != 'undefined') {
                        if (typeof smartMergeObj[j][i]["UDP"]["TXTX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["UDP"]["TXTX"]["INTF1"] != 'undefined') {
                                UDP_TXTX_INTF1.push(smartMergeObj[j][i]["UDP"]["TXTX"]["INTF1"]["value"]);
                                UDP_TXTX_INTF1_val.push(UDP_TXTX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["TXTX"]["INTF2"] != 'undefined') {
                                UDP_TXTX_INTF2.push(smartMergeObj[j][i]["UDP"]["TXTX"]["INTF2"]["value"]);
                                UDP_TXTX_INTF2_val.push(UDP_TXTX_INTF2);
                            }
                        }

                        if (typeof smartMergeObj[j][i]["UDP"]["TXRX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["UDP"]["TXRX"]["INTF1"] != 'undefined') {
                                UDP_TXRX_INTF1.push(smartMergeObj[j][i]["UDP"]["TXRX"]["INTF1"]["value"]);
                                UDP_TXRX_INTF1_val.push(UDP_TXRX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["TXRX"]["INTF2"] != 'undefined') {
                                UDP_TXRX_INTF2.push(smartMergeObj[j][i]["UDP"]["TXRX"]["INTF2"]["value"]);
                                UDP_TXRX_INTF2_val.push(UDP_TXRX_INTF2);
                            }
                        }

                        if (typeof smartMergeObj[j][i]["UDP"]["RXRX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["UDP"]["RXRX"]["INTF1"] != 'undefined') {
                                UDP_RXRX_INTF1.push(smartMergeObj[j][i]["UDP"]["RXRX"]["INTF1"]["value"]);
                                UDP_RXRX_INTF1_val.push(UDP_RXRX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["RXRX"]["INTF2"] != 'undefined') {
                                UDP_RXRX_INTF2.push(smartMergeObj[j][i]["UDP"]["RXRX"]["INTF2"]["value"]);
                                UDP_RXRX_INTF2_val.push(UDP_RXRX_INTF2);
                            }
                        }

                        if (typeof smartMergeObj[j][i]["UDP"]["RXTX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["UDP"]["RXTX"]["INTF1"] != 'undefined') {
                                UDP_RXTX_INTF1.push(smartMergeObj[j][i]["UDP"]["RXTX"]["INTF1"]["value"]);
                                UDP_RXTX_INTF1_val.push(UDP_RXTX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["RXTX"]["INTF2"] != 'undefined') {
                                UDP_RXTX_INTF2.push(smartMergeObj[j][i]["UDP"]["RXTX"]["INTF2"]["value"]);
                                UDP_RXTX_INTF2_val.push(UDP_RXTX_INTF2);
                            }
                        }
                    }
                } // Execution Report Compare IF BLOCK
                else {
                    if (typeof smartMergeObj[j][i]["TCP"] != 'undefined') {
                        if (typeof smartMergeObj[j][i]["TCP"]["TXTX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["TCP"]["TXTX"]["INTF1"] != 'undefined') {
                                TCP_TXTX_INTF1.push(smartMergeObj[j][i]["TCP"]["TXTX"]["INTF1"]);
                                TCP_TXTX_INTF1_val.push(TCP_TXTX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["TXTX"]["INTF2"] != 'undefined') {
                                TCP_TXTX_INTF2.push(smartMergeObj[j][i]["TCP"]["TXTX"]["INTF2"]);
                                TCP_TXTX_INTF2_val.push(TCP_TXTX_INTF2);
                            }
                        }

                        if (typeof smartMergeObj[j][i]["TCP"]["TXRX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["TCP"]["TXRX"]["INTF1"] != 'undefined') {
                                TCP_TXRX_INTF1.push(smartMergeObj[j][i]["TCP"]["TXRX"]["INTF1"]);
                                TCP_TXRX_INTF1_val.push(TCP_TXRX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["TXRX"]["INTF2"] != 'undefined') {
                                TCP_TXRX_INTF2.push(smartMergeObj[j][i]["TCP"]["TXRX"]["INTF2"]);
                                TCP_TXRX_INTF2_val.push(TCP_TXRX_INTF2);
                            }
                        }

                        if (typeof smartMergeObj[j][i]["TCP"]["RXRX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["TCP"]["RXRX"]["INTF1"] != 'undefined') {
                                TCP_RXRX_INTF1.push(smartMergeObj[j][i]["TCP"]["RXRX"]["INTF1"]);
                                TCP_RXRX_INTF1_val.push(TCP_RXRX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["RXRX"]["INTF2"] != 'undefined') {
                                TCP_RXRX_INTF2.push(smartMergeObj[j][i]["TCP"]["RXRX"]["INTF2"]);
                                TCP_RXRX_INTF2_val.push(TCP_RXRX_INTF2);
                            }
                        }

                        if (typeof smartMergeObj[j][i]["TCP"]["RXTX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["TCP"]["RXTX"]["INTF1"] != 'undefined') {
                                TCP_RXTX_INTF1.push(smartMergeObj[j][i]["TCP"]["RXTX"]["INTF1"]);
                                TCP_RXTX_INTF1_val.push(TCP_RXTX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["TCP"]["RXTX"]["INTF2"] != 'undefined') {
                                TCP_RXTX_INTF2.push(smartMergeObj[j][i]["TCP"]["RXTX"]["INTF2"]);
                                TCP_RXTX_INTF2_val.push(TCP_RXTX_INTF2);
                            }
                        }
                    }

                    if (typeof smartMergeObj[j][i]["UDP"] != 'undefined') {
                        if (typeof smartMergeObj[j][i]["UDP"]["TXTX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["UDP"]["TXTX"]["INTF1"] != 'undefined') {
                                UDP_TXTX_INTF1.push(smartMergeObj[j][i]["UDP"]["TXTX"]["INTF1"]);
                                UDP_TXTX_INTF1_val.push(UDP_TXTX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["TXTX"]["INTF2"] != 'undefined') {
                                UDP_TXTX_INTF2.push(smartMergeObj[j][i]["UDP"]["TXTX"]["INTF2"]);
                                UDP_TXTX_INTF2_val.push(UDP_TXTX_INTF2);
                            }
                        }

                        if (typeof smartMergeObj[j][i]["UDP"]["TXRX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["UDP"]["TXRX"]["INTF1"] != 'undefined') {
                                UDP_TXRX_INTF1.push(smartMergeObj[j][i]["UDP"]["TXRX"]["INTF1"]);
                                UDP_TXRX_INTF1_val.push(UDP_TXRX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["TXRX"]["INTF2"] != 'undefined') {
                                UDP_TXRX_INTF2.push(smartMergeObj[j][i]["UDP"]["TXRX"]["INTF2"]);
                                UDP_TXRX_INTF2_val.push(UDP_TXRX_INTF2);
                            }
                        }

                        if (typeof smartMergeObj[j][i]["UDP"]["RXRX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["UDP"]["RXRX"]["INTF1"] != 'undefined') {
                                UDP_RXRX_INTF1.push(smartMergeObj[j][i]["UDP"]["RXRX"]["INTF1"]);
                                UDP_RXRX_INTF1_val.push(UDP_RXRX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["RXRX"]["INTF2"] != 'undefined') {
                                UDP_RXRX_INTF2.push(smartMergeObj[j][i]["UDP"]["RXRX"]["INTF2"]);
                                UDP_RXRX_INTF2_val.push(UDP_RXRX_INTF2);
                            }
                        }

                        if (typeof smartMergeObj[j][i]["UDP"]["RXTX"] != 'undefined') {
                            if (typeof smartMergeObj[j][i]["UDP"]["RXTX"]["INTF1"] != 'undefined') {
                                UDP_RXTX_INTF1.push(smartMergeObj[j][i]["UDP"]["RXTX"]["INTF1"]);
                                UDP_RXTX_INTF1_val.push(UDP_RXTX_INTF1);
                            }
                            if (typeof smartMergeObj[j][i]["UDP"]["RXTX"]["INTF2"] != 'undefined') {
                                UDP_RXTX_INTF2.push(smartMergeObj[j][i]["UDP"]["RXTX"]["INTF2"]);
                                UDP_RXTX_INTF2_val.push(UDP_RXTX_INTF2);
                            }
                        }
                    }
                }


                TCP_TXTX_INTF1 = [];
                TCP_TXTX_INTF2 = [];
                TCP_TXRX_INTF1 = [];
                TCP_TXRX_INTF2 = [];
                TCP_RXRX_INTF1 = [];
                TCP_RXRX_INTF2 = [];
                TCP_RXTX_INTF1 = [];
                TCP_RXTX_INTF2 = [];
                UDP_TXTX_INTF1 = [];
                UDP_TXTX_INTF2 = [];
                UDP_TXRX_INTF1 = [];
                UDP_TXRX_INTF2 = [];
                UDP_RXRX_INTF1 = [];
                UDP_RXRX_INTF2 = [];
                UDP_RXTX_INTF1 = [];
                UDP_RXTX_INTF2 = [];
            }

            //console.log("Check ->", TCP_TXTX_INTF1_val);

            let TCP_TXTX_INTF1_val_MAX = await getMaxValInArr(TCP_TXTX_INTF1_val);
            let TCP_TXTX_INTF2_val_MAX = await getMaxValInArr(TCP_TXTX_INTF2_val);
            let TCP_TXRX_INTF1_val_MAX = await getMaxValInArr(TCP_TXRX_INTF1_val);
            let TCP_TXRX_INTF2_val_MAX = await getMaxValInArr(TCP_TXRX_INTF2_val);
            let TCP_RXRX_INTF1_val_MAX = await getMaxValInArr(TCP_RXRX_INTF1_val);
            let TCP_RXRX_INTF2_val_MAX = await getMaxValInArr(TCP_RXRX_INTF2_val);
            let TCP_RXTX_INTF1_val_MAX = await getMaxValInArr(TCP_RXTX_INTF1_val);
            let TCP_RXTX_INTF2_val_MAX = await getMaxValInArr(TCP_RXTX_INTF2_val);

            let UDP_TXTX_INTF1_val_MAX = await getMaxValInArr(UDP_TXTX_INTF1_val);
            let UDP_TXTX_INTF2_val_MAX = await getMaxValInArr(UDP_TXTX_INTF2_val);
            let UDP_TXRX_INTF1_val_MAX = await getMaxValInArr(UDP_TXRX_INTF1_val);
            let UDP_TXRX_INTF2_val_MAX = await getMaxValInArr(UDP_TXRX_INTF2_val);
            let UDP_RXRX_INTF1_val_MAX = await getMaxValInArr(UDP_RXRX_INTF1_val);
            let UDP_RXRX_INTF2_val_MAX = await getMaxValInArr(UDP_RXRX_INTF2_val);
            let UDP_RXTX_INTF1_val_MAX = await getMaxValInArr(UDP_RXTX_INTF1_val);
            let UDP_RXTX_INTF2_val_MAX = await getMaxValInArr(UDP_RXTX_INTF2_val);

            TCP_TXTX_INTF1_val = [];
            TCP_TXTX_INTF2_val = [];
            TCP_TXRX_INTF1_val = [];
            TCP_TXRX_INTF2_val = [];
            TCP_RXRX_INTF1_val = [];
            TCP_RXRX_INTF2_val = [];
            TCP_RXTX_INTF1_val = [];
            TCP_RXTX_INTF2_val = [];

            UDP_TXTX_INTF1_val = [];
            UDP_TXTX_INTF2_val = [];
            UDP_TXRX_INTF1_val = [];
            UDP_TXRX_INTF2_val = [];
            UDP_RXRX_INTF1_val = [];
            UDP_RXRX_INTF2_val = [];
            UDP_RXTX_INTF1_val = [];
            UDP_RXTX_INTF2_val = [];

            // Status Changes loop
            for (var k = 0; k < innerArr.length; k++) {
                for (var p = 0; p < innerArr[k].length; p++) {

                    if (typeof innerArr[k][p]["reportName"] != 'undefined') {
                        if (typeof innerArr[k][p]["TCP"] != 'undefined') {
                            if (typeof innerArr[k][p]["TCP"]["TXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["TXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["TXTX"]["INTF1"]["value"] == TCP_TXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["TXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXTX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["TXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXTX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["TXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["TXTX"]["INTF2"]["value"] == TCP_TXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["TXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXTX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["TXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXTX"]["INTF2"]["value"], "status": false };
                                        }
                                    }
                                }
                            }

                            if (typeof innerArr[k][p]["TCP"]["TXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["TXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["TXRX"]["INTF1"]["value"] == TCP_TXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["TXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXRX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["TXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXRX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["TXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["TXRX"]["INTF2"]["value"] == TCP_TXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["TXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXRX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["TXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXRX"]["INTF2"]["value"], "status": false };
                                        }
                                    }
                                }
                            }

                            if (typeof innerArr[k][p]["TCP"]["RXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["RXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["RXRX"]["INTF1"]["value"] == TCP_RXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["RXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXRX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["RXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXRX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["RXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["RXRX"]["INTF2"]["value"] == TCP_RXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["RXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXRX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["RXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXRX"]["INTF2"]["value"], "status": false };
                                        }
                                    }
                                }
                            }

                            if (typeof innerArr[k][p]["TCP"]["RXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["RXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["RXTX"]["INTF1"]["value"] == TCP_RXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["RXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXTX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["RXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXTX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["RXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["RXTX"]["INTF2"]["value"] == TCP_RXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["RXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXTX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["RXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXTX"]["INTF2"]["value"], "status": false };
                                        }
                                    }
                                }
                            }
                        } // END TCP

                        if (typeof innerArr[k][p]["UDP"] != 'undefined') {

                            if (typeof innerArr[k][p]["UDP"]["TXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["TXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["TXTX"]["INTF1"]["value"] == UDP_TXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["TXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXTX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["TXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXTX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["TXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["TXTX"]["INTF2"]["value"] == UDP_TXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["TXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXTX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["TXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXTX"]["INTF2"]["value"], "status": false };
                                        }
                                    }
                                }
                            }

                            if (typeof innerArr[k][p]["UDP"]["TXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["TXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["TXRX"]["INTF1"]["value"] == UDP_TXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["TXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXRX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["TXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXRX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["TXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["TXRX"]["INTF2"]["value"] == UDP_TXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["TXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXRX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["TXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXRX"]["INTF2"]["value"], "status": false };
                                        }
                                    }
                                }
                            }

                            if (typeof innerArr[k][p]["UDP"]["RXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["RXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["RXRX"]["INTF1"]["value"] == UDP_RXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["RXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXRX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["RXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXRX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["RXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["RXRX"]["INTF2"]["value"] == UDP_RXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["RXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXRX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["RXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXRX"]["INTF2"]["value"], "status": false };
                                        }
                                    }
                                }
                            }

                            if (typeof innerArr[k][p]["UDP"]["RXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["RXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["RXTX"]["INTF1"]["value"] == UDP_RXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["RXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXTX"]["INTF1"]["value"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["RXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXTX"]["INTF1"]["value"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["RXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["RXTX"]["INTF2"]["value"] == UDP_RXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["RXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXTX"]["INTF2"]["value"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["RXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXTX"]["INTF2"]["value"], "status": false };
                                        }
                                    }
                                }
                            }
                        } // END UDP   
                    } // Execution Report Compare IF BLOCK
                    else {
                        if (typeof innerArr[k][p]["TCP"] != 'undefined') {
                            if (typeof innerArr[k][p]["TCP"]["TXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["TXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["TXTX"]["INTF1"] == TCP_TXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["TXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXTX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["TXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXTX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["TXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["TXTX"]["INTF2"] == TCP_TXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["TXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXTX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["TXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXTX"]["INTF2"], "status": false };
                                        }
                                    }
                                }
                            }

                            if (typeof innerArr[k][p]["TCP"]["TXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["TXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["TXRX"]["INTF1"] == TCP_TXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["TXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXRX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["TXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["TXRX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["TXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["TXRX"]["INTF2"] == TCP_TXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["TXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXRX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["TXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["TXRX"]["INTF2"], "status": false };
                                        }
                                    }
                                }
                            }

                            if (typeof innerArr[k][p]["TCP"]["RXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["RXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["RXRX"]["INTF1"] == TCP_RXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["RXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXRX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["RXRX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXRX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["RXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["RXRX"]["INTF2"] == TCP_RXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["RXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXRX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["RXRX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXRX"]["INTF2"], "status": false };
                                        }
                                    }
                                }
                            }

                            if (typeof innerArr[k][p]["TCP"]["RXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["TCP"]["RXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["TCP"]["RXTX"]["INTF1"] == TCP_RXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["TCP"]["RXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXTX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["TCP"]["RXTX"]["INTF1"] = { "value": innerArr[k][p]["TCP"]["RXTX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["TCP"]["RXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["TCP"]["RXTX"]["INTF2"] == TCP_RXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["TCP"]["RXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXTX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["TCP"]["RXTX"]["INTF2"] = { "value": innerArr[k][p]["TCP"]["RXTX"]["INTF2"], "status": false };
                                        }
                                    }
                                }
                            }
                        } // END TCP

                        if (typeof innerArr[k][p]["UDP"] != 'undefined') {

                            if (typeof innerArr[k][p]["UDP"]["TXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["TXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["TXTX"]["INTF1"] == UDP_TXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["TXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXTX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["TXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXTX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["TXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["TXTX"]["INTF2"] == UDP_TXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["TXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXTX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["TXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXTX"]["INTF2"], "status": false };
                                        }
                                    }
                                }
                            }

                            if (typeof innerArr[k][p]["UDP"]["TXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["TXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["TXRX"]["INTF1"] == UDP_TXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["TXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXRX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["TXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["TXRX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["TXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["TXRX"]["INTF2"] == UDP_TXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["TXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXRX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["TXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["TXRX"]["INTF2"], "status": false };
                                        }
                                    }
                                }
                            }

                            if (typeof innerArr[k][p]["UDP"]["RXRX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["RXRX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["RXRX"]["INTF1"] == UDP_RXRX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["RXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXRX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["RXRX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXRX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["RXRX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["RXRX"]["INTF2"] == UDP_RXRX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["RXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXRX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["RXRX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXRX"]["INTF2"], "status": false };
                                        }
                                    }
                                }
                            }

                            if (typeof innerArr[k][p]["UDP"]["RXTX"] != 'undefined') {
                                if (typeof innerArr[k][p]["UDP"]["RXTX"]["INTF1"] != 'undefined') {
                                    if (innerArr[k][p]["UDP"]["RXTX"]["INTF1"] == UDP_RXTX_INTF1_val_MAX[0]) {
                                        innerArr[k][p]["UDP"]["RXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXTX"]["INTF1"], "status": true };
                                    } else {
                                        innerArr[k][p]["UDP"]["RXTX"]["INTF1"] = { "value": innerArr[k][p]["UDP"]["RXTX"]["INTF1"], "status": false };
                                    }

                                    if (typeof innerArr[k][p]["UDP"]["RXTX"]["INTF2"] != 'undefined') {
                                        if (innerArr[k][p]["UDP"]["RXTX"]["INTF2"] == UDP_RXTX_INTF2_val_MAX[0]) {
                                            innerArr[k][p]["UDP"]["RXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXTX"]["INTF2"], "status": true };
                                        } else {
                                            innerArr[k][p]["UDP"]["RXTX"]["INTF2"] = { "value": innerArr[k][p]["UDP"]["RXTX"]["INTF2"], "status": false };
                                        }
                                    }
                                }
                            }
                        } // END UDP
                    }


                }

            } // END innerArr FOR LOOP

        } // END MAIN FOR LOOP

        return smartMergeObj;
    } catch (err) {
        logger.error("update2INFMaxValue error : ", err);
    }
}


/* Check the Min number in an array */
async function getMinValInArr(arr_val) {
    if (arr_val != "") {
        if (arr_val.length == 1) {
            for (var i = 0; i < arr_val[0].length; ++i) {
                if (arr_val[0][i] == '') {
                    arr_val[0][i] = '-';
                }
            }
            return arr_val[0];
        } else {
            return arr_val.reduce(function(final, current) {
                for (var i = 0; i < final.length; ++i) {
                    if (Number(current[i]) < Number(final[i])) {
                        final[i] = Number(current[i]);
                    }
                }
                for (var i = 0; i < final.length; ++i) {
                    if (final[i] == '') {
                        final[i] = '-';
                    }
                }
                return final;
            });
        }
    } else {
        return [];
    }
}

/* Check the Max number in an array */
async function getMaxValInArr(arr_val) {
    if (arr_val != "") {
        if (arr_val.length == 1) {
            for (var i = 0; i < arr_val[0].length; ++i) {
                if (arr_val[0][i] == '') {
                    arr_val[0][i] = '-';
                }
            }
            return arr_val[0];
        } else {
            return arr_val.reduce(function(final, current) {
                for (var i = 0; i < final.length; ++i) {
                    if (Number(current[i]) > Number(final[i])) {
                        final[i] = Number(current[i]);
                    }
                }
                for (var i = 0; i < final.length; ++i) {
                    if (final[i] == '') {
                        final[i] = '-';
                    }
                }
                return final;
            });
        }
    } else {
        return [];
    }
}


/*
    This method edit and update the reports
*/
routes.prototype.editReports = async function(req, res) {
    var responseObject = {
        status: true,
        responseCode: 200,
        size: '',
    };
    try {
        console.log("-- Edit and Update Report --")

        let reports = req.body.data;
        console.log("length  --", reports.length);
        let status = [];

        for (let item of reports) {
            //console.log(item);
            console.log("row_id--", item._id);

            let id = { _id: ObjectID(item._id) };
            let update = _.omit(item, '_id');
            let options = { upsert: true };
            let res = await throughputObj.updateThroughput(id, update, options);
            // console.log("res--", res);
            status.push({ "id": id, "status": res, "dataTobeUpdate": update })
        }
        responseObject.size = reports.length;
        responseObject.data = status;;
        responseObject.message = 'Report Updated Successfully';

    } catch (err) {
        logger.error("detailTpReportList:", err);
        responseError(res, responseObject, "Error in getting detailed Smartmerge Throughput Data.");

        responseObject.status = false;
        responseObject.message = 'Error while Updating Report';
    }

    res.json(responseObject);

}

/*
    This method to show combined throughput data to Smart Marge for each testcase executed from the testbed
*/
routes.prototype.reportExecutionCompare = async function(req, res) {
    let headers = [];

    let responseObject = {
        status: true,
        data: {},
        values: []
    };

    try {
        let val = [];
        let attenuationVal;
        let uniqVal;
        let executions = [];
        let results = req.body.execution_id;
        let reportIdRes = req.body.report_id;
        let smartMergeObj = '';
        let updateSmartMergeObj = [];
        let reportExecutionData = [];
        let arrTest = [];
        //let project_type = req.body.project_type;

        for (let value of results) {
            let execution = await throughputObj.getThroughputData(value);
            let execution_name = await executionObj.getExecution(value);
            for (let item of execution) {
                item = _.extend(item, { executionName: execution_name[0].name });
                attenuationVal = (Object.keys(item));
                _.forEach(attenuationVal, function(item) {
                    if (item.match('^[0-9]*$')) {
                        val.push(Number(item.match('^[0-9]*$')[0]));
                        // val.push((Number(item.match('^[0-9]*$')[0]) + 1));
                    }
                });
                let Un = _.uniq(val);
                uniqVal = Un.sort((a, b) => a - b);
            }
            executions.push(execution);
        }
        console.log('\nSmartMarge Execution Data Length -', executions.length);

        for (let value of reportIdRes) {
            let reportExecutionRes = await throughputObj.getDetailedReport(value);
            //console.log('Report Execution- length', reportExecutionRes.length);
            for (let value of reportExecutionRes) {
                reportExecutionData.push(value);
            }
        }

        console.log('Report Execution Data Length -', reportExecutionData.length);

        for (let value of reportExecutionData) {
            let valArr = [];
            valArr.push(value);
            let reportName = '';
            //let execution_name = await executionObj.getExecution(value);
            for (let item of valArr) {
                if (typeof valArr[0].reportName == 'undefined') {
                    reportName = "";
                } else {
                    reportName = valArr[0].reportName;
                }
                item = _.extend(item, { execution_name: reportName });
                attenuationVal = (Object.keys(item));
                _.forEach(attenuationVal, function(item) {
                    if (item.match('^[0-9]*$')) {
                        val.push(Number(item.match('^[0-9]*$')[0]));
                        // val.push((Number(item.match('^[0-9]*$')[0]) + 1));
                    }
                });
                let Un = _.uniq(val);
                uniqVal = Un.sort((a, b) => a - b);
            }
            executions.push(valArr);
        }

        console.log('Total Report Execution Data Length -', executions.length);
        // let execution_array = executions;
        executions = _.flatten(executions);

        let project_type_arr = _.pluck(_.uniq(_.union(executions), false, _.property('project_type')), 'project_type');
        project_type_arr = _.uniq(project_type_arr);
        console.log("Templates --", project_type_arr)
        let project_type = req.body.project_type;

        console.log("project_type --", project_type);
        if (project_type == 'RvR') { // Report Execution Compare
            executions = _.where(executions, { project_type: project_type });
            let mergedData = await mergeRvRData(uniqVal, executions, project_type);
            responseObject.data = mergedData;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.attenuation = uniqVal;

        } else if (project_type == 'RVR-SCBT') {
            executions = _.where(executions, { project_type: project_type });
            let mergedData = await mergeRvRData(uniqVal, executions, 'RvR');
            responseObject.data = mergedData;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader('RvR');
            responseObject.headers = headers.header;
            responseObject.attenuation = uniqVal;

        } else if (project_type == 'TP') {
            executions = _.where(executions, { project_type: project_type });
            smartMergeObj = await smartMergeCompareTPData(executions);
            updateSmartMergeObj = await updateMaxValue(smartMergeObj);
            responseObject.data = updateSmartMergeObj;
            let etp = await throughputObj.findThroughputData({ "TP TYPE": "ETP" });
            let ttp = await throughputObj.findThroughputData({ "TP TYPE": "TTP" });
            responseObject.values.push(etp, ttp);
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader('TP');
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;

        } else if (project_type == 'Simul-TP-2INTF') {
            executions = _.where(executions, { project_type: project_type });
            smartMergeObj = await smartMergeCompare2INFData(executions);
            updateSmartMergeObj = await updateMaxValue2INFData(smartMergeObj);
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.data = updateSmartMergeObj;
            responseObject.projectType = project_type;

        } else if (project_type == 'Simul-TP-3INTF') {
            executions = _.where(executions, { project_type: project_type });
            smartMergeObj = await merge3INTFData(executions);
            updateSmartMergeObj = await updateStatus3INTF(smartMergeObj);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

        } else if (project_type == 'BAT-CABLE-UP') {
            executions = _.where(executions, { project_type: project_type });
            smartMergeObj = await smartMergeCompareBatCableUpData(executions);
            //updateSmartMergeObj = await updateMaxValue(smartMergeObj);
            responseObject.data = smartMergeObj;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

            /*} else if (project_type == 'BAT-OTA') {
                executions = _.where(executions, { project_type: project_type });
                smartMergeObj = await smartMergeCompareBatCableUpData(executions);
                updateSmartMergeObj = await updateMaxValue(smartMergeObj);
                responseObject.data = updateSmartMergeObj;
                headers = await throughputObj.findHeader(project_type);
                responseObject.headers = headers.header;
                responseObject.projectType = 'BAT-OTA';*/

        } else if (project_type == 'MBSS-SCBT') {
            executions = _.where(executions, { project_type: project_type });
            smartMergeObj = await smartMergeCompareMbssScbtData(executions);
            //updateSmartMergeObj = await updateMaxValue(smartMergeObj);
            responseObject.data = smartMergeObj;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

        } else if (project_type == 'IOP-Perf') {
            executions = _.where(executions, { project_type: project_type });
            smartMergeObj = await smartMergeCompareIopPerfData(executions);
            //updateSmartMergeObj = await updateMaxValue(smartMergeObj);
            responseObject.data = smartMergeObj;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

        } else if (project_type == 'REVERB-OTA-REVERSE-RVR') {
            executions = _.where(executions, { project_type: project_type });
            let mergedData = await mergeRvRData(uniqVal, executions, project_type);
            responseObject.data = mergedData;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.attenuation = uniqVal;

        } else if (project_type == 'REVERB-OTA-RVR') {
            executions = _.where(executions, { project_type: project_type });
            let mergedData = await mergeRvRData(uniqVal, executions, project_type);
            responseObject.data = mergedData;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.attenuation = uniqVal;

        } else if (project_type == 'OFDMA-UL') {
            executions = _.where(executions, { project_type: project_type });
            let mergedData = await ofdmaUlMerge(executions);
            headers = await throughputObj.findHeader(project_type);
            responseObject.data = mergedData;
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;

        } else if (project_type == 'OFDMA-DL') {
            executions = _.where(executions, { project_type: project_type });
            let mergedData = await ofdmaDlMerge(executions);
            headers = await throughputObj.findHeader(project_type);
            responseObject.data = mergedData;
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;

        } else if (project_type == 'DBC-Cpu-Util') {
            executions = _.where(executions, { project_type: project_type });
            let mergedData = await smartMergeCompareDbcCpuUtilData(executions);
            headers = await throughputObj.findHeader(project_type);
            responseObject.data = mergedData;
            responseObject.projectType = project_type;
            responseObject.headers = headers.header;

        } else if (project_type == 'IOP-TP') { // Report Execution Compa
            executions = _.where(executions, { project_type: project_type });
            smartMergeObj = await smartMergeCompareIopTpData(executions);
            updateSmartMergeObj = await updateMaxValue(smartMergeObj);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

        } else if (project_type == 'UL-11ax-MU-MIMO') {
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await Ul11axMuMimoMerge(executions);
            //updateSmartMergeObj = await updateMaxValueMuMimoData(smartMergeObj);
            responseObject.data = smartMergeObj;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

        } else if (project_type == 'DL-11ax-MU-MIMO') {
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await Dl11axMuMimoMerge(executions);
            //updateSmartMergeObj = await updateMaxValueMuMimoData(smartMergeObj);
            responseObject.data = smartMergeObj;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

        } else if (project_type == 'DL-11ac-MU-MIMO') {
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await Dl11acMuMimoMerge(executions);
            //updateSmartMergeObj = await updateMaxValueMuMimoData(smartMergeObj);
            responseObject.data = smartMergeObj;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

        } else if (project_type == 'COEX-BT-RVR') { // Report Execution Compare
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await mergeCoexRvr(executions);
            updateSmartMergeObj = await updateStatusCoexRvr(smartMergeObj, uniqVal);
            responseObject.data = updateSmartMergeObj;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader("COEX-RVR");
            uniqVal.unshift("BT Attn");
            responseObject.headers = headers.header;
            responseObject.BtAttn = uniqVal;

            let WifiAttnArr = ["Wi-Fi Attn", 40];
            let len = WifiAttnArr.length;
            for (let i = len; i < uniqVal.length; i++) {
                WifiAttnArr.push(40);
            }
            responseObject.WifiAttn = WifiAttnArr;

        } else if (project_type == 'COEX-WiFi-RVR') { // Report Execution Compare
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await mergeCoexRvr(executions);
            updateSmartMergeObj = await updateStatusCoexRvr(smartMergeObj, uniqVal);
            responseObject.data = updateSmartMergeObj;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader("COEX-RVR");
            uniqVal.unshift("Wi-Fi Attn");
            responseObject.headers = headers.header;
            responseObject.WifiAttn = uniqVal;

            let BtAttnArr = ["BT Attn", 40];
            let len = BtAttnArr.length;
            for (let i = len; i < uniqVal.length; i++) {
                BtAttnArr.push(40);
            }
            responseObject.BtAttn = BtAttnArr;

        } else if (project_type == 'COEX-BT-WiFi-RVR') { // Report Execution Compare
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await mergeCoexRvr(executions);
            updateSmartMergeObj = await updateStatusCoexRvr(smartMergeObj, uniqVal);
            responseObject.data = updateSmartMergeObj;
            responseObject.projectType = project_type;
            headers = await throughputObj.findHeader("COEX-RVR");
            uniqVal.unshift("Wi-Fi Attn");
            responseObject.headers = headers.header;
            responseObject.WifiAttn = uniqVal;
            let BtAtn = [...uniqVal];
            BtAtn[0] = "BT Attn";
            responseObject.BtAttn = BtAtn;

        } else if (project_type == 'STA-Coex-TP') {
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await smartMergeCompareStaCoexTpData(executions);
            let modifyData = await modifyDataStaCoexTpData(smartMergeObj);
            updateSmartMergeObj = await updateMaxValueStaCoexTpData(modifyData);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader(project_type);
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

        } else if (project_type == 'MMH-Coex-TP') {
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await smartMergeCompareStaCoexTpData(executions);
            let modifyData = await modifyDataStaCoexTpData(smartMergeObj);
            updateSmartMergeObj = await updateMaxValueStaCoexTpData(modifyData);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader('STA-Coex-TP');
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;

        } else if (project_type == 'P2P-Coex-TP') {
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await smartMergeCompareStaCoexTpData(executions);
            let modifyData = await modifyDataStaCoexTpData(smartMergeObj);
            updateSmartMergeObj = await updateMaxValueStaCoexTpData(modifyData);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader('STA-Coex-TP');
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;
        } else if (project_type == 'BT-Throughput') {
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await smartMergeCompareBtThroughputData(executions);
            let modifyData = await modifyDataBtThroughput(smartMergeObj);
            updateSmartMergeObj = await updateMaxValueBtThroughputData(modifyData);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader('BT-Throughput');
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;
        } else if (project_type == 'BT-MOS') { // Execution report compare
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await smartMergeCompareBtMosData(executions);
            updateSmartMergeObj = await updateMaxValueBtMosData(smartMergeObj);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader('BT-MOS');
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;
        } else if (project_type == 'BT-Dual-HFP') { // Execution report compare
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await smartMergeCompareBTDualHFP(executions);
            updateSmartMergeObj = await updateMaxValueBTDualHFP(smartMergeObj);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader('BT-Dual-HFP');
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;
        } else if (project_type == 'STA-CPU-Util') { // Execution report compare
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await smartMergeCompareSTACPUUtil(executions);
            let modifiedData = await modifySTACPUUtilData(smartMergeObj);
            updateSmartMergeObj = await updateMaxValueSTACPUUtil(modifiedData);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader('STA-CPU-Util');
            responseObject.headers = headers.header;
            responseObject.keys = headers.keys;
            responseObject.projectType = project_type;
        } else if (project_type == 'Coex-Simul-TP-2INTF') { // Execution report compare
            executions = _.where(executions, { project_type: project_type });
            let smartMergeObj = await smartMergeCompareCoex2INTFData(executions);
            console.log("smartMergeObj -->", smartMergeObj.length);
            updateSmartMergeObj = await updateMaxValueCoex2INTFData(smartMergeObj);
            console.log("updateSmartMergeObj -->", updateSmartMergeObj.length);
            responseObject.data = updateSmartMergeObj;
            headers = await throughputObj.findHeader('Coex-Simul-TP-2INTF');
            responseObject.headers = headers.header;
            responseObject.projectType = project_type;
        }

        responseObject.templates = project_type_arr;
        res.json(responseObject);
    } catch (err) {
        logger.error("reportExecutionCompare: ", err);
        responseError(res, responseObject, "Error in merging report Execution the Throughput Data.");
    }

}


/* Function for smart merge of BtThroughput executions */
async function smartMergeCompareBtThroughputData(executions) {
    try {
        let testCompareObjects = [];

        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT')), 'DUT'), function(element) {
            let commonDUT = _.filter(executions, function(p) { return p['DUT'] == element; })
            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Soc Version')), 'Soc Version'), function(element) {
                let commonSocVersion = _.filter(commonDUT, function(p) { return p['Soc Version'] == element; })
                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('SocType')), 'SocType'), function(element) {
                    let commonSocType = _.filter(commonSocVersion, function(p) { return p['SocType'] == element; })
                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT Fw')), 'DUT Fw'), function(element) {
                        let commonDUTFw = _.filter(commonSocType, function(p) { return p['DUT Fw'] == element; })
                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Interface')), 'Interface'), function(element) {
                            let commonInterface = _.filter(commonDUTFw, function(p) { return p['Interface'] == element; })
                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT Os')), 'DUT Os'), function(element) {
                                let commonDUTOs = _.filter(commonInterface, function(p) { return p['DUT Os'] == element; })
                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT Host Platform')), 'DUT Host Platform'), function(element) {
                                    let commonDUTHostPlatform = _.filter(commonDUTOs, function(p) { return p['DUT Host Platform'] == element; })
                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Packet Type')), 'Packet Type'), function(element) {
                                        let commonPacketType = _.filter(commonDUTHostPlatform, function(p) { return p['Packet Type'] == element; })
                                        if (commonPacketType.length) {
                                            testCompareObjects.push(commonPacketType);
                                        }
                                    })
                                })
                            })
                        })
                    })
                })
            })
        })

        return testCompareObjects;
    } catch (err) {
        logger.error("smartMergeCompareBtThroughputData error : ", err);
    }
}

/* Function to updateMaxValue BT ThroughPut Data status */
async function updateMaxValueBtThroughputData(smartMergeObj) {

    // Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)
    let BiDirectionalEoMasterTx = [],
        BiDirectionalEoMaster_ValTx = [],
        BiDirectionalEoSlaveTx = [],
        BiDirectionalEoSlave_ValTx = [],
        BiDirectionalAESMasterTx = [],
        BiDirectionalAESMaster_ValTx = [],
        BiDirectionalAESSlaveTx = [],
        BiDirectionalAESSlave_ValTx = [],

        BiDirectionalEoMasterRx = [],
        BiDirectionalEoMaster_ValRx = [],
        BiDirectionalEoSlaveRx = [],
        BiDirectionalEoSlave_ValRx = [],
        BiDirectionalAESMasterRx = [],
        BiDirectionalAESMaster_ValRx = [],
        BiDirectionalAESSlaveRx = [],
        BiDirectionalAESSlave_ValRx = [],

        // Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)
        UniDirectionalEoMasterTx = [],
        UniDirectionalEoMaster_ValTx = [],
        UniDirectionalEoSlaveTx = [],
        UniDirectionalEoSlave_ValTx = [],
        UniDirectionalAESMasterTx = [],
        UniDirectionalAESMaster_ValTx = [],
        UniDirectionalAESSlaveTx = [],
        UniDirectionalAESSlave_ValTx = [],

        UniDirectionalEoMasterRx = [],
        UniDirectionalEoMaster_ValRx = [],
        UniDirectionalEoSlaveRx = [],
        UniDirectionalEoSlave_ValRx = [],
        UniDirectionalAESMasterRx = [],
        UniDirectionalAESMaster_ValRx = [],
        UniDirectionalAESSlaveRx = [],
        UniDirectionalAESSlave_ValRx = [];

    let innerArr = [];

    try {

        for (var j = 0; j < smartMergeObj.length; j++) {
            innerArr = [];
            innerArr.push(smartMergeObj[j]);

            for (var i = 0; i < smartMergeObj[j].length; i++) {

                if (typeof smartMergeObj[j][i]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"] != 'undefined') {
                    if (typeof smartMergeObj[j][i]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"] != 'undefined') {
                        if (typeof smartMergeObj[j][i]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"] != 'undefined') {
                            BiDirectionalEoMasterTx.push(smartMergeObj[j][i]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Tx"] ? smartMergeObj[j][i]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Tx"] : '');
                            BiDirectionalEoMasterRx.push(smartMergeObj[j][i]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Rx"] ? smartMergeObj[j][i]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Rx"] : '');
                            BiDirectionalEoMaster_ValTx.push(BiDirectionalEoMasterTx);
                            BiDirectionalEoMaster_ValRx.push(BiDirectionalEoMasterRx);
                        }

                        if (typeof smartMergeObj[j][i]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"] != 'undefined') {
                            BiDirectionalEoSlaveTx.push(smartMergeObj[j][i]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Tx"] ? smartMergeObj[j][i]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Tx"] : '');
                            BiDirectionalEoSlaveRx.push(smartMergeObj[j][i]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Rx"] ? smartMergeObj[j][i]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Rx"] : '');
                            BiDirectionalEoSlave_ValTx.push(BiDirectionalEoSlaveTx);
                            BiDirectionalEoSlave_ValRx.push(BiDirectionalEoSlaveRx);
                        }
                    }

                    if (typeof smartMergeObj[j][i]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"] != 'undefined') {
                        if (typeof smartMergeObj[j][i]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"] != 'undefined') {
                            BiDirectionalAESMasterTx.push(smartMergeObj[j][i]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Tx"] ? smartMergeObj[j][i]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Tx"] : '');
                            BiDirectionalAESMasterRx.push(smartMergeObj[j][i]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Rx"] ? smartMergeObj[j][i]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Rx"] : '');
                            BiDirectionalAESMaster_ValTx.push(BiDirectionalAESMasterTx);
                            BiDirectionalAESMaster_ValRx.push(BiDirectionalAESMasterRx);
                        }

                        if (typeof smartMergeObj[j][i]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"] != 'undefined') {
                            BiDirectionalAESSlaveTx.push(smartMergeObj[j][i]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Tx"] ? smartMergeObj[j][i]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Tx"] : '');
                            BiDirectionalAESSlaveRx.push(smartMergeObj[j][i]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Rx"] ? smartMergeObj[j][i]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Rx"] : '');
                            BiDirectionalAESSlave_ValTx.push(BiDirectionalAESSlaveTx);
                            BiDirectionalAESSlave_ValRx.push(BiDirectionalAESSlaveRx);
                        }
                    }
                }

                // Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)
                if (typeof smartMergeObj[j][i]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"] != 'undefined') {
                    if (typeof smartMergeObj[j][i]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"] != 'undefined') {
                        if (typeof smartMergeObj[j][i]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"] != 'undefined') {
                            UniDirectionalEoMasterTx.push(smartMergeObj[j][i]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Tx"] ? smartMergeObj[j][i]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Tx"] : '');
                            UniDirectionalEoMasterRx.push(smartMergeObj[j][i]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Rx"] ? smartMergeObj[j][i]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Rx"] : '');
                            UniDirectionalEoMaster_ValTx.push(UniDirectionalEoMasterTx);
                            UniDirectionalEoMaster_ValRx.push(UniDirectionalEoMasterRx);
                        }

                        if (typeof smartMergeObj[j][i]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"] != 'undefined') {
                            UniDirectionalEoSlaveTx.push(smartMergeObj[j][i]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Tx"] ? smartMergeObj[j][i]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Tx"] : '');
                            UniDirectionalEoSlaveRx.push(smartMergeObj[j][i]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Rx"] ? smartMergeObj[j][i]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Rx"] : '');
                            UniDirectionalEoSlave_ValTx.push(UniDirectionalEoSlaveTx);
                            UniDirectionalEoSlave_ValRx.push(UniDirectionalEoSlaveRx);
                        }
                    }

                    if (typeof smartMergeObj[j][i]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"] != 'undefined') {
                        if (typeof smartMergeObj[j][i]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"] != 'undefined') {
                            UniDirectionalAESMasterTx.push(smartMergeObj[j][i]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Tx"] ? smartMergeObj[j][i]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Tx"] : '');
                            UniDirectionalAESMasterRx.push(smartMergeObj[j][i]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Rx"] ? smartMergeObj[j][i]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Rx"] : '');
                            UniDirectionalAESMaster_ValTx.push(UniDirectionalAESMasterTx);
                            UniDirectionalAESMaster_ValRx.push(UniDirectionalAESMasterRx);
                        }

                        if (typeof smartMergeObj[j][i]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"] != 'undefined') {
                            UniDirectionalAESSlaveTx.push(smartMergeObj[j][i]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Tx"] ? smartMergeObj[j][i]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Tx"] : '');
                            UniDirectionalAESSlaveRx.push(smartMergeObj[j][i]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Rx"] ? smartMergeObj[j][i]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Rx"] : '');
                            UniDirectionalAESSlave_ValTx.push(UniDirectionalAESSlaveTx);
                            UniDirectionalAESSlave_ValRx.push(UniDirectionalAESSlaveRx);
                        }
                    }
                }

                BiDirectionalEoMasterTx = [];
                BiDirectionalEoSlaveTx = [];
                BiDirectionalAESMasterTx = [];
                BiDirectionalAESSlaveTx = [];

                BiDirectionalEoMasterRx = [];
                BiDirectionalEoSlaveRx = [];
                BiDirectionalAESMasterRx = [];
                BiDirectionalAESSlaveRx = [];

                UniDirectionalEoMasterTx = [];
                UniDirectionalEoSlaveTx = [];
                UniDirectionalAESMasterTx = [];
                UniDirectionalAESSlaveTx = [];

                UniDirectionalEoMasterRx = [];
                UniDirectionalEoSlaveRx = [];
                UniDirectionalAESMasterRx = [];
                UniDirectionalAESSlaveRx = [];
            }


            var Max_BiDirectionalEoMasterTx = await getMaxValInArr(BiDirectionalEoMaster_ValTx);
            var Max_BiDirectionalEoSlaveTx = await getMaxValInArr(BiDirectionalEoSlave_ValTx);
            var Max_BiDirectionalAESMasterTx = await getMaxValInArr(BiDirectionalAESMaster_ValTx);
            var Max_BiDirectionalAESSlaveTx = await getMaxValInArr(BiDirectionalAESSlave_ValTx);

            var Max_BiDirectionalEoMasterRx = await getMaxValInArr(BiDirectionalEoMaster_ValRx);
            var Max_BiDirectionalEoSlaveRx = await getMaxValInArr(BiDirectionalEoSlave_ValRx);
            var Max_BiDirectionalAESMasterRx = await getMaxValInArr(BiDirectionalAESMaster_ValRx);
            var Max_BiDirectionalAESSlaveRx = await getMaxValInArr(BiDirectionalAESSlave_ValRx);


            var Max_UniDirectionalEoMasterTx = await getMaxValInArr(UniDirectionalEoMaster_ValTx);
            var Max_UniDirectionalEoSlaveTx = await getMaxValInArr(UniDirectionalEoSlave_ValTx);
            var Max_UniDirectionalAESMasterTx = await getMaxValInArr(UniDirectionalAESMaster_ValTx);
            var Max_UniDirectionalAESSlaveTx = await getMaxValInArr(UniDirectionalAESSlave_ValTx);

            var Max_UniDirectionalEoMasterRx = await getMaxValInArr(UniDirectionalEoMaster_ValRx);
            var Max_UniDirectionalEoSlaveRx = await getMaxValInArr(UniDirectionalEoSlave_ValRx);
            var Max_UniDirectionalAESMasterRx = await getMaxValInArr(UniDirectionalAESMaster_ValRx);
            var Max_UniDirectionalAESSlaveRx = await getMaxValInArr(UniDirectionalAESSlave_ValRx);

            BiDirectionalEoMaster_ValTx = [];
            BiDirectionalEoSlave_ValTx = [];
            BiDirectionalAESMaster_ValTx = [];
            BiDirectionalAESSlave_ValTx = [];

            BiDirectionalEoMaster_ValRx = [];
            BiDirectionalEoSlave_ValRx = [];
            BiDirectionalAESMaster_ValRx = [];
            BiDirectionalAESSlave_ValRx = [];

            UniDirectionalEoMaster_ValTx = [];
            UniDirectionalEoSlave_ValTx = [];
            UniDirectionalAESMaster_ValTx = [];
            UniDirectionalAESSlave_ValTx = [];

            UniDirectionalEoMaster_ValRx = [];
            UniDirectionalEoSlave_ValRx = [];
            UniDirectionalAESMaster_ValRx = [];
            UniDirectionalAESSlave_ValRx = [];


            // Status Changes loop
            for (var k = 0; k < innerArr.length; k++) {
                for (var p = 0; p < innerArr[k].length; p++) {
                    if (typeof innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"] != 'undefined') {
                        if (typeof innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"] != 'undefined') {
                            if (typeof innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"] != 'undefined') {
                                if (innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Tx"] == Max_BiDirectionalEoMasterTx[0]) {
                                    innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Tx"] = [innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Tx"], true];
                                } else {
                                    innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Tx"] = [innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Tx"], false];
                                }
                                if (innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Rx"] == Max_BiDirectionalEoMasterRx[0]) {
                                    innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Rx"] = [innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Rx"], true];
                                } else {
                                    innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Rx"] = [innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Rx"], false];
                                }
                            }

                            if (typeof innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"] != 'undefined') {
                                if (innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Tx"] == Max_BiDirectionalEoSlaveTx[0]) {
                                    innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Tx"] = [innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Tx"], true];
                                } else {
                                    innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Tx"] = [innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Tx"], false];
                                }
                                if (innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Rx"] == Max_BiDirectionalEoSlaveRx[0]) {
                                    innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Rx"] = [innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Rx"], true];
                                } else {
                                    innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Rx"] = [innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Rx"], false];
                                }
                            }
                        }

                        if (typeof innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"] != 'undefined') {
                            if (typeof innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"] != 'undefined') {
                                if (innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Tx"] == Max_BiDirectionalAESMasterTx[0]) {
                                    innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Tx"] = [innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Tx"], true];
                                } else {
                                    innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Tx"] = [innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Tx"], false];
                                }
                                if (innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Rx"] == Max_BiDirectionalAESMasterRx[0]) {
                                    innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Rx"] = [innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Rx"], true];
                                } else {
                                    innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Rx"] = [innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Rx"], false];
                                }
                            }


                            if (typeof innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"] != 'undefined') {
                                if (innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Tx"] == Max_BiDirectionalAESSlaveTx[0]) {
                                    innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Tx"] = [innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Tx"], true];
                                } else {
                                    innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Tx"] = [innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Tx"], false];
                                }
                                if (innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Rx"] == Max_BiDirectionalAESSlaveRx[0]) {
                                    innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Rx"] = [innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Rx"], true];
                                } else {
                                    innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Rx"] = [innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Rx"], false];
                                }
                            }
                        }
                    }


                    if (typeof innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"] != 'undefined') {
                        if (typeof innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"] != 'undefined') {
                            if (typeof innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"] != 'undefined') {
                                if (innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Tx"] == Max_UniDirectionalEoMasterTx[0]) {
                                    innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Tx"] = [innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Tx"], true];
                                } else {
                                    innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Tx"] = [innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Tx"], false];
                                }
                                if (innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Rx"] == Max_UniDirectionalEoMasterRx[0]) {
                                    innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Rx"] = [innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Rx"], true];
                                } else {
                                    innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Rx"] = [innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Rx"], false];
                                }
                            }

                            if (typeof innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"] != 'undefined') {
                                if (innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Tx"] == Max_UniDirectionalEoSlaveTx[0]) {
                                    innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Tx"] = [innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Tx"], true];
                                } else {
                                    innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Tx"] = [innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Tx"], false];
                                }
                                if (innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Rx"] == Max_UniDirectionalEoSlaveRx[0]) {
                                    innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Rx"] = [innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Rx"], true];
                                } else {
                                    innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Rx"] = [innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Rx"], false];
                                }
                            }
                        }

                        if (typeof innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"] != 'undefined') {
                            if (typeof innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"] != 'undefined') {
                                if (innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Tx"] == Max_UniDirectionalAESMasterTx[0]) {
                                    innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Tx"] = [innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Tx"], true];
                                } else {
                                    innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Tx"] = [innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Tx"], false];
                                }
                                if (innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Rx"] == Max_UniDirectionalAESMasterRx[0]) {
                                    innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Rx"] = [innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Rx"], true];
                                } else {
                                    innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Rx"] = [innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Rx"], false];
                                }
                            }

                            if (typeof innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"] != 'undefined') {
                                if (innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Tx"] == Max_UniDirectionalAESSlaveTx[0]) {
                                    innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Tx"] = [innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Tx"], true];
                                } else {
                                    innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Tx"] = [innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Tx"], false];
                                }
                                if (innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Rx"] == Max_UniDirectionalAESSlaveRx[0]) {
                                    innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Rx"] = [innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Rx"], true];
                                } else {
                                    innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Rx"] = [innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Rx"], false];
                                }
                            }
                        }
                    }

                }
            }
        }

        return smartMergeObj;
    } catch (err) {
        logger.error("updateMaxValueBtThroughputData error : ", err);
    }
}

async function modifyDataBtThroughput(smartMergeObj) {

    let innerArr = [];
    try {

        for (var j = 0; j < smartMergeObj.length; j++) {
            innerArr = [];
            innerArr.push(smartMergeObj[j]);

            for (var k = 0; k < innerArr.length; k++) {
                for (var p = 0; p < innerArr[k].length; p++) {
                    if (typeof innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"] != 'undefined') {
                        if (typeof innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"] != 'undefined') {
                            if (typeof innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"] != 'undefined') {
                                innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Tx"] = innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Tx"][0];
                                innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Rx"] = innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Rx"][0];
                            }

                            if (typeof innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"] != 'undefined') {
                                innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Tx"] = innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Tx"][0];
                                innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Rx"] = innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Rx"][0];
                            }
                        }

                        if (typeof innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"] != 'undefined') {
                            if (typeof innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"] != 'undefined') {
                                innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Tx"] = innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Tx"][0];
                                innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Rx"] = innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Rx"][0];
                            }


                            if (typeof innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"] != 'undefined') {
                                innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Tx"] = innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Tx"][0];
                                innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Rx"] = innerArr[k][p]["Bi-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Rx"][0];
                            }
                        }
                    }


                    if (typeof innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"] != 'undefined') {
                        if (typeof innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"] != 'undefined') {
                            if (typeof innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"] != 'undefined') {
                                innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Tx"] = innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Tx"][0];
                                innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Rx"] = innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Master"]["Rx"][0];
                            }

                            if (typeof innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"] != 'undefined') {
                                innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Tx"] = innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Tx"][0];
                                innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Rx"] = innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["E0"]["Slave"]["Rx"][0];
                            }
                        }

                        if (typeof innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"] != 'undefined') {
                            if (typeof innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"] != 'undefined') {
                                innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Tx"] = innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Tx"][0];
                                innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Rx"] = innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Master"]["Rx"][0];
                            }

                            if (typeof innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"] != 'undefined') {
                                innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Tx"] = innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Tx"][0];
                                innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Rx"] = innerArr[k][p]["Uni-DirectionalTx-Rx Traffic(TP Values in Kbps)"]["AES"]["Slave"]["Rx"][0];
                            }
                        }
                    }
                }
            }
        }
        return smartMergeObj;
    } catch (err) {
        logger.error("updateMaxValueBtThroughputData error : ", err);
    }
}


/* Function for smart merge of Bt MOS executions */
async function smartMergeCompareBtMosData(executions) {
    try {
        let testCompareObjects = [];

        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT')), 'DUT'), function(element) {
            let commonDUT = _.filter(executions, function(p) { return p['DUT'] == element; })
            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Soc Version')), 'Soc Version'), function(element) {
                let commonSocVersion = _.filter(commonDUT, function(p) { return p['Soc Version'] == element; })
                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('SocType')), 'SocType'), function(element) {
                    let commonSocType = _.filter(commonSocVersion, function(p) { return p['SocType'] == element; })
                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT Fw')), 'DUT Fw'), function(element) {
                        let commonDUTFw = _.filter(commonSocType, function(p) { return p['DUT Fw'] == element; })
                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Interface')), 'Interface'), function(element) {
                            let commonInterface = _.filter(commonDUTFw, function(p) { return p['Interface'] == element; })
                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT Os')), 'DUT Os'), function(element) {
                                let commonDUTOs = _.filter(commonInterface, function(p) { return p['DUT Os'] == element; })
                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Audio path')), 'Audio path'), function(element) {
                                    let commonAudiopath = _.filter(commonDUTOs, function(p) { return p['Audio path'] == element; })
                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('HFP Interface')), 'HFP Interface'), function(element) {
                                        let commonHFPInterface = _.filter(commonAudiopath, function(p) { return p['HFP Interface'] == element; })
                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT Controller Role wrt Codec (Master/Slave)')), 'DUT Controller Role wrt Codec (Master/Slave)'), function(element) {
                                            let commonDUTController = _.filter(commonHFPInterface, function(p) { return p['DUT Controller Role wrt Codec (Master/Slave)'] == element; })
                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT BT Role(Master/ Role)')), 'DUT BT Role(Master/ Role)'), function(element) {
                                                let commonDUTBTRole = _.filter(commonDUTController, function(p) { return p['DUT BT Role(Master/ Role)'] == element; })
                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Packet Type')), 'Packet Type'), function(element) {
                                                    let commonPacketType = _.filter(commonDUTBTRole, function(p) { return p['Packet Type'] == element; })
                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Retransmission')), 'Retransmission'), function(element) {
                                                        let commonRetransmission = _.filter(commonPacketType, function(p) { return p['Retransmission'] == element; })
                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Max Latency')), 'Max Latency'), function(element) {
                                                            let commonMaxLatency = _.filter(commonRetransmission, function(p) { return p['Max Latency'] == element; })
                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Air mode')), 'Air mode'), function(element) {
                                                                let commonAirmode = _.filter(commonMaxLatency, function(p) { return p['Air mode'] == element; })
                                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Mos baseline')), 'Mos baseline'), function(element) {
                                                                    let commonMosbaseline = _.filter(commonAirmode, function(p) { return p['Mos baseline'] == element; })
                                                                    if (commonMosbaseline.length) {
                                                                        testCompareObjects.push(commonMosbaseline);
                                                                    }
                                                                })
                                                            })
                                                        })
                                                    })
                                                })
                                            })
                                        })
                                    })
                                })
                            })
                        })
                    })
                })
            })
        })

        return testCompareObjects;
    } catch (err) {
        logger.error("smartMergeCompareBtThroughputData error : ", err);
    }
}

async function updateMaxValueBtMosData(smartMergeObj) {
    let innerArr = [];

    let MosscoreRx = [],
        MosscoreTx = [],
        MosscoreRxVal = [],
        MosscoreTxVal = [];

    try {

        for (var j = 0; j < smartMergeObj.length; j++) {
            innerArr = [];
            innerArr.push(smartMergeObj[j]);

            for (var i = 0; i < smartMergeObj[j].length; i++) {

                if (typeof smartMergeObj[j][i]["reportName"] != 'undefined') {
                    if (typeof smartMergeObj[j][i]["Mos score"] != 'undefined') {
                        if (typeof smartMergeObj[j][i]["Mos score"]["Rx"] != 'undefined') {
                            MosscoreRx.push(smartMergeObj[j][i]["Mos score"]["Rx"]["value"] ? smartMergeObj[j][i]["Mos score"]["Rx"]["value"] : '');
                            MosscoreRxVal.push(MosscoreRx);
                        }
                        if (typeof smartMergeObj[j][i]["Mos score"]["Tx"] != 'undefined') {
                            MosscoreTx.push(smartMergeObj[j][i]["Mos score"]["Tx"]["value"] ? smartMergeObj[j][i]["Mos score"]["Tx"]["value"] : '');
                            MosscoreTxVal.push(MosscoreTx);
                        }
                    }
                } else {
                    if (typeof smartMergeObj[j][i]["Mos score"] != 'undefined') {
                        if (typeof smartMergeObj[j][i]["Mos score"]["Rx"] != 'undefined') {
                            MosscoreRx.push(smartMergeObj[j][i]["Mos score"]["Rx"] ? smartMergeObj[j][i]["Mos score"]["Rx"] : '');
                            MosscoreRxVal.push(MosscoreRx);
                        }
                        if (typeof smartMergeObj[j][i]["Mos score"]["Tx"] != 'undefined') {
                            MosscoreTx.push(smartMergeObj[j][i]["Mos score"]["Tx"] ? smartMergeObj[j][i]["Mos score"]["Tx"] : '');
                            MosscoreTxVal.push(MosscoreTx);
                        }
                    }
                }
                MosscoreRx = [];
                MosscoreTx = [];
            }

            var Max_MosscoreRxVal = await getMaxValInArr(MosscoreRxVal);
            var Max_MosscoreTxVal = await getMaxValInArr(MosscoreTxVal);

            MosscoreRxVal = [];
            MosscoreTxVal = [];

            // Status Changes loop
            for (var k = 0; k < innerArr.length; k++) {
                for (var p = 0; p < innerArr[k].length; p++) {

                    if (typeof innerArr[k][p]["reportName"] != 'undefined') {
                        if (typeof innerArr[k][p]["Mos score"] != 'undefined') {
                            if (innerArr[k][p]["Mos score"]["Tx"]["value"] == Max_MosscoreTxVal[0]) {
                                innerArr[k][p]["Mos score"]["Tx"] = { "value": innerArr[k][p]["Mos score"]["Tx"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["Mos score"]["Tx"] = { "value": innerArr[k][p]["Mos score"]["Tx"]["value"], "status": false };
                            }

                            if (innerArr[k][p]["Mos score"]["Rx"]["value"] == Max_MosscoreRxVal[0]) {
                                innerArr[k][p]["Mos score"]["Rx"] = { "value": innerArr[k][p]["Mos score"]["Rx"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["Mos score"]["Rx"] = { "value": innerArr[k][p]["Mos score"]["Rx"]["value"], "status": false };
                            }
                        }
                    } else {
                        if (typeof innerArr[k][p]["Mos score"] != 'undefined') {
                            if (innerArr[k][p]["Mos score"]["Tx"] == Max_MosscoreTxVal[0]) {
                                innerArr[k][p]["Mos score"]["Tx"] = { "value": innerArr[k][p]["Mos score"]["Tx"], "status": true };
                            } else {
                                innerArr[k][p]["Mos score"]["Tx"] = { "value": innerArr[k][p]["Mos score"]["Tx"], "status": false };
                            }

                            if (innerArr[k][p]["Mos score"]["Rx"] == Max_MosscoreRxVal[0]) {
                                innerArr[k][p]["Mos score"]["Rx"] = { "value": innerArr[k][p]["Mos score"]["Rx"], "status": true };
                            } else {
                                innerArr[k][p]["Mos score"]["Rx"] = { "value": innerArr[k][p]["Mos score"]["Rx"], "status": false };
                            }
                        }
                    }

                }
            }
        }
        return smartMergeObj;
    } catch (err) {
        logger.error("updateMaxValueBtThroughputData error : ", err);
    }
}

/* Function for smart merge of BT-Dual-HFP executions */
async function smartMergeCompareBTDualHFP(executions) {
    try {
        let testCompareObjects = [];

        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT')), 'DUT'), function(element) {
            let commonDUT = _.filter(executions, function(p) { return p['DUT'] == element; })
            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Soc Version')), 'Soc Version'), function(element) {
                let commonSocVersion = _.filter(commonDUT, function(p) { return p['Soc Version'] == element; })
                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('SocType')), 'SocType'), function(element) {
                    let commonSocType = _.filter(commonSocVersion, function(p) { return p['SocType'] == element; })
                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT Fw')), 'DUT Fw'), function(element) {
                        let commonDUTFw = _.filter(commonSocType, function(p) { return p['DUT Fw'] == element; })
                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Interface')), 'Interface'), function(element) {
                            let commonInterface = _.filter(commonDUTFw, function(p) { return p['Interface'] == element; })
                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT Os')), 'DUT Os'), function(element) {
                                let commonDUTOs = _.filter(commonInterface, function(p) { return p['DUT Os'] == element; })
                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Audio path')), 'Audio path'), function(element) {
                                    let commonAudiopath = _.filter(commonDUTOs, function(p) { return p['Audio path'] == element; })
                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Link-1 HFP Interface')), 'Link-1 HFP Interface'), function(element) {
                                        let commonLink1HFPInterface = _.filter(commonAudiopath, function(p) { return p['Link-1 HFP Interface'] == element; })
                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Link-2 HFP Interface')), 'Link-2 HFP Interface'), function(element) {
                                            let commonLink2HFPInterface = _.filter(commonLink1HFPInterface, function(p) { return p['Link-2 HFP Interface'] == element; })
                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT Controller Role wrt Codec (Master/Slave)')), 'DUT Controller Role wrt Codec (Master/Slave)'), function(element) {
                                                let commonDUTController = _.filter(commonLink2HFPInterface, function(p) { return p['DUT Controller Role wrt Codec (Master/Slave)'] == element; })
                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Link-1 DUT BT Role(Master/Slave)')), 'Link-1 DUT BT Role(Master/Slave)'), function(element) {
                                                    let commonLink1DUTBTRole = _.filter(commonDUTController, function(p) { return p['Link-1 DUT BT Role(Master/Slave)'] == element; })
                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Link-2 DUT BT Role(Master/Slave)')), 'Link-2 DUT BT Role(Master/Slave)'), function(element) {
                                                        let commonLink2DUTBTRole = _.filter(commonLink1DUTBTRole, function(p) { return p['Link-2 DUT BT Role(Master/Slave)'] == element; })
                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Link-1 Packet Type')), 'Link-1 Packet Type'), function(element) {
                                                            let commonLink1PacketType = _.filter(commonLink2DUTBTRole, function(p) { return p['Link-1 Packet Type'] == element; })
                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Link-2 Packet Type')), 'Link-2 Packet Type'), function(element) {
                                                                let commonLink2PacketType = _.filter(commonLink1PacketType, function(p) { return p['Link-2 Packet Type'] == element; })
                                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Link-1 Retransmission')), 'Link-1 Retransmission'), function(element) {
                                                                    let commonLink1Retransmission = _.filter(commonLink2PacketType, function(p) { return p['Link-1 Retransmission'] == element; })
                                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Link-2 Retransmission')), 'Link-2 Retransmission'), function(element) {
                                                                        let commonLink2Retransmission = _.filter(commonLink1Retransmission, function(p) { return p['Link-2 Retransmission'] == element; })
                                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Link-1 Max Latency')), 'Link-1 Max Latency'), function(element) {
                                                                            let commonLink1MaxLatency = _.filter(commonLink2Retransmission, function(p) { return p['Link-1 Max Latency'] == element; })
                                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Link-2 Max Latency')), 'Link-2 Max Latency'), function(element) {
                                                                                let commonLink2MaxLatency = _.filter(commonLink1MaxLatency, function(p) { return p['Link-2 Max Latency'] == element; })
                                                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Mos baseline')), 'Mos baseline'), function(element) {
                                                                                    let commonMosbaseline = _.filter(commonLink2MaxLatency, function(p) { return p['Mos baseline'] == element; })
                                                                                    if (commonMosbaseline.length) {
                                                                                        testCompareObjects.push(commonMosbaseline);
                                                                                    }
                                                                                })
                                                                            })
                                                                        })
                                                                    })
                                                                })
                                                            })
                                                        })
                                                    })
                                                })
                                            })
                                        })
                                    })
                                })
                            })
                        })
                    })
                })
            })
        })

        return testCompareObjects;
    } catch (err) {
        logger.error("smartMergeCompareBtThroughputData error : ", err);
    }
}


async function updateMaxValueBTDualHFP(smartMergeObj) {
    let innerArr = [];

    let link1MosscoreRx = [],
        link1MosscoreTx = [],
        link1MosscoreRxVal = [],
        link1MosscoreTxVal = [],

        link2MosscoreRx = [],
        link2MosscoreTx = [],
        link2MosscoreRxVal = [],
        link2MosscoreTxVal = [];

    try {

        for (var j = 0; j < smartMergeObj.length; j++) {
            innerArr = [];
            innerArr.push(smartMergeObj[j]);

            for (var i = 0; i < smartMergeObj[j].length; i++) {

                if (typeof smartMergeObj[j][i]["reportName"] != 'undefined') {
                    if (typeof smartMergeObj[j][i]["Link-1 MOS Score"] != 'undefined') {
                        if (typeof smartMergeObj[j][i]["Link-1 MOS Score"]["Rx"] != 'undefined') {
                            link1MosscoreRx.push(smartMergeObj[j][i]["Link-1 MOS Score"]["Rx"]["value"] ? smartMergeObj[j][i]["Link-1 MOS Score"]["Rx"]["value"] : '');
                            link1MosscoreRxVal.push(link1MosscoreRx);
                        }
                        if (typeof smartMergeObj[j][i]["Link-1 MOS Score"]["Tx"] != 'undefined') {
                            link1MosscoreTx.push(smartMergeObj[j][i]["Link-1 MOS Score"]["Tx"]["value"] ? smartMergeObj[j][i]["Link-1 MOS Score"]["Tx"]["value"] : '');
                            link1MosscoreTxVal.push(link1MosscoreTx);
                        }
                    }

                    if (typeof smartMergeObj[j][i]["Link-2 MOS Score"] != 'undefined') {
                        if (typeof smartMergeObj[j][i]["Link-2 MOS Score"]["Rx"] != 'undefined') {
                            link2MosscoreRx.push(smartMergeObj[j][i]["Link-2 MOS Score"]["Rx"]["value"] ? smartMergeObj[j][i]["Link-2 MOS Score"]["Rx"]["value"] : '');
                            link2MosscoreRxVal.push(link2MosscoreRx);
                        }
                        if (typeof smartMergeObj[j][i]["Link-2 MOS Score"]["Tx"] != 'undefined') {
                            link2MosscoreTx.push(smartMergeObj[j][i]["Link-2 MOS Score"]["Tx"]["value"] ? smartMergeObj[j][i]["Link-2 MOS Score"]["Tx"]["value"] : '');
                            link2MosscoreTxVal.push(link2MosscoreTx);
                        }
                    }

                } else {
                    if (typeof smartMergeObj[j][i]["Link-1 MOS Score"] != 'undefined') {
                        if (typeof smartMergeObj[j][i]["Link-1 MOS Score"]["Rx"] != 'undefined') {
                            link1MosscoreRx.push(smartMergeObj[j][i]["Link-1 MOS Score"]["Rx"] ? smartMergeObj[j][i]["Link-1 MOS Score"]["Rx"] : '');
                            link1MosscoreRxVal.push(link1MosscoreRx);
                        }
                        if (typeof smartMergeObj[j][i]["Link-1 MOS Score"]["Tx"] != 'undefined') {
                            link1MosscoreTx.push(smartMergeObj[j][i]["Link-1 MOS Score"]["Tx"] ? smartMergeObj[j][i]["Link-1 MOS Score"]["Tx"] : '');
                            link1MosscoreTxVal.push(link1MosscoreTx);
                        }
                    }

                    if (typeof smartMergeObj[j][i]["Link-2 MOS Score"] != 'undefined') {
                        if (typeof smartMergeObj[j][i]["Link-2 MOS Score"]["Rx"] != 'undefined') {
                            link2MosscoreRx.push(smartMergeObj[j][i]["Link-2 MOS Score"]["Rx"] ? smartMergeObj[j][i]["Link-2 MOS Score"]["Rx"] : '');
                            link2MosscoreRxVal.push(link2MosscoreRx);
                        }
                        if (typeof smartMergeObj[j][i]["Link-2 MOS Score"]["Tx"] != 'undefined') {
                            link2MosscoreTx.push(smartMergeObj[j][i]["Link-2 MOS Score"]["Tx"] ? smartMergeObj[j][i]["Link-2 MOS Score"]["Tx"] : '');
                            link2MosscoreTxVal.push(link2MosscoreTx);
                        }
                    }
                }
                link1MosscoreRx = [];
                link1MosscoreTx = [];
                link2MosscoreRx = [];
                link2MosscoreTx = [];
            }

            var link1Max_MosscoreRxVal = await getMaxValInArr(link1MosscoreRxVal);
            var link1Max_MosscoreTxVal = await getMaxValInArr(link1MosscoreTxVal);

            var link2Max_MosscoreRxVal = await getMaxValInArr(link2MosscoreRxVal);
            var link2Max_MosscoreTxVal = await getMaxValInArr(link2MosscoreTxVal);

            link1MosscoreRxVal = [];
            link1MosscoreTxVal = [];
            link2MosscoreRxVal = [];
            link2MosscoreTxVal = [];

            // Status Changes loop
            for (var k = 0; k < innerArr.length; k++) {
                for (var p = 0; p < innerArr[k].length; p++) {

                    if (typeof innerArr[k][p]["reportName"] != 'undefined') {
                        if (typeof innerArr[k][p]["Link-1 MOS Score"] != 'undefined') {
                            if (innerArr[k][p]["Link-1 MOS Score"]["Tx"]["value"] == link1Max_MosscoreTxVal[0]) {
                                innerArr[k][p]["Link-1 MOS Score"]["Tx"] = { "value": innerArr[k][p]["Link-1 MOS Score"]["Tx"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["Link-1 MOS Score"]["Tx"] = { "value": innerArr[k][p]["Link-1 MOS Score"]["Tx"]["value"], "status": false };
                            }

                            if (innerArr[k][p]["Link-1 MOS Score"]["Rx"]["value"] == link1Max_MosscoreRxVal[0]) {
                                innerArr[k][p]["Link-1 MOS Score"]["Rx"] = { "value": innerArr[k][p]["Link-1 MOS Score"]["Rx"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["Link-1 MOS Score"]["Rx"] = { "value": innerArr[k][p]["Link-1 MOS Score"]["Rx"]["value"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["Link-2 MOS Score"] != 'undefined') {
                            if (innerArr[k][p]["Link-2 MOS Score"]["Tx"]["value"] == link2Max_MosscoreTxVal[0]) {
                                innerArr[k][p]["Link-2 MOS Score"]["Tx"] = { "value": innerArr[k][p]["Link-2 MOS Score"]["Tx"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["Link-2 MOS Score"]["Tx"] = { "value": innerArr[k][p]["Link-2 MOS Score"]["Tx"]["value"], "status": false };
                            }

                            if (innerArr[k][p]["Link-2 MOS Score"]["Rx"]["value"] == link2Max_MosscoreRxVal[0]) {
                                innerArr[k][p]["Link-2 MOS Score"]["Rx"] = { "value": innerArr[k][p]["Link-2 MOS Score"]["Rx"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["Link-2 MOS Score"]["Rx"] = { "value": innerArr[k][p]["Link-2 MOS Score"]["Rx"]["value"], "status": false };
                            }
                        }
                    } else {
                        if (typeof innerArr[k][p]["Link-1 MOS Score"] != 'undefined') {
                            if (innerArr[k][p]["Link-1 MOS Score"]["Tx"] == link1Max_MosscoreTxVal[0]) {
                                innerArr[k][p]["Link-1 MOS Score"]["Tx"] = { "value": innerArr[k][p]["Link-1 MOS Score"]["Tx"], "status": true };
                            } else {
                                innerArr[k][p]["Link-1 MOS Score"]["Tx"] = { "value": innerArr[k][p]["Link-1 MOS Score"]["Tx"], "status": false };
                            }

                            if (innerArr[k][p]["Link-1 MOS Score"]["Rx"] == link1Max_MosscoreRxVal[0]) {
                                innerArr[k][p]["Link-1 MOS Score"]["Rx"] = { "value": innerArr[k][p]["Link-1 MOS Score"]["Rx"], "status": true };
                            } else {
                                innerArr[k][p]["Link-1 MOS Score"]["Rx"] = { "value": innerArr[k][p]["Link-1 MOS Score"]["Rx"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["Link-2 MOS Score"] != 'undefined') {
                            if (innerArr[k][p]["Link-2 MOS Score"]["Tx"] == link2Max_MosscoreTxVal[0]) {
                                innerArr[k][p]["Link-2 MOS Score"]["Tx"] = { "value": innerArr[k][p]["Link-2 MOS Score"]["Tx"], "status": true };
                            } else {
                                innerArr[k][p]["Link-2 MOS Score"]["Tx"] = { "value": innerArr[k][p]["Link-2 MOS Score"]["Tx"], "status": false };
                            }

                            if (innerArr[k][p]["Link-2 MOS Score"]["Rx"] == link2Max_MosscoreRxVal[0]) {
                                innerArr[k][p]["Link-2 MOS Score"]["Rx"] = { "value": innerArr[k][p]["Link-2 MOS Score"]["Rx"], "status": true };
                            } else {
                                innerArr[k][p]["Link-2 MOS Score"]["Rx"] = { "value": innerArr[k][p]["Link-2 MOS Score"]["Rx"], "status": false };
                            }
                        }
                    }
                }
            }
        }
        return smartMergeObj;
    } catch (err) {
        logger.error("updateMaxValueBtThroughputData error : ", err);
    }
}


/* Function for smart merge of BT-Dual-HFP executions */
async function smartMergeCompareSTACPUUtil(executions) {

    try {
        let testCompareObjects = [];
        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('TP TYPE')), 'TP TYPE'), function(element) {
            let commonTPTYPE = _.filter(executions, function(p) { return p['TP TYPE'] == element; })

            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT')), 'DUT'), function(element) {
                let commonDUT = _.filter(commonTPTYPE, function(p) { return p['DUT'] == element; })

                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Soc Version')), 'Soc Version'), function(element) {
                    let commonSocVersion = _.filter(commonDUT, function(p) { return p['Soc Version'] == element; })

                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('SoC TYPE')), 'SoC TYPE'), function(element) {
                        let commonSocType = _.filter(commonSocVersion, function(p) { return p['SoC TYPE'] == element; })

                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT Fw/Drv')), 'DUT Fw/Drv'), function(element) {
                            let commonDUTFw = _.filter(commonSocType, function(p) { return p['DUT Fw/Drv'] == element; })

                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Interface')), 'Interface'), function(element) {
                                let commonInterface = _.filter(commonDUTFw, function(p) { return p['Interface'] == element; })

                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Aggregation')), 'Aggregation'), function(element) {
                                    let commonAggregation = _.filter(commonInterface, function(p) { return p['Aggregation'] == element; })

                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Spatial Streams')), 'Spatial Streams'), function(element) {
                                        let commonSpatialStreams = _.filter(commonAggregation, function(p) { return p['Spatial Streams'] == element; })

                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Guard Interval')), 'Guard Interval'), function(element) {
                                            let commonGuardInterval = _.filter(commonSpatialStreams, function(p) { return p['Guard Interval'] == element; })

                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Data Rate')), 'Data Rate'), function(element) {
                                                let commonDataRate = _.filter(commonGuardInterval, function(p) { return p['Data Rate'] == element; })

                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Channel | 2 GHz')), 'Channel | 2 GHz'), function(element) {
                                                    let commonChannel2GHz = _.filter(commonDataRate, function(p) { return p['Channel | 2 GHz'] == element; })

                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Channel | 5 GHz')), 'Channel | 5 GHz'), function(element) {
                                                        let commonChannel5GHz = _.filter(commonChannel2GHz, function(p) { return p['Channel | 5 GHz'] == element; })

                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('SDIO Clock')), 'SDIO Clock'), function(element) {
                                                            let commonSDIOClock = _.filter(commonChannel5GHz, function(p) { return p['SDIO Clock'] == element; })

                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Companion Device/Ex-AP/Ex-STA/Ex-P2P-GO/Ex-P2P-GC')), 'Companion Device/Ex-AP/Ex-STA/Ex-P2P-GO/Ex-P2P-GC'), function(element) {
                                                                let commonCompanionDevice = _.filter(commonSDIOClock, function(p) { return p['Companion Device/Ex-AP/Ex-STA/Ex-P2P-GO/Ex-P2P-GC'] == element; })

                                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Companion Device FW/Drv')), 'Companion Device FW/Drv'), function(element) {
                                                                    let commonCompanionDeviceFWDrv = _.filter(commonCompanionDevice, function(p) { return p['Companion Device FW/Drv'] == element; })

                                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Host Platform')), 'Host Platform'), function(element) {
                                                                        let commonHostPlatform = _.filter(commonCompanionDeviceFWDrv, function(p) { return p['Host Platform'] == element; })

                                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('OS')), 'OS'), function(element) {
                                                                            let commonDUTOS = _.filter(commonHostPlatform, function(p) { return p['OS'] == element; })

                                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT Beamforming Config')), 'DUT Beamforming Config'), function(element) {
                                                                                let commonDUTBeamformingConfig = _.filter(commonDUTOS, function(p) { return p['DUT Beamforming Config'] == element; })

                                                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Companion Device Beamforming Config')), 'Companion Device Beamforming Config'), function(element) {
                                                                                    let commonCompanionDeviceBeamformingConfig = _.filter(commonDUTBeamformingConfig, function(p) { return p['Companion Device Beamforming Config'] == element; })

                                                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('LDPC')), 'LDPC'), function(element) {
                                                                                        let commonLDPC = _.filter(commonCompanionDeviceBeamformingConfig, function(p) { return p['LDPC'] == element; })

                                                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('STBC')), 'STBC'), function(element) {
                                                                                            let commonSTBC = _.filter(commonLDPC, function(p) { return p['STBC'] == element; })

                                                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT EdMac')), 'DUT EdMac'), function(element) {
                                                                                                let commonDUTEdMac = _.filter(commonSTBC, function(p) { return p['DUT EdMac'] == element; })

                                                                                                _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Misc')), 'Misc'), function(element) {
                                                                                                    let commonMisc = _.filter(commonDUTEdMac, function(p) { return p['Misc'] == element; })

                                                                                                    _.each(_.pluck(_.uniq(_.union(executions), false, _.property('Security')), 'Security'), function(element) {
                                                                                                        let commonSecurity = _.filter(commonMisc, function(p) { return p['Security'] == element; })

                                                                                                        _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT Mode')), 'DUT Mode'), function(element) {
                                                                                                            let commonDUTMode = _.filter(commonSecurity, function(p) { return p['DUT Mode'] == element; })

                                                                                                            _.each(_.pluck(_.uniq(_.union(executions), false, _.property('DUT Protocol')), 'DUT Protocol'), function(element) {
                                                                                                                let commonDUTProtocal = _.filter(commonDUTMode, function(p) { return p['DUT Protocol'] == element; })

                                                                                                                if (commonDUTProtocal.length) {
                                                                                                                    testCompareObjects.push(commonDUTProtocal);
                                                                                                                }

                                                                                                            })
                                                                                                        })
                                                                                                    })
                                                                                                })
                                                                                            })
                                                                                        })
                                                                                    })
                                                                                })
                                                                            })
                                                                        })
                                                                    })
                                                                })
                                                            })
                                                        })
                                                    })
                                                })
                                            })
                                        })
                                    })
                                })
                            })
                        })
                    })
                })
            })
        })

        return testCompareObjects;
    } catch (err) {
        logger.error("smartMergeCompare BT-Dual-HFP error : ", err);
    }
}


async function modifySTACPUUtilData(smartMergeObj) {
    console.log("Total Rec Length -->", smartMergeObj.length);
    for (var j = 0; j < smartMergeObj.length; j++) {
        for (var i = 0; i < smartMergeObj[j].length; i++) {
            if (smartMergeObj[j][i]["DUT Protocol"] == 'Process') {
                if (smartMergeObj[j].length > 1) {
                    smartMergeObj[j].splice(1);
                    // console.log("Inner arr -->", j, '--', i, '-', smartMergeObj[j].length);
                }
            }
        }
    }
    return smartMergeObj;
}

async function updateMaxValueSTACPUUtil(smartMergeObj) {
    let innerArr = [];

    let ThroughputMbps = [];
    let ThroughputMbpsVal = [];

    let CPUUsageinDMIPS = [];
    let CPUUsageinDMIPSVal = [];

    try {

        for (var j = 0; j < smartMergeObj.length; j++) {
            innerArr = [];
            innerArr.push(smartMergeObj[j]);

            for (var i = 0; i < smartMergeObj[j].length; i++) {

                if (smartMergeObj[j][i]["DUT Protocol"] != "Process") {

                    if (typeof smartMergeObj[j][i]["reportName"] != 'undefined') {
                        if (typeof smartMergeObj[j][i]["Throughput (Mbps)"] != 'undefined') {
                            ThroughputMbps.push(smartMergeObj[j][i]["Throughput (Mbps)"]["value"] ? smartMergeObj[j][i]["Throughput (Mbps)"]["value"] : '');
                            ThroughputMbpsVal.push(ThroughputMbps);
                        }
                        if (typeof smartMergeObj[j][i]["CPU Usage in D-MIPS"] != 'undefined') {
                            CPUUsageinDMIPS.push(smartMergeObj[j][i]["CPU Usage in D-MIPS"]["value"] ? smartMergeObj[j][i]["CPU Usage in D-MIPS"]["value"] : '');
                            CPUUsageinDMIPSVal.push(CPUUsageinDMIPS);
                        }
                    } else {
                        if (typeof smartMergeObj[j][i]["Throughput (Mbps)"] != 'undefined') {
                            ThroughputMbps.push(smartMergeObj[j][i]["Throughput (Mbps)"] ? smartMergeObj[j][i]["Throughput (Mbps)"] : '');
                            ThroughputMbpsVal.push(ThroughputMbps);
                        }
                        if (typeof smartMergeObj[j][i]["CPU Usage in D-MIPS"] != 'undefined') {
                            CPUUsageinDMIPS.push(smartMergeObj[j][i]["CPU Usage in D-MIPS"] ? smartMergeObj[j][i]["CPU Usage in D-MIPS"] : '');
                            CPUUsageinDMIPSVal.push(CPUUsageinDMIPS);
                        }
                    }
                }
                ThroughputMbps = [];
                CPUUsageinDMIPS = [];
            }

            let ThroughputMbpsValMAX = await getMaxValInArr(ThroughputMbpsVal);
            let CPUUsageinDMIPSValMAX = await getMinValInArr(CPUUsageinDMIPSVal);


            ThroughputMbpsVal = [];
            CPUUsageinDMIPSVal = [];


            // Status Changes loop
            for (var k = 0; k < innerArr.length; k++) {
                for (var p = 0; p < innerArr[k].length; p++) {

                    if (innerArr[k][p]["DUT Protocol"] != "Process") {
                        if (typeof innerArr[k][p]["reportName"] != 'undefined') {
                            if (typeof innerArr[k][p]["Throughput (Mbps)"] != 'undefined') {
                                if (innerArr[k][p]["Throughput (Mbps)"]["value"] == ThroughputMbpsValMAX[0]) {
                                    innerArr[k][p]["Throughput (Mbps)"] = { "value": innerArr[k][p]["Throughput (Mbps)"]["value"], "status": true };
                                } else {
                                    innerArr[k][p]["Throughput (Mbps)"] = { "value": innerArr[k][p]["Throughput (Mbps)"]["value"], "status": false };
                                }
                            }
                            if (typeof innerArr[k][p]["CPU Usage in D-MIPS"] != 'undefined') {
                                if (innerArr[k][p]["CPU Usage in D-MIPS"]["value"] == CPUUsageinDMIPSValMAX[0]) {
                                    innerArr[k][p]["CPU Usage in D-MIPS"] = { "value": innerArr[k][p]["CPU Usage in D-MIPS"]["value"], "status": true };
                                } else {
                                    innerArr[k][p]["CPU Usage in D-MIPS"] = { "value": innerArr[k][p]["CPU Usage in D-MIPS"]["value"], "status": false };
                                }
                            }

                        } else {

                            if (typeof innerArr[k][p]["Throughput (Mbps)"] != 'undefined') {
                                if (innerArr[k][p]["Throughput (Mbps)"] == ThroughputMbpsValMAX[0]) {
                                    innerArr[k][p]["Throughput (Mbps)"] = { "value": innerArr[k][p]["Throughput (Mbps)"], "status": true };
                                } else {
                                    innerArr[k][p]["Throughput (Mbps)"] = { "value": innerArr[k][p]["Throughput (Mbps)"], "status": false };
                                }
                            }
                            if (typeof innerArr[k][p]["CPU Usage in D-MIPS"] != 'undefined') {
                                if (innerArr[k][p]["CPU Usage in D-MIPS"] == CPUUsageinDMIPSValMAX[0]) {
                                    innerArr[k][p]["CPU Usage in D-MIPS"] = { "value": innerArr[k][p]["CPU Usage in D-MIPS"], "status": true };
                                } else {
                                    innerArr[k][p]["CPU Usage in D-MIPS"] = { "value": innerArr[k][p]["CPU Usage in D-MIPS"], "status": false };
                                }
                            }
                        }
                    }
                }
            }
        }
        return smartMergeObj;
    } catch (err) {
        logger.error("updateMaxValueBtThroughputData error : ", err);
    }
}


/** Merges Coex-Simul-TP-2INTF data of different execution **/
async function smartMergeCompareCoex2INTFData(executions) {

    try {
        //let execution_name = _.pluck(_.uniq(_.union(executions), false, _.property('execution_name')), 'execution_name');
        let uniqTPType = _.pluck(_.uniq(_.union(executions), false, _.property('TP TYPE')), 'TP TYPE');
        let uniqDUT = _.pluck(_.uniq(_.union(executions), false, _.property('DUT')), 'DUT');
        let uniqSocVersion = _.pluck(_.uniq(_.union(executions), false, _.property('SoC Version')), 'SoC Version');
        let uniqSocType = _.pluck(_.uniq(_.union(executions), false, _.property('SoC TYPE')), 'SoC TYPE');
        let uniqDUTFwDrv = _.pluck(_.uniq(_.union(executions), false, _.property('DUT Fw/Drv')), 'DUT Fw/Drv');
        let uniqInterface = _.pluck(_.uniq(_.union(executions), false, _.property('Interface')), 'Interface');
        let uniqSDIOClock = _.pluck(_.uniq(_.union(executions), false, _.property('SDIO Clock [MHz]')), 'SDIO Clock [MHz]');
        let uniqAggregation = _.pluck(_.uniq(_.union(executions), false, _.property('Aggregation')), 'Aggregation');
        let uniqSpatialStreams = _.pluck(_.uniq(_.union(executions), false, _.property('Spatial Streams')), 'Spatial Streams');
        let uniqGuardInterval = _.pluck(_.uniq(_.union(executions), false, _.property('Guard Interval')), 'Guard Interval');
        let uniqDataRate = _.pluck(_.uniq(_.union(executions), false, _.property('Data Rate')), 'Data Rate');
        let uniqConnectivityModes = _.pluck(_.uniq(_.union(executions), false, _.property('Connectivity Modes')), 'Connectivity Modes');
        let uniqIntfCompanionDevice1ExAPExSTA = _.pluck(_.uniq(_.union(executions), false, _.property('INTF1 | Companion Device 1/Ex-AP/Ex-STA/Ex-P2P-GO/Ex-P2P-GC')), 'INTF1 | Companion Device 1/Ex-AP/Ex-STA/Ex-P2P-GO/Ex-P2P-GC');
        let uniqIntfCompanionDevice1FWDrv = _.pluck(_.uniq(_.union(executions), false, _.property('INTF1 | Companion Device 1 FW/Drv')), 'INTF1 | Companion Device 1 FW/Drv');
        let uniqIntfCompanionDevice2ExAPExSTA = _.pluck(_.uniq(_.union(executions), false, _.property('INTF2 | Companion Device 1/Ex-AP/Ex-STA/Ex-P2P-GO/Ex-P2P-GC')), 'INTF2 | Companion Device 1/Ex-AP/Ex-STA/Ex-P2P-GO/Ex-P2P-GC');
        let uniqIntfCompanionDevice2FWDrv = _.pluck(_.uniq(_.union(executions), false, _.property('INTF2 | Companion Device 1 FW/Drv')), 'INTF2 | Companion Device 1 FW/Drv');


        let uniqDUTHostPlatform = _.pluck(_.uniq(_.union(executions), false, _.property('DUT Host Platform')), 'DUT Host Platform');
        let uniqDUTOs = _.pluck(_.uniq(_.union(executions), false, _.property('DUT OS')), 'DUT OS');
        let uniqINTF1Configuration = _.pluck(_.uniq(_.union(executions), false, _.property('INTF 1 Configuration')), 'INTF 1 Configuration');
        let uniqChannelINTF1 = _.pluck(_.uniq(_.union(executions), false, _.property('Channel | INTF 1')), 'Channel | INTF 1');
        let uniqINTF2Configuration = _.pluck(_.uniq(_.union(executions), false, _.property('INTF 2 Configuration')), 'INTF 2 Configuration');
        let uniqChannelINTF2 = _.pluck(_.uniq(_.union(executions), false, _.property('Channel | INTF 2')), 'Channel | INTF 2');
        let uniqDRCSTimingConfig = _.pluck(_.uniq(_.union(executions), false, _.property('DRCS Timing Configuration Duty Cycle | INTF1 | INTF2')), 'DRCS Timing Configuration Duty Cycle | INTF1 | INTF2');

        let uniqMisc = _.pluck(_.uniq(_.union(executions), false, _.property('Misc')), 'Misc');

        let uniqSecurity = _.pluck(_.uniq(_.union(executions), false, _.property('Security')), 'Security');
        let uniqBTRef = _.pluck(_.uniq(_.union(executions), false, _.property('BT Ref')), 'BT Ref');
        let uniqCoexMode = _.pluck(_.uniq(_.union(executions), false, _.property('Coex mode')), 'Coex mode');
        let uniqAntIsolation = _.pluck(_.uniq(_.union(executions), false, _.property('ANT isolation')), 'ANT isolation');
        let uniqBTProfiles = _.pluck(_.uniq(_.union(executions), false, _.property('BT profiles')), 'BT profiles');
        let uniqBTBLERole = _.pluck(_.uniq(_.union(executions), false, _.property('BT/BLE Role')), 'BT/BLE Role');
        let uniqProfileParam = _.pluck(_.uniq(_.union(executions), false, _.property('Profile Param')), 'Profile Param');
        let uniqConnectionParam = _.pluck(_.uniq(_.union(executions), false, _.property('Connection param')), 'Connection param');
        let uniqBTSniff = _.pluck(_.uniq(_.union(executions), false, _.property('BT Sniff')), 'BT Sniff ');
        let uniqTestDuration = _.pluck(_.uniq(_.union(executions), false, _.property('Test Duration')), 'Test Duration');
        // let uniqTestRepetition = _.pluck(_.uniq(_.union(executions), false, _.property('Test Repetition')), 'Test Repetition ');

        let testCompareObjects = [];

        _.each(uniqTPType, function(element) {
            let commonUniqTPType = _.filter(executions, function(p) { return p['TP TYPE'] == element; })
            _.each(uniqDUT, function(element) {
                let commonUniqDUT = _.filter(commonUniqTPType, function(p) { return p['DUT'] == element; })
                _.each(uniqSocVersion, function(element) {
                    let commonUniqSocVersion = _.filter(commonUniqDUT, function(p) { return p['SoC Version'] == element; })
                    _.each(uniqSocType, function(element) {
                        let commonUniqSocType = _.filter(commonUniqSocVersion, function(p) { return p['SoC TYPE'] == element; })
                        _.each(uniqDUTFwDrv, function(element) {
                            let commonUniqDUTFwDrv = _.filter(commonUniqSocType, function(p) { return p['DUT Fw/Drv'] == element; })
                            _.each(uniqInterface, function(element) {
                                let commonUniqInterface = _.filter(commonUniqDUTFwDrv, function(p) { return p['Interface'] == element; })
                                _.each(uniqSDIOClock, function(element) {
                                    let commonUniqSDIOClock = _.filter(commonUniqInterface, function(p) { return p['SDIO Clock [MHz]'] == element; })
                                    _.each(uniqAggregation, function(element) {
                                        let commonUniqAggregation = _.filter(commonUniqSDIOClock, function(p) { return p['Aggregation'] == element; })
                                        _.each(uniqSpatialStreams, function(element) {
                                            let commonUniqSpatialStreams = _.filter(commonUniqAggregation, function(p) { return p['Spatial Streams'] == element; })
                                            _.each(uniqGuardInterval, function(element) {
                                                let commonUniqGuardInterval = _.filter(commonUniqSpatialStreams, function(p) { return p['Guard Interval'] == element; })
                                                _.each(uniqDataRate, function(element) {
                                                    let commonUniqDataRate = _.filter(commonUniqGuardInterval, function(p) { return p['Data Rate'] == element; })
                                                    _.each(uniqConnectivityModes, function(element) {
                                                        let commonUniqConnectivityModes = _.filter(commonUniqDataRate, function(p) { return p['Connectivity Modes'] == element; })

                                                        _.each(uniqIntfCompanionDevice1ExAPExSTA, function(element) {
                                                            let commonUniqIntfCompanionDevice1ExAPExSTA = _.filter(commonUniqConnectivityModes, function(p) { return p['INTF1 | Companion Device 1/Ex-AP/Ex-STA/Ex-P2P-GO/Ex-P2P-GC'] == element; })
                                                            _.each(uniqIntfCompanionDevice1FWDrv, function(element) {
                                                                let commonUniqIntfCompanionDevice1FWDrv = _.filter(commonUniqIntfCompanionDevice1ExAPExSTA, function(p) { return p['INTF1 | Companion Device 1 FW/Drv'] == element; })
                                                                _.each(uniqIntfCompanionDevice2ExAPExSTA, function(element) {
                                                                    let commonUniqIntfCompanionDevice2ExAPExSTA = _.filter(commonUniqIntfCompanionDevice1FWDrv, function(p) { return p['INTF2 | Companion Device 1/Ex-AP/Ex-STA/Ex-P2P-GO/Ex-P2P-GC'] == element; })
                                                                    _.each(uniqIntfCompanionDevice2FWDrv, function(element) {
                                                                        let commonUniqIntfCompanionDevice2FWDrv = _.filter(commonUniqIntfCompanionDevice2ExAPExSTA, function(p) { return p['INTF2 | Companion Device 1 FW/Drv'] == element; })


                                                                        _.each(uniqDUTHostPlatform, function(element) {
                                                                            let commonUniqDUTHostPlatform = _.filter(commonUniqIntfCompanionDevice2FWDrv, function(p) { return p['DUT Host Platform'] == element; })
                                                                            _.each(uniqDUTOs, function(element) {
                                                                                let commonUniqDUTOs = _.filter(commonUniqDUTHostPlatform, function(p) { return p['DUT OS'] == element; })
                                                                                _.each(uniqINTF1Configuration, function(element) {
                                                                                    let commonUniqINTF1Configuration = _.filter(commonUniqDUTOs, function(p) { return p['INTF 1 Configuration'] == element; })
                                                                                    _.each(uniqChannelINTF1, function(element) {
                                                                                        let commonUniqChannelINTF1 = _.filter(commonUniqINTF1Configuration, function(p) { return p['Channel | INTF 1'] == element; })
                                                                                        _.each(uniqINTF2Configuration, function(element) {
                                                                                            let commonUniqINTF2Configuration = _.filter(commonUniqChannelINTF1, function(p) { return p['INTF 2 Configuration'] == element; })
                                                                                            _.each(uniqChannelINTF2, function(element) {
                                                                                                let commonUniqChannelINTF2 = _.filter(commonUniqINTF2Configuration, function(p) { return p['Channel | INTF 2'] == element; })
                                                                                                _.each(uniqDRCSTimingConfig, function(element) {
                                                                                                    let commonUniqDRCSTimingConfig = _.filter(commonUniqChannelINTF2, function(p) { return p['DRCS Timing Configuration Duty Cycle | INTF1 | INTF2'] == element; })

                                                                                                    _.each(uniqMisc, function(element) {
                                                                                                        let commonUniqMisc = _.filter(commonUniqDRCSTimingConfig, function(p) { return p['Misc'] == element; })

                                                                                                        _.each(uniqSecurity, function(element) {
                                                                                                            let commonUniqSecurity = _.filter(commonUniqMisc, function(p) { return p['Security'] == element; })
                                                                                                            _.each(uniqBTRef, function(element) {
                                                                                                                let commonUniqBTRef = _.filter(commonUniqSecurity, function(p) { return p['BT Ref'] == element; })
                                                                                                                _.each(uniqCoexMode, function(element) {
                                                                                                                    let commonUniqCoexMode = _.filter(commonUniqBTRef, function(p) { return p['Coex mode'] == element; })
                                                                                                                    _.each(uniqAntIsolation, function(element) {
                                                                                                                        let commonUniqAntIsolation = _.filter(commonUniqCoexMode, function(p) { return p['ANT isolation'] == element; })
                                                                                                                        _.each(uniqBTProfiles, function(element) {
                                                                                                                            let commonUniqBTProfiles = _.filter(commonUniqAntIsolation, function(p) { return p['BT profiles'] == element; })
                                                                                                                            _.each(uniqBTBLERole, function(element) {
                                                                                                                                let commonUniqBTBLERole = _.filter(commonUniqBTProfiles, function(p) { return p['BT/BLE Role'] == element; })
                                                                                                                                _.each(uniqProfileParam, function(element) {
                                                                                                                                    let commonUniqProfileParam = _.filter(commonUniqBTBLERole, function(p) { return p['Profile Param'] == element; })
                                                                                                                                    _.each(uniqConnectionParam, function(element) {
                                                                                                                                        let commonUniqConnectionParam = _.filter(commonUniqProfileParam, function(p) { return p['Connection param'] == element; })
                                                                                                                                        _.each(uniqBTSniff, function(element) {
                                                                                                                                            let commonUniqBTSniff = _.filter(commonUniqConnectionParam, function(p) { return p['BT Sniff '] == element; })
                                                                                                                                            _.each(uniqTestDuration, function(element) {
                                                                                                                                                let commonUniqTestDuration = _.filter(commonUniqBTSniff, function(p) { return p['Test Duration'] == element; })
                                                                                                                                                    // _.each(uniqTestRepetition, function(element) {
                                                                                                                                                    //     let commonUniqTestRepetition = _.filter(commonUniqTestDuration, function(p) { return p['Test Repetition '] == element; })
                                                                                                                                                if (commonUniqTestDuration.length) {
                                                                                                                                                    testCompareObjects.push(commonUniqTestDuration);
                                                                                                                                                }
                                                                                                                                                // })
                                                                                                                                            })
                                                                                                                                        })
                                                                                                                                    })
                                                                                                                                })
                                                                                                                            })
                                                                                                                        })
                                                                                                                    })
                                                                                                                })
                                                                                                            })
                                                                                                        })
                                                                                                    })
                                                                                                })
                                                                                            })
                                                                                        })
                                                                                    })
                                                                                })
                                                                            })
                                                                        })
                                                                    })
                                                                })
                                                            })
                                                        })
                                                    })
                                                })
                                            })
                                        })
                                    })
                                })
                            })
                        })
                    })
                })
            })
        })

        return testCompareObjects;

    } catch (err) {
        logger.error("smartCompareTPData error : ", err);
    }

}

async function updateMaxValueCoex2INTFData(smartMergeObj) {
    console.log(" ->>", smartMergeObj.length);
    //let headersArr = ['TCP Coex Performance', 'UDP Coex Performance'];
    var txrxCombinations = ["TxTx", "TxRx", "RxTx", "RxRx"];
    var performanceInterfaces = ["INTF1", "INTF2", "BT Performance Result#1", "BT Performance Result#2"];


    let innerArr = [];

    let BTBaseline1 = [],
        BTBaseline2 = [],
        BTRSSI = [],
        TCP_RxRx_INTF1 = [],
        TCP_RxRx_INTF2 = [],
        TCP_RxTx_INTF1 = [],
        TCP_RxTx_INTF2 = [],
        TCP_TxRx_INTF1 = [],
        TCP_TxRx_INTF2 = [],
        TCP_TxTx_INTF1 = [],
        TCP_TxTx_INTF2 = [],
        UDP_RxRx_INTF1 = [],
        UDP_RxRx_INTF2 = [],
        UDP_RxTx_INTF1 = [],
        UDP_RxTx_INTF2 = [],
        UDP_TxRx_INTF1 = [],
        UDP_TxRx_INTF2 = [],
        UDP_TxTx_INTF1 = [],
        UDP_TxTx_INTF2 = [],
        WiFiIntf1RSSI = [],
        WiFiIntf2RSSI = [],
        WiFiIntf_1RSSI = [],
        WiFiIntf_2RSSI = [],
        TCPCoexPerformance = [],
        UDPCoexPerformance = [],
        BT_RSSI = [];
    // BTPerformanceResult1 = [],
    // BTPerformanceResult2 = [],
    // INTF1 = [],
    // INTF2 = [];

    let BTBaseline1_val = [],
        BTBaseline2_val = [],
        BTRSSI_val = [],
        TCP_RxRx_INTF1_val = [],
        TCP_RxRx_INTF2_val = [],
        TCP_RxTx_INTF1_val = [],
        TCP_RxTx_INTF2_val = [],
        TCP_TxRx_INTF1_val = [],
        TCP_TxRx_INTF2_val = [],
        TCP_TxTx_INTF1_val = [],
        TCP_TxTx_INTF2_val = [],
        UDP_RxRx_INTF1_val = [],
        UDP_RxRx_INTF2_val = [],
        UDP_RxTx_INTF1_val = [],
        UDP_RxTx_INTF2_val = [],
        UDP_TxRx_INTF1_val = [],
        UDP_TxRx_INTF2_val = [],
        UDP_TxTx_INTF1_val = [],
        UDP_TxTx_INTF2_val = [],
        WiFiIntf1RSSI_val = [],
        WiFiIntf2RSSI_val = [],
        WiFiIntf_1RSSI_val = [],
        WiFiIntf_2RSSI_val = [],
        TCPCoexPerformance_val = [],
        UDPCoexPerformance_val = [],
        BT_RSSI_val = [];
    // BTPerformanceResult1_val = [],
    // BTPerformanceResult2_val = [],
    // INTF1_val = [],
    // INTF2_val = [];


    try {


        for (var j = 0; j < smartMergeObj.length; j++) {
            innerArr = [];
            innerArr.push(smartMergeObj[j]);

            for (var i = 0; i < smartMergeObj[j].length; i++) {

                if (typeof smartMergeObj[j][i]["reportName"] != 'undefined') {

                    BTBaseline1.push(smartMergeObj[j][i]["BT Baseline #1"] ? smartMergeObj[j][i]["BT Baseline #1"]["value"] : "");
                    BTBaseline1_val.push(BTBaseline1);
                    BTBaseline2.push(smartMergeObj[j][i]["BT Baseline #2"] ? smartMergeObj[j][i]["BT Baseline #2"]["value"] : "");
                    BTBaseline2_val.push(BTBaseline2);
                    BTRSSI.push(smartMergeObj[j][i]["BT RSSI"] ? smartMergeObj[j][i]["BT RSSI"]["value"] : "");
                    BTRSSI_val.push(BTRSSI);

                    BT_RSSI.push(smartMergeObj[j][i]["BT_RSSI"] ? smartMergeObj[j][i]["BT_RSSI"]["value"] : "");
                    BT_RSSI_val.push(BTRSSI);

                    TCP_RxRx_INTF1.push(smartMergeObj[j][i]["TCP-RxRx_INTF1"] ? smartMergeObj[j][i]["TCP-RxRx_INTF1"]["value"] : "");
                    TCP_RxRx_INTF1_val.push(TCP_RxRx_INTF1);
                    TCP_RxRx_INTF2.push(smartMergeObj[j][i]["TCP-RxRx_INTF2"] ? smartMergeObj[j][i]["TCP-RxRx_INTF2"]["value"] : "");
                    TCP_RxRx_INTF2_val.push(TCP_RxRx_INTF2);
                    TCP_RxTx_INTF1.push(smartMergeObj[j][i]["TCP-RxTx_INTF1"] ? smartMergeObj[j][i]["TCP-RxTx_INTF1"]["value"] : "");
                    TCP_RxTx_INTF1_val.push(TCP_RxTx_INTF1);
                    TCP_RxTx_INTF2.push(smartMergeObj[j][i]["TCP-RxTx_INTF2"] ? smartMergeObj[j][i]["TCP-RxTx_INTF2"]["value"] : "");
                    TCP_RxTx_INTF2_val.push(TCP_RxTx_INTF2);
                    TCP_TxRx_INTF1.push(smartMergeObj[j][i]["TCP-TxRx_INTF1"] ? smartMergeObj[j][i]["TCP-TxRx_INTF1"]["value"] : "");
                    TCP_TxRx_INTF1_val.push(TCP_TxRx_INTF1);
                    TCP_TxRx_INTF2.push(smartMergeObj[j][i]["TCP-TxRx_INTF2"] ? smartMergeObj[j][i]["TCP-TxRx_INTF2"]["value"] : "");
                    TCP_TxRx_INTF2_val.push(TCP_TxRx_INTF2);
                    TCP_TxTx_INTF1.push(smartMergeObj[j][i]["TCP-TxTx_INTF1"] ? smartMergeObj[j][i]["TCP-TxTx_INTF1"]["value"] : "");
                    TCP_TxTx_INTF1_val.push(TCP_TxTx_INTF1);
                    TCP_TxTx_INTF2.push(smartMergeObj[j][i]["TCP-TxTx_INTF2"] ? smartMergeObj[j][i]["TCP-TxTx_INTF2"]["value"] : "");
                    TCP_TxTx_INTF2_val.push(TCP_TxTx_INTF2);


                    UDP_RxRx_INTF1.push(smartMergeObj[j][i]["UDP-RxRx_INTF1"] ? smartMergeObj[j][i]["UDP-RxRx_INTF1"]["value"] : "");
                    UDP_RxRx_INTF1_val.push(UDP_RxRx_INTF1);
                    UDP_RxRx_INTF2.push(smartMergeObj[j][i]["UDP-RxRx_INTF2"] ? smartMergeObj[j][i]["UDP-RxRx_INTF2"]["value"] : "");
                    UDP_RxRx_INTF2_val.push(UDP_RxRx_INTF2);
                    UDP_RxTx_INTF1.push(smartMergeObj[j][i]["UDP-RxTx_INTF1"] ? smartMergeObj[j][i]["UDP-RxTx_INTF1"]["value"] : "");
                    UDP_RxTx_INTF1_val.push(UDP_RxTx_INTF1);
                    UDP_RxTx_INTF2.push(smartMergeObj[j][i]["UDP-RxTx_INTF2"] ? smartMergeObj[j][i]["UDP-RxTx_INTF2"]["value"] : "");
                    UDP_RxTx_INTF2_val.push(UDP_RxTx_INTF2);
                    UDP_TxRx_INTF1.push(smartMergeObj[j][i]["UDP-TxRx_INTF1"] ? smartMergeObj[j][i]["UDP-TxRx_INTF1"]["value"] : "");
                    UDP_TxRx_INTF1_val.push(UDP_TxRx_INTF1);
                    UDP_TxRx_INTF2.push(smartMergeObj[j][i]["UDP-TxRx_INTF2"] ? smartMergeObj[j][i]["UDP-TxRx_INTF2"]["value"] : "");
                    UDP_TxRx_INTF2_val.push(UDP_TxRx_INTF2);
                    UDP_TxTx_INTF1.push(smartMergeObj[j][i]["UDP-TxTx_INTF1"] ? smartMergeObj[j][i]["UDP-TxTx_INTF1"]["value"] : "");
                    UDP_TxTx_INTF1_val.push(UDP_TxTx_INTF1);
                    UDP_TxTx_INTF2.push(smartMergeObj[j][i]["UDP-TxTx_INTF2"] ? smartMergeObj[j][i]["UDP-TxTx_INTF2"]["value"] : "");
                    UDP_TxTx_INTF2_val.push(UDP_TxTx_INTF2);

                    WiFiIntf1RSSI.push(smartMergeObj[j][i]["Wi-Fi Intf 1 RSSI"] ? smartMergeObj[j][i]["Wi-Fi Intf 1 RSSI"]["value"] : "");
                    WiFiIntf1RSSI_val.push(BTRSSI);
                    WiFiIntf2RSSI.push(smartMergeObj[j][i]["Wi-Fi Intf 2 RSSI"] ? smartMergeObj[j][i]["Wi-Fi Intf 2 RSSI"] : "");
                    WiFiIntf2RSSI_val.push(BTRSSI);

                    WiFiIntf_1RSSI.push(smartMergeObj[j][i]["Wi-Fi Intf_1 RSSI"] ? smartMergeObj[j][i]["Wi-Fi Intf_1 RSSI"]["value"] : "");
                    WiFiIntf_1RSSI_val.push(WiFiIntf_1RSSI);
                    WiFiIntf_2RSSI.push(smartMergeObj[j][i]["Wi-Fi Intf_2 RSSI"] ? smartMergeObj[j][i]["Wi-Fi Intf_2 RSSI"]["value"] : "");
                    WiFiIntf_2RSSI_val.push(WiFiIntf_2RSSI);


                    for (var x = 0; x < txrxCombinations.length; x++) {
                        for (var y = 0; y < performanceInterfaces.length; y++) {
                            if (typeof smartMergeObj[j][i]["TCP Coex Performance"] != 'undefined') {
                                if (typeof smartMergeObj[j][i]["TCP Coex Performance"][txrxCombinations[x]] != 'undefined') {
                                    if (typeof smartMergeObj[j][i]["TCP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]] != 'undefined') {
                                        TCPCoexPerformance.push(smartMergeObj[j][i]["TCP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]]["value"]);
                                        TCPCoexPerformance_val.push(TCPCoexPerformance);
                                    }
                                }
                            }

                            if (typeof smartMergeObj[j][i]["UDP Coex Performance"] != 'undefined') {
                                if (typeof smartMergeObj[j][i]["UDP Coex Performance"][txrxCombinations[x]] != 'undefined') {
                                    if (typeof smartMergeObj[j][i]["UDP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]] != 'undefined') {
                                        UDPCoexPerformance.push(smartMergeObj[j][i]["UDP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]]["value"]);
                                        UDPCoexPerformance_val.push(UDPCoexPerformance);
                                    }
                                }
                            }
                        }
                    }


                } else {

                    BTBaseline1.push(smartMergeObj[j][i]["BT Baseline #1"] ? smartMergeObj[j][i]["BT Baseline #1"] : "");
                    BTBaseline1_val.push(BTBaseline1);
                    BTBaseline2.push(smartMergeObj[j][i]["BT Baseline #2"] ? smartMergeObj[j][i]["BT Baseline #2"] : "");
                    BTBaseline2_val.push(BTBaseline2);
                    BTRSSI.push(smartMergeObj[j][i]["BT RSSI"] ? smartMergeObj[j][i]["BT RSSI"] : "");
                    BTRSSI_val.push(BTRSSI);
                    BT_RSSI.push(smartMergeObj[j][i]["BT_RSSI"] ? smartMergeObj[j][i]["BT_RSSI"] : "");
                    BT_RSSI_val.push(BT_RSSI);

                    TCP_RxRx_INTF1.push(smartMergeObj[j][i]["TCP-RxRx_INTF1"] ? smartMergeObj[j][i]["TCP-RxRx_INTF1"] : "");
                    TCP_RxRx_INTF1_val.push(TCP_RxRx_INTF1);
                    TCP_RxRx_INTF2.push(smartMergeObj[j][i]["TCP-RxRx_INTF2"] ? smartMergeObj[j][i]["TCP-RxRx_INTF2"] : "");
                    TCP_RxRx_INTF2_val.push(TCP_RxRx_INTF2);
                    TCP_RxTx_INTF1.push(smartMergeObj[j][i]["TCP-RxTx_INTF1"] ? smartMergeObj[j][i]["TCP-RxTx_INTF1"] : "");
                    TCP_RxTx_INTF1_val.push(TCP_RxTx_INTF1);
                    TCP_RxTx_INTF2.push(smartMergeObj[j][i]["TCP-RxTx_INTF2"] ? smartMergeObj[j][i]["TCP-RxTx_INTF2"] : "");
                    TCP_RxTx_INTF2_val.push(TCP_RxTx_INTF2);
                    TCP_TxRx_INTF1.push(smartMergeObj[j][i]["TCP-TxRx_INTF1"] ? smartMergeObj[j][i]["TCP-TxRx_INTF1"] : "");
                    TCP_TxRx_INTF1_val.push(TCP_TxRx_INTF1);
                    TCP_TxRx_INTF2.push(smartMergeObj[j][i]["TCP-TxRx_INTF2"] ? smartMergeObj[j][i]["TCP-TxRx_INTF2"] : "");
                    TCP_TxRx_INTF2_val.push(TCP_TxRx_INTF2);
                    TCP_TxTx_INTF1.push(smartMergeObj[j][i]["TCP-TxTx_INTF1"] ? smartMergeObj[j][i]["TCP-TxTx_INTF1"] : "");
                    TCP_TxTx_INTF1_val.push(TCP_TxTx_INTF1);
                    TCP_TxTx_INTF2.push(smartMergeObj[j][i]["TCP-TxTx_INTF2"] ? smartMergeObj[j][i]["TCP-TxTx_INTF2"] : "");
                    TCP_TxTx_INTF2_val.push(TCP_TxTx_INTF2);


                    UDP_RxRx_INTF1.push(smartMergeObj[j][i]["UDP-RxRx_INTF1"] ? smartMergeObj[j][i]["UDP-RxRx_INTF1"] : "");
                    UDP_RxRx_INTF1_val.push(UDP_RxRx_INTF1);
                    UDP_RxRx_INTF2.push(smartMergeObj[j][i]["UDP-RxRx_INTF2"] ? smartMergeObj[j][i]["UDP-RxRx_INTF2"] : "");
                    UDP_RxRx_INTF2_val.push(UDP_RxRx_INTF2);
                    UDP_RxTx_INTF1.push(smartMergeObj[j][i]["UDP-RxTx_INTF1"] ? smartMergeObj[j][i]["UDP-RxTx_INTF1"] : "");
                    UDP_RxTx_INTF1_val.push(UDP_RxTx_INTF1);
                    UDP_RxTx_INTF2.push(smartMergeObj[j][i]["UDP-RxTx_INTF2"] ? smartMergeObj[j][i]["UDP-RxTx_INTF2"] : "");
                    UDP_RxTx_INTF2_val.push(UDP_RxTx_INTF2);
                    UDP_TxRx_INTF1.push(smartMergeObj[j][i]["UDP-TxRx_INTF1"] ? smartMergeObj[j][i]["UDP-TxRx_INTF1"] : "");
                    UDP_TxRx_INTF1_val.push(UDP_TxRx_INTF1);
                    UDP_TxRx_INTF2.push(smartMergeObj[j][i]["UDP-TxRx_INTF2"] ? smartMergeObj[j][i]["UDP-TxRx_INTF2"] : "");
                    UDP_TxRx_INTF2_val.push(UDP_TxRx_INTF2);
                    UDP_TxTx_INTF1.push(smartMergeObj[j][i]["UDP-TxTx_INTF1"] ? smartMergeObj[j][i]["UDP-TxTx_INTF1"] : "");
                    UDP_TxTx_INTF1_val.push(UDP_TxTx_INTF1);
                    UDP_TxTx_INTF2.push(smartMergeObj[j][i]["UDP-TxTx_INTF2"] ? smartMergeObj[j][i]["UDP-TxTx_INTF2"] : "");
                    UDP_TxTx_INTF2_val.push(UDP_TxTx_INTF2);

                    WiFiIntf1RSSI.push(smartMergeObj[j][i]["Wi-Fi Intf 1 RSSI"] ? smartMergeObj[j][i]["Wi-Fi Intf 1 RSSI"] : "");
                    WiFiIntf1RSSI_val.push(BTRSSI);
                    WiFiIntf2RSSI.push(smartMergeObj[j][i]["Wi-Fi Intf 2 RSSI"] ? smartMergeObj[j][i]["Wi-Fi Intf 2 RSSI"] : "");
                    WiFiIntf2RSSI_val.push(BTRSSI);

                    WiFiIntf_1RSSI.push(smartMergeObj[j][i]["Wi-Fi Intf_1 RSSI"] ? smartMergeObj[j][i]["Wi-Fi Intf_1 RSSI"] : "");
                    WiFiIntf_1RSSI_val.push(WiFiIntf_1RSSI);
                    WiFiIntf_2RSSI.push(smartMergeObj[j][i]["Wi-Fi Intf_2 RSSI"] ? smartMergeObj[j][i]["Wi-Fi Intf_2 RSSI"] : "");
                    WiFiIntf_2RSSI_val.push(WiFiIntf_2RSSI);


                    for (var x = 0; x < txrxCombinations.length; x++) {
                        for (var y = 0; y < performanceInterfaces.length; y++) {
                            if (typeof smartMergeObj[j][i]["TCP Coex Performance"] != 'undefined') {
                                if (typeof smartMergeObj[j][i]["TCP Coex Performance"][txrxCombinations[x]] != 'undefined') {
                                    if (typeof smartMergeObj[j][i]["TCP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]] != 'undefined') {
                                        TCPCoexPerformance.push(smartMergeObj[j][i]["TCP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]]);
                                        TCPCoexPerformance_val.push(TCPCoexPerformance);
                                    }
                                }
                            }

                            if (typeof smartMergeObj[j][i]["UDP Coex Performance"] != 'undefined') {
                                if (typeof smartMergeObj[j][i]["UDP Coex Performance"][txrxCombinations[x]] != 'undefined') {
                                    if (typeof smartMergeObj[j][i]["UDP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]] != 'undefined') {
                                        UDPCoexPerformance.push(smartMergeObj[j][i]["UDP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]]);
                                        UDPCoexPerformance_val.push(UDPCoexPerformance);
                                    }
                                }
                            }
                        }
                    }

                }

                BTBaseline1 = [];
                BTBaseline2 = [];
                BTRSSI = [];
                TCP_RxRx_INTF1 = [];
                TCP_RxRx_INTF2 = [];
                TCP_RxTx_INTF1 = [];
                TCP_RxTx_INTF2 = [];
                TCP_TxRx_INTF1 = [];
                TCP_TxRx_INTF2 = [];
                TCP_TxTx_INTF1 = [];
                TCP_TxTx_INTF2 = [];
                UDP_RxRx_INTF1 = [];
                UDP_RxRx_INTF2 = [];
                UDP_RxTx_INTF1 = [];
                UDP_RxTx_INTF2 = [];
                UDP_TxRx_INTF1 = [];
                UDP_TxRx_INTF2 = [];
                UDP_TxTx_INTF1 = [];
                UDP_TxTx_INTF2 = [];
                WiFiIntf1RSSI = [];
                WiFiIntf2RSSI = [];
                WiFiIntf_1RSSI = [];
                WiFiIntf_2RSSI = [];
                TCPCoexPerformance = [];
                UDPCoexPerformance = [];
                BT_RSSI = [];
            }

            let BTBaseline1MAX = await getMaxValInArr(BTBaseline1_val);
            let BTBaseline2MAX = await getMaxValInArr(BTBaseline2_val);
            let BTRSSIMAX = await getMaxValInArr(BTRSSI_val);
            let BT_RSSIMAX = await getMaxValInArr(BT_RSSI_val);
            let TCP_RxRx_INTF1MAX = await getMaxValInArr(TCP_RxRx_INTF1_val);
            let TCP_RxRx_INTF2MAX = await getMaxValInArr(TCP_RxRx_INTF2_val);
            let TCP_RxTx_INTF1MAX = await getMaxValInArr(TCP_RxTx_INTF1_val);
            let TCP_RxTx_INTF2MAX = await getMaxValInArr(TCP_RxTx_INTF2_val);
            let TCP_TxRx_INTF1MAX = await getMaxValInArr(TCP_TxRx_INTF1_val);
            let TCP_TxRx_INTF2MAX = await getMaxValInArr(TCP_TxRx_INTF2_val);
            let TCP_TxTx_INTF1MAX = await getMaxValInArr(TCP_TxTx_INTF1_val);
            let TCP_TxTx_INTF2MAX = await getMaxValInArr(TCP_TxTx_INTF2_val);
            let UDP_RxRx_INTF1MAX = await getMaxValInArr(UDP_RxRx_INTF1_val);
            let UDP_RxRx_INTF2MAX = await getMaxValInArr(UDP_RxRx_INTF2_val);
            let UDP_RxTx_INTF1MAX = await getMaxValInArr(UDP_RxTx_INTF1_val);
            let UDP_RxTx_INTF2MAX = await getMaxValInArr(UDP_RxTx_INTF2_val);
            let UDP_TxRx_INTF1MAX = await getMaxValInArr(UDP_TxRx_INTF1_val);
            let UDP_TxRx_INTF2MAX = await getMaxValInArr(UDP_TxRx_INTF2_val);
            let UDP_TxTx_INTF1MAX = await getMaxValInArr(UDP_TxTx_INTF1_val);
            let UDP_TxTx_INTF2MAX = await getMaxValInArr(UDP_TxTx_INTF2_val);
            let WiFiIntf1RSSIMAX = await getMaxValInArr(WiFiIntf1RSSI_val);
            let WiFiIntf2RSSIMAX = await getMaxValInArr(WiFiIntf2RSSI_val);
            let WiFiIntf_1RSSIMAX = await getMaxValInArr(WiFiIntf_1RSSI_val);
            let WiFiIntf_2RSSIMAX = await getMaxValInArr(WiFiIntf_2RSSI_val);
            let TCPCoexPerformanceMAX = await getMaxValInArr(TCPCoexPerformance_val);
            let UDPCoexPerformanceMAX = await getMaxValInArr(UDPCoexPerformance_val);

            BTBaseline1_val = [];
            BTBaseline2_val = [];
            BTRSSI_val = [];
            BT_RSSI_val = [];
            TCP_RxRx_INTF1_val = [];
            TCP_RxRx_INTF2_val = [];
            TCP_RxTx_INTF1_val = [];
            TCP_RxTx_INTF2_val = [];
            TCP_TxRx_INTF1_val = [];
            TCP_TxRx_INTF2_val = [];
            TCP_TxTx_INTF1_val = [];
            TCP_TxTx_INTF2_val = [];
            UDP_RxRx_INTF1_val = [];
            UDP_RxRx_INTF2_val = [];
            UDP_RxTx_INTF1_val = [];
            UDP_RxTx_INTF2_val = [];
            UDP_TxRx_INTF1_val = [];
            UDP_TxRx_INTF2_val = [];
            UDP_TxTx_INTF1_val = [];
            UDP_TxTx_INTF2_val = [];
            WiFiIntf1RSSI_val = [];
            WiFiIntf2RSSI_val = [];
            WiFiIntf_1RSSI_val = [];
            WiFiIntf_2RSSI_val = [];
            TCPCoexPerformance_val = [];
            UDPCoexPerformance_val = [];

            // Status Changes loop
            for (var k = 0; k < innerArr.length; k++) {
                for (var p = 0; p < innerArr[k].length; p++) {

                    if (typeof innerArr[k][p]["reportName"] != 'undefined') {

                        if (typeof innerArr[k][p]["BT Baseline #1"] != 'undefined') {

                            if (innerArr[k][p]["BT Baseline #1"]["value"] == BTBaseline1MAX[0]) {
                                innerArr[k][p]["BT Baseline #1"] = { "value": innerArr[k][p]["BT Baseline #1"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["BT Baseline #1"] = { "value": innerArr[k][p]["BT Baseline #1"]["value"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["BT Baseline #2"]["value"] != 'undefined') {
                            if (innerArr[k][p]["BT Baseline #2"]["value"] == BTBaseline2MAX[0]) {
                                innerArr[k][p]["BT Baseline #2"] = { "value": innerArr[k][p]["BT Baseline #2"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["BT Baseline #2"] = { "value": innerArr[k][p]["BT Baseline #2"]["value"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["BT RSSI"] != 'undefined') {
                            if (innerArr[k][p]["BT RSSI"]["value"] == BTRSSIMAX[0]) {
                                innerArr[k][p]["BT RSSI"] = { "value": innerArr[k][p]["BT RSSI"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["BT RSSI"] = { "value": innerArr[k][p]["BT RSSI"]["value"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["BT_RSSI"] != 'undefined') {
                            if (innerArr[k][p]["BT_RSSI"]["value"] == BT_RSSIMAX[0]) {
                                innerArr[k][p]["BT_RSSI"] = { "value": innerArr[k][p]["BT_RSSI"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["BT_RSSI"] = { "value": innerArr[k][p]["BT_RSSI"]["value"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["Wi-Fi Intf 1 RSSI"] != 'undefined') {
                            if (innerArr[k][p]["Wi-Fi Intf 1 RSSI"]["value"] == WiFiIntf1RSSIMAX[0]) {
                                innerArr[k][p]["Wi-Fi Intf 1 RSSI"] = { "value": innerArr[k][p]["Wi-Fi Intf 1 RSSI"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["Wi-Fi Intf 1 RSSI"] = { "value": innerArr[k][p]["Wi-Fi Intf 1 RSSI"]["value"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["Wi-Fi Intf 2 RSSI"] != 'undefined') {
                            if (innerArr[k][p]["Wi-Fi Intf 2 RSSI"]["value"] == WiFiIntf2RSSIMAX[0]) {
                                innerArr[k][p]["Wi-Fi Intf 2 RSSI"] = { "value": innerArr[k][p]["Wi-Fi Intf 2 RSSI"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["Wi-Fi Intf 2 RSSI"] = { "value": innerArr[k][p]["Wi-Fi Intf 2 RSSI"]["value"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["Wi-Fi Intf 1 RSSI"] != 'undefined') {
                            if (innerArr[k][p]["Wi-Fi Intf_1 RSSI"]["value"] == WiFiIntf_1RSSIMAX[0]) {
                                innerArr[k][p]["Wi-Fi Intf_1 RSSI"] = { "value": innerArr[k][p]["Wi-Fi Intf_1 RSSI"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["Wi-Fi Intf_1 RSSI"] = { "value": innerArr[k][p]["Wi-Fi Intf_1 RSSI"]["value"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["Wi-Fi Intf_2 RSSI"] != 'undefined') {
                            if (innerArr[k][p]["Wi-Fi Intf_2 RSSI"]["value"] == WiFiIntf_2RSSIMAX[0]) {
                                innerArr[k][p]["Wi-Fi Intf_2 RSSI"] = { "value": innerArr[k][p]["Wi-Fi Intf_2 RSSI"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["Wi-Fi Intf_2 RSSI"] = { "value": innerArr[k][p]["Wi-Fi Intf_2 RSSI"]["value"], "status": false };
                            }
                        }


                        // TCP
                        if (typeof innerArr[k][p]["TCP-RxRx_INTF1"] != 'undefined') {
                            if (innerArr[k][p]["TCP-RxRx_INTF1"]["value"] == TCP_RxRx_INTF1MAX[0]) {
                                innerArr[k][p]["TCP-RxRx_INTF1"] = { "value": innerArr[k][p]["TCP-RxRx_INTF1"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["TCP-RxRx_INTF1"] = { "value": innerArr[k][p]["TCP-RxRx_INTF1"]["value"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["TCP-RxRx_INTF2"] != 'undefined') {
                            if (innerArr[k][p]["TCP-RxRx_INTF2"]["value"] == TCP_RxRx_INTF2MAX[0]) {
                                innerArr[k][p]["TCP-RxRx_INTF2"] = { "value": innerArr[k][p]["TCP-RxRx_INTF2"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["TCP-RxRx_INTF2"] = { "value": innerArr[k][p]["TCP-RxRx_INTF2"]["value"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["TCP-RxTx_INTF1"] != 'undefined') {
                            if (innerArr[k][p]["TCP-RxTx_INTF1"]["value"] == TCP_RxTx_INTF1MAX[0]) {
                                innerArr[k][p]["TCP-RxTx_INTF1"] = { "value": innerArr[k][p]["TCP-RxTx_INTF1"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["TCP-RxTx_INTF1"] = { "value": innerArr[k][p]["TCP-RxTx_INTF1"]["value"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["TCP-RxTx_INTF2"] != 'undefined') {
                            if (innerArr[k][p]["TCP-RxTx_INTF2"]["value"] == TCP_RxTx_INTF2MAX[0]) {
                                innerArr[k][p]["TCP-RxTx_INTF2"] = { "value": innerArr[k][p]["TCP-RxTx_INTF2"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["TCP-RxTx_INTF2"] = { "value": innerArr[k][p]["TCP-RxTx_INTF2"]["value"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["TCP-TxRx_INTF1"] != 'undefined') {
                            if (innerArr[k][p]["TCP-TxRx_INTF1"]["value"] == TCP_TxRx_INTF1MAX[0]) {
                                innerArr[k][p]["TCP-TxRx_INTF1"] = { "value": innerArr[k][p]["TCP-TxRx_INTF1"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["TCP-TxRx_INTF1"] = { "value": innerArr[k][p]["TCP-TxRx_INTF1"]["value"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["TCP-TxRx_INTF2"] != 'undefined') {
                            if (innerArr[k][p]["TCP-TxRx_INTF2"]["value"] == TCP_TxRx_INTF2MAX[0]) {
                                innerArr[k][p]["TCP-TxRx_INTF2"] = { "value": innerArr[k][p]["TCP-TxRx_INTF2"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["TCP-TxRx_INTF2"] = { "value": innerArr[k][p]["TCP-TxRx_INTF2"]["value"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["TCP-TxTx_INTF1"] != 'undefined') {
                            if (innerArr[k][p]["TCP-TxTx_INTF1"]["value"] == TCP_TxTx_INTF1MAX[0]) {
                                innerArr[k][p]["TCP-TxTx_INTF1"] = { "value": innerArr[k][p]["TCP-TxTx_INTF1"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["TCP-TxTx_INTF1"] = { "value": innerArr[k][p]["TCP-TxTx_INTF1"]["value"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["TCP-TxTx_INTF2"] != 'undefined') {
                            if (innerArr[k][p]["TCP-TxTx_INTF2"]["value"] == TCP_TxTx_INTF2MAX[0]) {
                                innerArr[k][p]["TCP-TxTx_INTF2"] = { "value": innerArr[k][p]["TCP-TxTx_INTF2"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["TCP-TxTx_INTF2"] = { "value": innerArr[k][p]["TCP-TxTx_INTF2"]["value"], "status": false };
                            }
                        }

                        // UDP 
                        if (typeof innerArr[k][p]["UDP-RxRx_INTF1"] != 'undefined') {
                            if (innerArr[k][p]["UDP-RxRx_INTF1"]["value"] == UDP_RxRx_INTF1MAX[0]) {
                                innerArr[k][p]["UDP-RxRx_INTF1"] = { "value": innerArr[k][p]["UDP-RxRx_INTF1"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["UDP-RxRx_INTF1"] = { "value": innerArr[k][p]["UDP-RxRx_INTF1"]["value"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["UDP-RxRx_INTF2"] != 'undefined') {
                            if (innerArr[k][p]["UDP-RxRx_INTF2"]["value"] == UDP_RxRx_INTF2MAX[0]) {
                                innerArr[k][p]["UDP-RxRx_INTF2"] = { "value": innerArr[k][p]["UDP-RxRx_INTF2"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["UDP-RxRx_INTF2"] = { "value": innerArr[k][p]["UDP-RxRx_INTF2"]["value"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["UDP-RxTx_INTF1"] != 'undefined') {
                            if (innerArr[k][p]["UDP-RxTx_INTF1"]["value"] == UDP_RxTx_INTF1MAX[0]) {
                                innerArr[k][p]["UDP-RxTx_INTF1"] = { "value": innerArr[k][p]["UDP-RxTx_INTF1"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["UDP-RxTx_INTF1"] = { "value": innerArr[k][p]["UDP-RxTx_INTF1"]["value"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["UDP-RxTx_INTF2"] != 'undefined') {
                            if (innerArr[k][p]["UDP-RxTx_INTF2"]["value"] == UDP_RxTx_INTF2MAX[0]) {
                                innerArr[k][p]["UDP-RxTx_INTF2"] = { "value": innerArr[k][p]["UDP-RxTx_INTF2"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["UDP-RxTx_INTF2"] = { "value": innerArr[k][p]["UDP-RxTx_INTF2"]["value"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["UDP-TxRx_INTF1"] != 'undefined') {
                            if (innerArr[k][p]["UDP-TxRx_INTF1"]["value"] == UDP_TxRx_INTF1MAX[0]) {
                                innerArr[k][p]["UDP-TxRx_INTF1"] = { "value": innerArr[k][p]["UDP-TxRx_INTF1"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["UDP-TxRx_INTF1"] = { "value": innerArr[k][p]["UDP-TxRx_INTF1"]["value"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["UDP-TxRx_INTF2"] != 'undefined') {
                            if (innerArr[k][p]["UDP-TxRx_INTF2"]["value"] == UDP_TxRx_INTF2MAX[0]) {
                                innerArr[k][p]["UDP-TxRx_INTF2"] = { "value": innerArr[k][p]["UDP-TxRx_INTF2"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["UDP-TxRx_INTF2"] = { "value": innerArr[k][p]["UDP-TxRx_INTF2"]["value"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["UDP-TxTx_INTF1"] != 'undefined') {
                            if (innerArr[k][p]["UDP-TxTx_INTF1"]["value"] == UDP_TxTx_INTF1MAX[0]) {
                                innerArr[k][p]["UDP-TxTx_INTF1"] = { "value": innerArr[k][p]["UDP-TxTx_INTF1"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["UDP-TxTx_INTF1"] = { "value": innerArr[k][p]["UDP-TxTx_INTF1"]["value"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["UDP-TxTx_INTF2"] != 'undefined') {
                            if (innerArr[k][p]["UDP-TxTx_INTF2"]["value"] == UDP_TxTx_INTF2MAX[0]) {
                                innerArr[k][p]["UDP-TxTx_INTF2"] = { "value": innerArr[k][p]["UDP-TxTx_INTF2"]["value"], "status": true };
                            } else {
                                innerArr[k][p]["UDP-TxTx_INTF2"] = { "value": innerArr[k][p]["UDP-TxTx_INTF2"]["value"], "status": false };
                            }
                        }

                        for (var x = 0; x < txrxCombinations.length; x++) {
                            for (var y = 0; y < performanceInterfaces.length; y++) {
                                if (typeof innerArr[k][p]["TCP Coex Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["TCP Coex Performance"][txrxCombinations[x]] != 'undefined') {
                                        if (typeof innerArr[k][p]["TCP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]] != 'undefined') {
                                            if (innerArr[k][p]["TCP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]]["value"] = TCPCoexPerformanceMAX[y]) {
                                                innerArr[k][p]["TCP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]] = { "value": innerArr[k][p]["TCP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]]["value"], "status": true }
                                            } else {
                                                innerArr[k][p]["TCP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]] = { "value": innerArr[k][p]["TCP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]]["value"], "status": false }
                                            }
                                        }
                                    }
                                }

                                if (typeof innerArr[k][p]["UDP Coex Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["UDP Coex Performance"][txrxCombinations[x]] != 'undefined') {
                                        if (typeof innerArr[k][p]["UDP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]] != 'undefined') {
                                            if (innerArr[k][p]["UDP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]]["value"] = UDPCoexPerformanceMAX[y]) {
                                                innerArr[k][p]["UDP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]] = { "value": innerArr[k][p]["UDP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]]["value"], "status": true }
                                            } else {
                                                innerArr[k][p]["UDP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]] = { "value": innerArr[k][p]["UDP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]]["value"], "status": false }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                    } else {

                        if (typeof innerArr[k][p]["BT Baseline #1"] != 'undefined') {
                            if (innerArr[k][p]["BT Baseline #1"] == BTBaseline1MAX[0]) {
                                innerArr[k][p]["BT Baseline #1"] = { "value": innerArr[k][p]["BT Baseline #1"], "status": true };
                            } else {
                                innerArr[k][p]["BT Baseline #1"] = { "value": innerArr[k][p]["BT Baseline #1"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["BT Baseline #2"] != 'undefined') {
                            if (innerArr[k][p]["BT Baseline #2"] == BTBaseline2MAX[0]) {
                                innerArr[k][p]["BT Baseline #2"] = { "value": innerArr[k][p]["BT Baseline #2"], "status": true };
                            } else {
                                innerArr[k][p]["BT Baseline #2"] = { "value": innerArr[k][p]["BT Baseline #2"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["BT RSSI"] != 'undefined') {
                            if (innerArr[k][p]["BT RSSI"] == BTRSSIMAX[0]) {
                                innerArr[k][p]["BT RSSI"] = { "value": innerArr[k][p]["BT RSSI"], "status": true };
                            } else {
                                innerArr[k][p]["BT RSSI"] = { "value": innerArr[k][p]["BT RSSI"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["BT_RSSI"] != 'undefined') {
                            if (innerArr[k][p]["BT_RSSI"] == BT_RSSIMAX[0]) {
                                innerArr[k][p]["BT_RSSI"] = { "value": innerArr[k][p]["BT_RSSI"], "status": true };
                            } else {
                                innerArr[k][p]["BT_RSSI"] = { "value": innerArr[k][p]["BT_RSSI"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["Wi-Fi Intf 1 RSSI"] != 'undefined') {
                            if (innerArr[k][p]["Wi-Fi Intf 1 RSSI"] == WiFiIntf1RSSIMAX[0]) {
                                innerArr[k][p]["Wi-Fi Intf 1 RSSI"] = { "value": innerArr[k][p]["Wi-Fi Intf 1 RSSI"], "status": true };
                            } else {
                                innerArr[k][p]["Wi-Fi Intf 1 RSSI"] = { "value": innerArr[k][p]["Wi-Fi Intf 1 RSSI"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["Wi-Fi Intf 2 RSSI"] != 'undefined') {
                            if (innerArr[k][p]["Wi-Fi Intf 2 RSSI"] == WiFiIntf2RSSIMAX[0]) {
                                innerArr[k][p]["Wi-Fi Intf 2 RSSI"] = { "value": innerArr[k][p]["Wi-Fi Intf 2 RSSI"], "status": true };
                            } else {
                                innerArr[k][p]["Wi-Fi Intf 2 RSSI"] = { "value": innerArr[k][p]["Wi-Fi Intf 2 RSSI"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["Wi-Fi Intf_1 RSSI"] != 'undefined') {
                            if (innerArr[k][p]["Wi-Fi Intf_1 RSSI"] == WiFiIntf_1RSSIMAX[0]) {
                                innerArr[k][p]["Wi-Fi Intf_1 RSSI"] = { "value": innerArr[k][p]["Wi-Fi Intf_1 RSSI"], "status": true };
                            } else {
                                innerArr[k][p]["Wi-Fi Intf_1 RSSI"] = { "value": innerArr[k][p]["Wi-Fi Intf_1 RSSI"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["Wi-Fi Intf_2 RSSI"] != 'undefined') {
                            if (innerArr[k][p]["Wi-Fi Intf_2 RSSI"] == WiFiIntf_2RSSIMAX[0]) {
                                innerArr[k][p]["Wi-Fi Intf_2 RSSI"] = { "value": innerArr[k][p]["Wi-Fi Intf_2 RSSI"], "status": true };
                            } else {
                                innerArr[k][p]["Wi-Fi Intf_2 RSSI"] = { "value": innerArr[k][p]["Wi-Fi Intf_2 RSSI"], "status": false };
                            }
                        }


                        // TCP
                        if (typeof innerArr[k][p]["TCP-RxRx_INTF1"] != 'undefined') {
                            if (innerArr[k][p]["TCP-RxRx_INTF1"] == TCP_RxRx_INTF1MAX[0]) {
                                innerArr[k][p]["TCP-RxRx_INTF1"] = { "value": innerArr[k][p]["TCP-RxRx_INTF1"], "status": true };
                            } else {
                                innerArr[k][p]["TCP-RxRx_INTF1"] = { "value": innerArr[k][p]["TCP-RxRx_INTF1"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["TCP-RxRx_INTF2"] != 'undefined') {
                            if (innerArr[k][p]["TCP-RxRx_INTF2"] == TCP_RxRx_INTF2MAX[0]) {
                                innerArr[k][p]["TCP-RxRx_INTF2"] = { "value": innerArr[k][p]["TCP-RxRx_INTF2"], "status": true };
                            } else {
                                innerArr[k][p]["TCP-RxRx_INTF2"] = { "value": innerArr[k][p]["TCP-RxRx_INTF2"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["TCP-RxTx_INTF1"] != 'undefined') {
                            if (innerArr[k][p]["TCP-RxTx_INTF1"] == TCP_RxTx_INTF1MAX[0]) {
                                innerArr[k][p]["TCP-RxTx_INTF1"] = { "value": innerArr[k][p]["TCP-RxTx_INTF1"], "status": true };
                            } else {
                                innerArr[k][p]["TCP-RxTx_INTF1"] = { "value": innerArr[k][p]["TCP-RxTx_INTF1"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["TCP-RxTx_INTF2"] != 'undefined') {
                            if (innerArr[k][p]["TCP-RxTx_INTF2"] == TCP_RxTx_INTF2MAX[0]) {
                                innerArr[k][p]["TCP-RxTx_INTF2"] = { "value": innerArr[k][p]["TCP-RxTx_INTF2"], "status": true };
                            } else {
                                innerArr[k][p]["TCP-RxTx_INTF2"] = { "value": innerArr[k][p]["TCP-RxTx_INTF2"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["TCP-TxRx_INTF1"] != 'undefined') {
                            if (innerArr[k][p]["TCP-TxRx_INTF1"] == TCP_TxRx_INTF1MAX[0]) {
                                innerArr[k][p]["TCP-TxRx_INTF1"] = { "value": innerArr[k][p]["TCP-TxRx_INTF1"], "status": true };
                            } else {
                                innerArr[k][p]["TCP-TxRx_INTF1"] = { "value": innerArr[k][p]["TCP-TxRx_INTF1"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["TCP-TxRx_INTF2"] != 'undefined') {
                            if (innerArr[k][p]["TCP-TxRx_INTF2"] == TCP_TxRx_INTF2MAX[0]) {
                                innerArr[k][p]["TCP-TxRx_INTF2"] = { "value": innerArr[k][p]["TCP-TxRx_INTF2"], "status": true };
                            } else {
                                innerArr[k][p]["TCP-TxRx_INTF2"] = { "value": innerArr[k][p]["TCP-TxRx_INTF2"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["TCP-TxTx_INTF1"] != 'undefined') {
                            if (innerArr[k][p]["TCP-TxTx_INTF1"] == TCP_TxTx_INTF1MAX[0]) {
                                innerArr[k][p]["TCP-TxTx_INTF1"] = { "value": innerArr[k][p]["TCP-TxTx_INTF1"], "status": true };
                            } else {
                                innerArr[k][p]["TCP-TxTx_INTF1"] = { "value": innerArr[k][p]["TCP-TxTx_INTF1"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["TCP-TxTx_INTF2"] != 'undefined') {
                            if (innerArr[k][p]["TCP-TxTx_INTF2"] == TCP_TxTx_INTF2MAX[0]) {
                                innerArr[k][p]["TCP-TxTx_INTF2"] = { "value": innerArr[k][p]["TCP-TxTx_INTF2"], "status": true };
                            } else {
                                innerArr[k][p]["TCP-TxTx_INTF2"] = { "value": innerArr[k][p]["TCP-TxTx_INTF2"], "status": false };
                            }
                        }

                        // UDP 
                        if (typeof innerArr[k][p]["UDP-RxRx_INTF1"] != 'undefined') {
                            if (innerArr[k][p]["UDP-RxRx_INTF1"] == UDP_RxRx_INTF1MAX[0]) {
                                innerArr[k][p]["UDP-RxRx_INTF1"] = { "value": innerArr[k][p]["UDP-RxRx_INTF1"], "status": true };
                            } else {
                                innerArr[k][p]["UDP-RxRx_INTF1"] = { "value": innerArr[k][p]["UDP-RxRx_INTF1"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["UDP-RxRx_INTF2"] != 'undefined') {
                            if (innerArr[k][p]["UDP-RxRx_INTF2"] == UDP_RxRx_INTF2MAX[0]) {
                                innerArr[k][p]["UDP-RxRx_INTF2"] = { "value": innerArr[k][p]["UDP-RxRx_INTF2"], "status": true };
                            } else {
                                innerArr[k][p]["UDP-RxRx_INTF2"] = { "value": innerArr[k][p]["UDP-RxRx_INTF2"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["UDP-RxTx_INTF1"] != 'undefined') {
                            if (innerArr[k][p]["UDP-RxTx_INTF1"] == UDP_RxTx_INTF1MAX[0]) {
                                innerArr[k][p]["UDP-RxTx_INTF1"] = { "value": innerArr[k][p]["UDP-RxTx_INTF1"], "status": true };
                            } else {
                                innerArr[k][p]["UDP-RxTx_INTF1"] = { "value": innerArr[k][p]["UDP-RxTx_INTF1"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["UDP-RxTx_INTF2"] != 'undefined') {
                            if (innerArr[k][p]["UDP-RxTx_INTF2"] == UDP_RxTx_INTF2MAX[0]) {
                                innerArr[k][p]["UDP-RxTx_INTF2"] = { "value": innerArr[k][p]["UDP-RxTx_INTF2"], "status": true };
                            } else {
                                innerArr[k][p]["UDP-RxTx_INTF2"] = { "value": innerArr[k][p]["UDP-RxTx_INTF2"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["UDP-TxRx_INTF1"] != 'undefined') {
                            if (innerArr[k][p]["UDP-TxRx_INTF1"] == UDP_TxRx_INTF1MAX[0]) {
                                innerArr[k][p]["UDP-TxRx_INTF1"] = { "value": innerArr[k][p]["UDP-TxRx_INTF1"], "status": true };
                            } else {
                                innerArr[k][p]["UDP-TxRx_INTF1"] = { "value": innerArr[k][p]["UDP-TxRx_INTF1"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["UDP-TxRx_INTF2"] != 'undefined') {
                            if (innerArr[k][p]["UDP-TxRx_INTF2"] == UDP_TxRx_INTF2MAX[0]) {
                                innerArr[k][p]["UDP-TxRx_INTF2"] = { "value": innerArr[k][p]["UDP-TxRx_INTF2"], "status": true };
                            } else {
                                innerArr[k][p]["UDP-TxRx_INTF2"] = { "value": innerArr[k][p]["UDP-TxRx_INTF2"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["UDP-TxTx_INTF1"] != 'undefined') {
                            if (innerArr[k][p]["UDP-TxTx_INTF1"] == UDP_TxTx_INTF1MAX[0]) {
                                innerArr[k][p]["UDP-TxTx_INTF1"] = { "value": innerArr[k][p]["UDP-TxTx_INTF1"], "status": true };
                            } else {
                                innerArr[k][p]["UDP-TxTx_INTF1"] = { "value": innerArr[k][p]["UDP-TxTx_INTF1"], "status": false };
                            }
                        }

                        if (typeof innerArr[k][p]["UDP-TxTx_INTF2"] != 'undefined') {
                            if (innerArr[k][p]["UDP-TxTx_INTF2"] == UDP_TxTx_INTF2MAX[0]) {
                                innerArr[k][p]["UDP-TxTx_INTF2"] = { "value": innerArr[k][p]["UDP-TxTx_INTF2"], "status": true };
                            } else {
                                innerArr[k][p]["UDP-TxTx_INTF2"] = { "value": innerArr[k][p]["UDP-TxTx_INTF2"], "status": false };
                            }
                        }

                        for (var x = 0; x < txrxCombinations.length; x++) {
                            for (var y = 0; y < performanceInterfaces.length; y++) {
                                if (typeof innerArr[k][p]["TCP Coex Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["TCP Coex Performance"][txrxCombinations[x]] != 'undefined') {
                                        if (typeof innerArr[k][p]["TCP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]] != 'undefined') {
                                            if (innerArr[k][p]["TCP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]] = TCPCoexPerformanceMAX[y]) {
                                                innerArr[k][p]["TCP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]] = { "value": innerArr[k][p]["TCP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]], "status": true }
                                            } else {
                                                innerArr[k][p]["TCP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]] = { "value": innerArr[k][p]["TCP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]], "status": false }
                                            }
                                        }
                                    }
                                }

                                if (typeof innerArr[k][p]["UDP Coex Performance"] != 'undefined') {
                                    if (typeof innerArr[k][p]["UDP Coex Performance"][txrxCombinations[x]] != 'undefined') {
                                        if (typeof innerArr[k][p]["UDP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]] != 'undefined') {
                                            if (innerArr[k][p]["UDP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]] = UDPCoexPerformanceMAX[y]) {
                                                innerArr[k][p]["UDP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]] = { "value": innerArr[k][p]["UDP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]], "status": true }
                                            } else {
                                                innerArr[k][p]["UDP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]] = { "value": innerArr[k][p]["UDP Coex Performance"][txrxCombinations[x]][performanceInterfaces[y]], "status": false }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                    } // END of Else
                }
            }
        }
        return smartMergeObj;
    } catch (err) {
        logger.error("updateMaxValueBtThroughputData error : ", err);
    }
}